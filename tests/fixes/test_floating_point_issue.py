#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–ü—Ä–æ–±–ª–µ–º–∞: Order.from_dict() –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é 
–Ω–µ—Ç–æ—á–Ω—ã—Ö float –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∏–ø–∞ 15.3499999999999996447286321199499070644378662109375
"""

import sys
import os
import json
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'src')))

def test_current_problem():
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    print("üîç –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ù–ï–û–ö–†–£–ì–õ–ï–ù–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò")
    print("=" * 70)
    
    try:
        from domain.entities.order import Order, ExchangeInfo
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ issue - —Ç–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –±–∏—Ä–∂–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        problematic_data = {
            "id": "848456",
            "order_id": 1754225647058998,
            "symbol": "ATM/USDT",
            "side": "BUY",
            "type": "LIMIT",
            "amount": 15.3499999999999996447286321199499070644378662109375,
            "price": 1.6279999999999998916422327965847216546535491943359375,
            "status": "closed",
            "filled": 15.3499999999999996447286321199499070644378662109375,
            "fees": 0.0
        }
        
        print(f"üì• –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏:")
        print(f"   Amount: {problematic_data['amount']}")
        print(f"   Price: {problematic_data['price']}")
        print(f"   Filled: {problematic_data['filled']}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ from_dict (—Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        order = Order.from_dict(problematic_data)
        
        print(f"\nüì§ –û—Ä–¥–µ—Ä –ø–æ—Å–ª–µ Order.from_dict():")
        print(f"   Amount: {order.amount}")
        print(f"   Price: {order.price}")
        print(f"   Filled: {order.filled_amount}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø–∞–¥–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        order_dict = order.to_dict()
        print(f"\nüíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:")
        print(f"   Amount: {order_dict['amount']}")
        print(f"   Price: {order_dict['price']}")
        print(f"   Filled: {order_dict['filled_amount']}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é (–∫–∞–∫ –≤ postgres_provider.py)
        json_data = json.dumps(order_dict)
        restored_data = json.loads(json_data)
        
        print(f"\nüîÑ –ü–æ—Å–ª–µ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
        print(f"   Amount: {restored_data['amount']}")
        print(f"   Price: {restored_data['price']}")
        print(f"   Filled: {restored_data['filled_amount']}")
        
        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:")
        print(f"   ‚Ä¢ –ù–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print(f"   ‚Ä¢ –í–º–µ—Å—Ç–æ 15.35 –ø–æ–ª—É—á–∞–µ–º {order.amount}")
        print(f"   ‚Ä¢ –í–º–µ—Å—Ç–æ 1.628 –ø–æ–ª—É—á–∞–µ–º {order.price}")
        
        return True, order, problematic_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã: {e}")
        import traceback
        traceback.print_exc()
        return False, None, None

def test_exchange_info_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∏—Ä–∂–∏"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –¢–û–ß–ù–û–°–¢–ò")
    print("=" * 70)
    
    try:
        from domain.entities.order import ExchangeInfo
        from domain.factories.order_factory import OrderFactory
        
        # –°–æ–∑–¥–∞–µ–º ExchangeInfo –¥–ª—è ATM/USDT (–∫–∞–∫ –≤ –ª–æ–≥–∞—Ö)
        exchange_info = ExchangeInfo(
            symbol="ATM/USDT",
            min_qty=0.01,
            max_qty=90000.0,
            step_size=0.01,  # –®–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            min_price=0.001,
            max_price=10000.0,
            tick_size=0.001,  # –®–∞–≥ —Ü–µ–Ω—ã
            min_notional=5.0,
            fees={'maker': 0.001, 'taker': 0.001},
            precision={'amount': 0.01, 'price': 0.001, 'cost': None, 'base': 1e-08, 'quote': 1e-08}
        )
        
        print(f"‚úÖ ExchangeInfo –¥–ª—è ATM/USDT:")
        print(f"   Step size (amount): {exchange_info.step_size}")
        print(f"   Tick size (price): {exchange_info.tick_size}")
        print(f"   Precision: {exchange_info.precision}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ OrderFactory
        order_factory = OrderFactory()
        order_factory.update_exchange_info("ATM/USDT", exchange_info)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        problematic_amount = 15.3499999999999996447286321199499070644378662109375
        problematic_price = 1.6279999999999998916422327965847216546535491943359375
        
        rounded_amount = order_factory.adjust_amount_precision("ATM/USDT", problematic_amount)
        rounded_price = order_factory.adjust_price_precision("ATM/USDT", problematic_price)
        
        print(f"\nüîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è OrderFactory:")
        print(f"   Amount: {problematic_amount} ‚Üí {rounded_amount}")
        print(f"   Price: {problematic_price} ‚Üí {rounded_price}")
        
        print(f"\n‚úÖ –ú–ï–¢–û–î–´ –û–ö–†–£–ì–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û")
        print(f"   ‚Ä¢ Amount –æ–∫—Ä—É–≥–ª–µ–Ω –¥–æ {rounded_amount} (—à–∞–≥ 0.01)")
        print(f"   ‚Ä¢ Price –æ–∫—Ä—É–≥–ª–µ–Ω –¥–æ {rounded_price} (—à–∞–≥ 0.001)")
        
        return True, exchange_info, order_factory
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ExchangeInfo: {e}")
        import traceback
        traceback.print_exc()
        return False, None, None

def test_proposed_solution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ì–û –†–ï–®–ï–ù–ò–Ø")
    print("=" * 70)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        problem_success, problem_order, problem_data = test_current_problem()
        info_success, exchange_info, order_factory = test_exchange_info_availability()
        
        if not (problem_success and info_success):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è")
            return False
        
        print(f"\nüí° –ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ï –†–ï–®–ï–ù–ò–ï:")
        print(f"   1. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å Order.from_dict() –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è")
        print(f"   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∏—Ä–∂–∏")
        print(f"   3. –ü—Ä–∏–º–µ–Ω—è—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Order.from_dict()
        def create_fixed_order_from_dict(data, exchange_info=None):
            """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Order.from_dict() —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º"""
            from domain.entities.order import Order
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –∫–∞–∫ –æ–±—ã—á–Ω–æ
            order = Order.from_dict(data)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º–≤–æ–ª–µ
            if exchange_info and data.get('symbol') == exchange_info.symbol:
                # –û–∫—Ä—É–≥–ª—è–µ–º amount —Å–æ–≥–ª–∞—Å–Ω–æ step_size
                if exchange_info.step_size and exchange_info.step_size > 0:
                    import math
                    precision = len(str(exchange_info.step_size).split('.')[-1]) if '.' in str(exchange_info.step_size) else 0
                    steps = order.amount / exchange_info.step_size
                    steps = math.floor(steps)  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    order.amount = round(steps * exchange_info.step_size, precision)
                
                # –û–∫—Ä—É–≥–ª—è–µ–º price —Å–æ–≥–ª–∞—Å–Ω–æ tick_size
                if exchange_info.tick_size and exchange_info.tick_size > 0:
                    precision = len(str(exchange_info.tick_size).split('.')[-1]) if '.' in str(exchange_info.tick_size) else 0
                    order.price = round(order.price // exchange_info.tick_size * exchange_info.tick_size, precision)
                
                # –û–∫—Ä—É–≥–ª—è–µ–º filled_amount –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ amount
                if order.filled_amount and exchange_info.step_size and exchange_info.step_size > 0:
                    precision = len(str(exchange_info.step_size).split('.')[-1]) if '.' in str(exchange_info.step_size) else 0
                    steps = order.filled_amount / exchange_info.step_size
                    steps = math.floor(steps)
                    order.filled_amount = round(steps * exchange_info.step_size, precision)
            
            return order
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        fixed_order = create_fixed_order_from_dict(problem_data, exchange_info)
        
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –í–ï–†–°–ò–ò:")
        print(f"   Amount: {problem_data['amount']} ‚Üí {fixed_order.amount}")
        print(f"   Price: {problem_data['price']} ‚Üí {fixed_order.price}")
        print(f"   Filled: {problem_data['filled']} ‚Üí {fixed_order.filled_amount}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø–∞–¥–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        fixed_dict = fixed_order.to_dict()
        print(f"\nüíæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ë–î:")
        print(f"   Amount: {fixed_dict['amount']}")
        print(f"   Price: {fixed_dict['price']}")
        print(f"   Filled: {fixed_dict['filled_amount']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏ (—Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π float)
        amount_remainder = fixed_order.amount % exchange_info.step_size
        amount_valid = abs(amount_remainder) < 1e-10 or abs(amount_remainder - exchange_info.step_size) < 1e-10
        
        price_remainder = fixed_order.price % exchange_info.tick_size  
        price_valid = abs(price_remainder) < 1e-10 or abs(price_remainder - exchange_info.tick_size) < 1e-10
        
        print(f"\nüéØ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print(f"   Amount —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç step_size: {'‚úÖ' if amount_valid else '‚ùå'}")
        print(f"   Price —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç tick_size: {'‚úÖ' if price_valid else '‚ùå'}")
        
        if amount_valid and price_valid:
            print(f"\nüéâ –†–ï–®–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print(f"   ‚Ä¢ –ù–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print(f"   ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏")
            print(f"   ‚Ä¢ –í –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            return True
        else:
            print(f"\n‚ùå –†–ï–®–ï–ù–ò–ï –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–ù–ê–õ–ò–ó –ò –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ù–ï–û–ö–†–£–ì–õ–ï–ù–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", lambda: test_current_problem()[0]),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ ExchangeInfo", lambda: test_exchange_info_availability()[0]),
        ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è", test_proposed_solution),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                print(f"\n‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
                passed += 1
            else:
                print(f"\n‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"\n‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–¥")
    else:
        print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê")
    
    print("=" * 80)

if __name__ == "__main__":
    main()