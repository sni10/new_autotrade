#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ Order.from_dict() —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ.
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'src')))

def test_order_from_dict_with_precision():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Order.from_dict() —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û Order.from_dict()")
    print("=" * 70)
    
    try:
        from domain.entities.order import Order, ExchangeInfo
        
        # –°–æ–∑–¥–∞–µ–º ExchangeInfo –¥–ª—è ATM/USDT (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
        exchange_info = ExchangeInfo(
            symbol="ATM/USDT",
            min_qty=0.01,
            max_qty=90000.0,
            step_size=0.01,  # –®–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            min_price=0.001,
            max_price=10000.0,
            tick_size=0.001,  # –®–∞–≥ —Ü–µ–Ω—ã
            min_notional=5.0,
            fees={'maker': 0.001, 'taker': 0.001},
            precision={'amount': 0.01, 'price': 0.001, 'cost': None, 'base': 1e-08, 'quote': 1e-08}
        )
        
        # –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ issue
        problematic_data = {
            "id": "848456",
            "order_id": 1754225647058998,
            "symbol": "ATM/USDT",
            "side": "BUY",
            "type": "LIMIT",
            "amount": 15.3499999999999996447286321199499070644378662109375,
            "price": 1.6279999999999998916422327965847216546535491943359375,
            "status": "closed",
            "filled": 15.3499999999999996447286321199499070644378662109375,
            "fees": 0.0
        }
        
        print(f"üì• –ò–°–•–û–î–ù–´–ï –ü–†–û–ë–õ–ï–ú–ù–´–ï –î–ê–ù–ù–´–ï:")
        print(f"   Amount: {problematic_data['amount']}")
        print(f"   Price: {problematic_data['price']}")
        print(f"   Filled: {problematic_data['filled']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ë–ï–ó –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
        order_without_precision = Order.from_dict(problematic_data)
        print(f"\nüì§ –ë–ï–ó –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –¢–û–ß–ù–û–°–¢–ò:")
        print(f"   Amount: {order_without_precision.amount}")
        print(f"   Price: {order_without_precision.price}")
        print(f"   Filled: {order_without_precision.filled_amount}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –° –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ (–Ω–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
        order_with_precision = Order.from_dict(problematic_data, exchange_info)
        print(f"\n‚úÖ –° –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –û –¢–û–ß–ù–û–°–¢–ò:")
        print(f"   Amount: {order_with_precision.amount}")
        print(f"   Price: {order_with_precision.price}")
        print(f"   Filled: {order_with_precision.filled_amount}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        # 15.35 —É–∂–µ –∫—Ä–∞—Ç–Ω–æ 0.01, –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 15.35
        expected_amount = 15.35  # 15.35 –∫—Ä–∞—Ç–Ω–æ step_size=0.01, –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        expected_price = 1.627   # 1.628 –æ–∫—Ä—É–≥–ª–µ–Ω–æ –≤–Ω–∏–∑ –¥–æ 1.627 (—à–∞–≥ 0.001)
        expected_filled = 15.35  # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ amount
        
        print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:")
        print(f"   Amount: {expected_amount}")
        print(f"   Price: {expected_price}")
        print(f"   Filled: {expected_filled}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        amount_correct = abs(order_with_precision.amount - expected_amount) < 1e-10
        price_correct = abs(order_with_precision.price - expected_price) < 1e-10
        filled_correct = abs(order_with_precision.filled_amount - expected_filled) < 1e-10
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
        print(f"   Amount –æ–∫—Ä—É–≥–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {'‚úÖ' if amount_correct else '‚ùå'}")
        print(f"   Price –æ–∫—Ä—É–≥–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {'‚úÖ' if price_correct else '‚ùå'}")
        print(f"   Filled –æ–∫—Ä—É–≥–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {'‚úÖ' if filled_correct else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        order_dict = order_with_precision.to_dict()
        json_data = json.dumps(order_dict)
        restored_data = json.loads(json_data)
        
        print(f"\nüíæ –î–ê–ù–ù–´–ï –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î:")
        print(f"   Amount: {restored_data['amount']}")
        print(f"   Price: {restored_data['price']}")
        print(f"   Filled: {restored_data['filled_amount']}")
        
        all_correct = amount_correct and price_correct and filled_correct
        
        if all_correct:
            print(f"\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print(f"   ‚Ä¢ –ù–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print(f"   ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏")
            print(f"   ‚Ä¢ –í –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            return True
        else:
            print(f"\n‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–†–ï–ë–£–Æ–¢ –î–û–†–ê–ë–û–¢–ö–ò")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_exchange_connector_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å exchange_connector"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° EXCHANGE_CONNECTOR")
    print("=" * 70)
    
    try:
        from infrastructure.connectors.exchange_connector import CcxtExchangeConnector
        from domain.entities.order import ExchangeInfo
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        connector = CcxtExchangeConnector(use_sandbox=True)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ –∫—ç—à–µ
        exchange_info = ExchangeInfo(
            symbol="ATM/USDT",
            min_qty=0.01,
            max_qty=90000.0,
            step_size=0.01,
            min_price=0.001,
            max_price=10000.0,
            tick_size=0.001,
            min_notional=5.0,
            fees={'maker': 0.001, 'taker': 0.001},
            precision={'amount': 0.01, 'price': 0.001, 'cost': None, 'base': 1e-08, 'quote': 1e-08}
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        connector.exchange_info_cache["ATM/USDT"] = exchange_info
        
        print(f"‚úÖ Exchange info –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—ç—à –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞")
        print(f"   Symbol: {exchange_info.symbol}")
        print(f"   Step size: {exchange_info.step_size}")
        print(f"   Tick size: {exchange_info.tick_size}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∏
        # (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –º–µ—Ç–æ–¥–∞—Ö create_order, fetch_order –∏ —Ç.–¥.)
        raw_order_data = {
            "id": "848456",
            "symbol": "ATM/USDT",
            "side": "BUY",
            "type": "LIMIT",
            "amount": 15.3499999999999996447286321199499070644378662109375,
            "price": 1.6279999999999998916422327965847216546535491943359375,
            "status": "closed",
            "filled": 15.3499999999999996447286321199499070644378662109375,
            "fees": 0.0
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ exchange_connector
        normalized_symbol = "ATM/USDT"  # connector._normalize_symbol("ATM/USDT")
        exchange_info_from_cache = connector.exchange_info_cache.get(normalized_symbol)
        
        if exchange_info_from_cache:
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ)
            from domain.entities.order import Order
            order = Order.from_dict(raw_order_data, exchange_info_from_cache)
            
            print(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è:")
            print(f"   Amount: {raw_order_data['amount']} ‚Üí {order.amount}")
            print(f"   Price: {raw_order_data['price']} ‚Üí {order.price}")
            print(f"   Filled: {raw_order_data['filled']} ‚Üí {order.filled_amount}")
            
            return True
        else:
            print(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_backward_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò")
    print("=" * 70)
    
    try:
        from domain.entities.order import Order
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã –±–µ–∑ exchange_info –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        simple_data = {
            "id": "12345",
            "symbol": "BTC/USDT",
            "side": "BUY",
            "type": "LIMIT",
            "amount": 0.001,
            "price": 50000.0,
            "status": "open"
        }
        
        # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –≤—ã–∑–æ–≤–∞ (–±–µ–∑ exchange_info)
        order = Order.from_dict(simple_data)
        
        print(f"‚úÖ –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –≤—ã–∑–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   Order ID: {order.order_id}")
        print(f"   Symbol: {order.symbol}")
        print(f"   Amount: {order.amount}")
        print(f"   Price: {order.price}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (–Ω–µ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –±–µ–∑ exchange_info)
        assert order.amount == 0.001
        assert order.price == 50000.0
        
        print(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–†–û–ë–õ–ï–ú–´ –° –ù–ï–û–ö–†–£–ì–õ–ï–ù–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò")
    print("=" * 80)
    
    tests = [
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Order.from_dict()", test_order_from_dict_with_precision),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Exchange Connector", test_exchange_connector_integration),
        ("–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", test_backward_compatibility),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                print(f"\n‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"\n‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"\n‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ä–µ—à–µ–Ω–∞")
        print("‚úÖ Order.from_dict() —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –±–∏—Ä–∂–µ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("‚úÖ Exchange connector –ø–µ—Ä–µ–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        print("\nüîß –í–ù–ï–î–†–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("   ‚Ä¢ Order.from_dict(): –¥–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä exchange_info")
        print("   ‚Ä¢ Order.from_dict(): –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è amount/price/filled_amount")
        print("   ‚Ä¢ Exchange connector: –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–¥–∞—é—Ç exchange_info")
        print("   ‚Ä¢ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª—è—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ step_size –∏ tick_size –±–∏—Ä–∂–∏")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print("=" * 80)

if __name__ == "__main__":
    main()