#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
–≤ —Ä–∞—Å—á–µ—Ç–∞—Ö amount –∏ price —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã.
"""
import sys
import os
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'src')))

def test_currency_pair_precision():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ CurrencyPair"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ CurrencyPair...")
    
    try:
        from domain.entities.currency_pair import CurrencyPair
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É
        currency_pair = CurrencyPair(
            base_currency="ATM",
            quote_currency="USDT",
            symbol="ATM/USDT"
        )
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
        mock_exchange_info = {
            'precision': {
                'amount': 2,  # 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                'price': 3    # 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Ü–µ–Ω—ã
            },
            'limits': {
                'amount': {'min': 0.01, 'max': 10000.0},
                'price': {'min': 0.001, 'max': 100.0},
                'cost': {'min': 10.0}
            }
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂–∏
        currency_pair.update_exchange_info(mock_exchange_info)
        
        print(f"‚úÖ CurrencyPair —Å–æ–∑–¥–∞–Ω: {currency_pair.symbol}")
        print(f"   Precision: {currency_pair.precision}")
        print(f"   Limits: {currency_pair.limits}")
        
        return True, currency_pair
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CurrencyPair: {e}")
        return False, None

def test_ticker_service_calculations():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ TickerService"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ TickerService...")
    
    try:
        from domain.services.market_data.ticker_service import TickerService
        from infrastructure.repositories.tickers_repository import InMemoryTickerRepository
        from infrastructure.repositories.indicators_repository import InMemoryIndicatorsRepository
        
        success, currency_pair = test_currency_pair_precision()
        if not success:
            return False
        
        # –°–æ–∑–¥–∞–µ–º TickerService
        tickers_repo = InMemoryTickerRepository()
        indicators_repo = InMemoryIndicatorsRepository()
        ticker_service = TickerService(tickers_repo, indicators_repo)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º calculate_strategy
        buy_price = 1.634567890123456  # –ù–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞
        budget = 25.0
        profit_percent = 0.015  # 1.5%
        
        result = ticker_service.calculate_strategy(
            buy_price=buy_price,
            budget=budget,
            currency_pair=currency_pair,
            profit_percent=profit_percent
        )
        
        if isinstance(result, dict) and "comment" in result:
            print(f"‚ö†Ô∏è –†–∞—Å—á–µ—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {result['comment']}")
            return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç –º–∞–ª
        
        buy_price_calc, coins_to_buy, sell_price_calc, coins_to_sell, info = result
        
        print(f"‚úÖ TickerService.calculate_strategy –≤—ã–ø–æ–ª–Ω–µ–Ω:")
        print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {buy_price}")
        print(f"   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {buy_price_calc}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ: {coins_to_buy}")
        print(f"   –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {sell_price_calc}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø—Ä–æ–¥–∞–∂–µ: {coins_to_sell}")
        print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω—ã (Decimal)
        assert isinstance(buy_price_calc, Decimal), f"buy_price_calc –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal, –ø–æ–ª—É—á–µ–Ω {type(buy_price_calc)}"
        assert isinstance(coins_to_buy, Decimal), f"coins_to_buy –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal, –ø–æ–ª—É—á–µ–Ω {type(coins_to_buy)}"
        assert isinstance(sell_price_calc, Decimal), f"sell_price_calc –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal, –ø–æ–ª—É—á–µ–Ω {type(sell_price_calc)}"
        assert isinstance(coins_to_sell, Decimal), f"coins_to_sell –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal, –ø–æ–ª—É—á–µ–Ω {type(coins_to_sell)}"
        
        return True, (buy_price_calc, coins_to_buy, sell_price_calc, coins_to_sell, info)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TickerService: {e}")
        return False, None

def test_order_factory_rounding():
    """–¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ OrderFactory"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è OrderFactory...")
    
    try:
        from domain.factories.order_factory import OrderFactory
        from domain.entities.order import ExchangeInfo
        
        # –°–æ–∑–¥–∞–µ–º OrderFactory —Å exchange info
        exchange_info = ExchangeInfo(
            symbol="ATM/USDT",
            step_size=0.01,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            tick_size=0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã
            min_qty=0.01,
            max_qty=10000.0,
            min_price=0.001,
            max_price=100.0,
            min_notional=10.0,
            fees={'maker': 0.001, 'taker': 0.001},  # –ö–æ–º–∏—Å—Å–∏–∏
            precision={'amount': 2, 'price': 3}  # –¢–æ—á–Ω–æ—Å—Ç—å
        )
        
        order_factory = OrderFactory()
        order_factory.update_exchange_info("ATM/USDT", exchange_info)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∫–∞–∫ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ issue)
        test_amount = 15.300000000000000710542735760100185871124267578125
        test_price = 1.633999999999999896971303314785473048686981201171875
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ –Ω–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        print(f"   Amount: {test_amount}")
        print(f"   Price: {test_price}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        adjusted_amount = order_factory.adjust_amount_precision("ATM/USDT", test_amount)
        adjusted_price = order_factory.adjust_price_precision("ATM/USDT", test_price)
        
        print(f"   –û–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        print(f"   Amount: {adjusted_amount}")
        print(f"   Price: {adjusted_price}")
        
        # –°–æ–∑–¥–∞–µ–º BUY –æ—Ä–¥–µ—Ä
        buy_order = order_factory.create_buy_order(
            symbol="ATM/USDT",
            amount=test_amount,
            price=test_price,
            deal_id=12345
        )
        
        print(f"‚úÖ BUY –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω:")
        print(f"   Order ID: {buy_order.order_id}")
        print(f"   Amount: {buy_order.amount}")
        print(f"   Price: {buy_order.price}")
        print(f"   Metadata: {buy_order.metadata}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω—ã
        assert buy_order.amount == adjusted_amount, f"Amount –Ω–µ –æ–∫—Ä—É–≥–ª–µ–Ω: {buy_order.amount} != {adjusted_amount}"
        assert buy_order.price == adjusted_price, f"Price –Ω–µ –æ–∫—Ä—É–≥–ª–µ–Ω: {buy_order.price} != {adjusted_price}"
        
        # –°–æ–∑–¥–∞–µ–º SELL –æ—Ä–¥–µ—Ä
        sell_order = order_factory.create_sell_order(
            symbol="ATM/USDT",
            amount=test_amount,
            price=test_price + 0.026,  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –≤—ã—à–µ
            deal_id=12345
        )
        
        print(f"‚úÖ SELL –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω:")
        print(f"   Order ID: {sell_order.order_id}")
        print(f"   Amount: {sell_order.amount}")
        print(f"   Price: {sell_order.price}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OrderFactory: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_trading_service_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TradingService —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TradingService...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
        success, calc_result = test_ticker_service_calculations()
        if not success or not calc_result:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç TradingService - –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤")
            return True
        
        buy_price_calc, coins_to_buy, sell_price_calc, coins_to_sell, info = calc_result
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è TradingService:")
        print(f"   BUY: price={buy_price_calc}, amount={coins_to_buy}")
        print(f"   SELL: price={sell_price_calc}, amount={coins_to_sell}")
        print(f"   –¢–∏–ø—ã: BUY price={type(buy_price_calc)}, BUY amount={type(coins_to_buy)}")
        print(f"         SELL price={type(sell_price_calc)}, SELL amount={type(coins_to_sell)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ TradingService –ø–æ–ª—É—á–∏—Ç Decimal –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ float)
        strategy_result = (buy_price_calc, coins_to_buy, sell_price_calc, coins_to_sell, info)
        
        print(f"‚úÖ TradingService –ø–æ–ª—É—á–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ Decimal –∑–Ω–∞—á–µ–Ω–∏—è")
        print(f"   –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üöÄ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –° –ù–ï–û–ö–†–£–ì–õ–ï–ù–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò")
    print("=" * 80)
    
    tests = [
        ("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—á–Ω–æ—Å—Ç–∏ CurrencyPair", lambda: test_currency_pair_precision()[0]),
        ("–†–∞—Å—á–µ—Ç—ã TickerService", lambda: test_ticker_service_calculations()[0]),
        ("–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ OrderFactory", test_order_factory_rounding),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è TradingService", test_trading_service_integration),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–µ–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º")
        print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±—É–¥—É—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –±–∏—Ä–∂–µ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("\nüîß –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("   ‚Ä¢ TradingService: —É–±—Ä–∞–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Decimal –≤ float")
        print("   ‚Ä¢ OrderFactory: –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è")
        print("   ‚Ä¢ –í—Å–µ –º–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ")
        print("   ‚Ä¢ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –¢–ï–°–¢–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print("=" * 80)

if __name__ == "__main__":
    main()