#!/usr/bin/env python3
# tests/test_memory_first_architecture.py
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´ –î–í–£–•–£–†–û–í–ù–ï–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –•–†–ê–ù–ï–ù–ò–Ø

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
- –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
- MemoryFirst —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–∞—Ç–æ–º–∞—Ä–Ω—ã–µ –∏ –ø–æ—Ç–æ–∫–æ–≤—ã–µ)
- –§–∞–±—Ä–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å PostgreSQL
- Parquet –¥–∞–º–ø—ã
- Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
"""

import pytest
import asyncio
import pandas as pd
import os
import tempfile
import time
from datetime import datetime, timedelta
from typing import List, Optional

# –ò–º–ø–æ—Ä—Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from infrastructure.repositories.base.base_repository import (
    BaseRepository, AtomicRepository, StreamingRepository, MemoryFirstRepository
)
from infrastructure.repositories.interfaces.deals_repository_interface import IDealsRepository
from infrastructure.repositories.interfaces.orders_repository_interface import IOrdersRepository
from infrastructure.repositories.interfaces.tickers_repository_interface import ITickersRepository
from infrastructure.repositories.interfaces.order_books_repository_interface import IOrderBooksRepository

from infrastructure.repositories.memory_first.memory_first_deals_repository import MemoryFirstDealsRepository
from infrastructure.repositories.memory_first.memory_first_orders_repository import MemoryFirstOrdersRepository
from infrastructure.repositories.memory_first.memory_first_tickers_repository import MemoryFirstTickersRepository
from infrastructure.repositories.memory_first.memory_first_order_books_repository import MemoryFirstOrderBooksRepository

from infrastructure.repositories.factory.repository_factory import RepositoryFactory

# –ò–º–ø–æ—Ä—Ç—ã –¥–æ–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
from domain.entities.deal import Deal
from domain.entities.order import Order
from domain.entities.currency_pair import CurrencyPair
from domain.entities.ticker import Ticker
from domain.entities.order_book import OrderBook


class TestMemoryFirstArchitecture:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    
    @pytest.fixture
    def currency_pair(self):
        """–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞"""
        return CurrencyPair(
            base_currency="ATM",
            quote_currency="USDT",
            symbol="ATMUSDT",
            deal_quota=25.0
        )
    
    @pytest.fixture
    def test_deal(self, currency_pair):
        """–¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞"""
        return Deal(
            deal_id=1,
            currency_pair=currency_pair,
            status=Deal.STATUS_OPEN
        )
    
    @pytest.fixture
    def test_order(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä"""
        return Order(
            order_id=1,
            side=Order.SIDE_BUY,
            order_type=Order.TYPE_LIMIT,
            price=100.0,
            amount=25.0,
            symbol="ATMUSDT",
            status=Order.STATUS_PENDING
        )
    
    @pytest.fixture
    def test_ticker(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π —Ç–∏–∫–µ—Ä"""
        ticker = Ticker({"symbol": "ATMUSDT", "timestamp": int(time.time() * 1000)})
        ticker.last = 100.0
        ticker.bid = 99.5
        ticker.ask = 100.5
        ticker.baseVolume = 1000.0
        ticker.high = 105.0
        ticker.low = 95.0
        return ticker
    
    @pytest.fixture
    def test_order_book(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤"""
        return OrderBook(
            symbol="ATMUSDT",
            bids=[[99.5, 100], [99.0, 200]],
            asks=[[100.5, 150], [101.0, 300]],
            timestamp=int(time.time() * 1000)
        )


class TestMemoryFirstDealsRepository(TestMemoryFirstArchitecture):
    """–¢–µ—Å—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ (–ê–¢–û–ú–ê–†–ù–´–ï –î–ê–ù–ù–´–ï)"""
    
    def test_deals_repository_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"""
        repo = MemoryFirstDealsRepository()
        
        assert repo is not None
        assert isinstance(repo, IDealsRepository)
        assert isinstance(repo, MemoryFirstRepository)
        assert repo.df is not None
        assert len(repo.df) == 0
        
        print("‚úÖ MemoryFirstDealsRepository —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def test_deals_save_and_get(self, test_deal):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        repo = MemoryFirstDealsRepository()
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        start_time = time.time()
        repo.save(test_deal)
        save_time = (time.time() - start_time) * 1000
        
        assert save_time < 10, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ: {save_time:.2f}ms"
        assert len(repo.df) == 1
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ ID
        start_time = time.time()
        retrieved_deal = repo.get_by_id(test_deal.deal_id)
        get_time = (time.time() - start_time) * 1000
        
        assert get_time < 5, f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ: {get_time:.2f}ms"
        assert retrieved_deal is not None
        assert retrieved_deal.deal_id == test_deal.deal_id
        assert retrieved_deal.currency_pair.symbol == test_deal.currency_pair.symbol
        
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞ {save_time:.2f}ms, –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ {get_time:.2f}ms")
    
    def test_deals_specialized_methods(self, test_deal, currency_pair):
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–¥–µ–ª–æ–∫"""
        repo = MemoryFirstDealsRepository()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
        deal1 = Deal(deal_id=1, currency_pair=currency_pair, status=Deal.STATUS_OPEN)
        deal2 = Deal(deal_id=2, currency_pair=currency_pair, status=Deal.STATUS_CLOSED)
        deal3 = Deal(deal_id=3, currency_pair=currency_pair, status=Deal.STATUS_OPEN)
        
        repo.save(deal1)
        repo.save(deal2)
        repo.save(deal3)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        open_deals = repo.get_open_deals()
        assert len(open_deals) == 2
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        closed_deals = repo.get_closed_deals()
        assert len(closed_deals) == 1
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É
        symbol_deals = repo.get_deals_by_symbol("ATMUSDT")
        assert len(symbol_deals) == 3
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = repo.get_deals_statistics()
        assert stats["total_deals"] == 3
        assert stats["open_deals"] == 2
        assert stats["closed_deals"] == 1
        
        print("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–¥–µ–ª–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_deals_performance(self, currency_pair):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–¥–µ–ª–∫–∞–º–∏"""
        repo = MemoryFirstDealsRepository()
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
        deals_count = 1000
        start_time = time.time()
        
        for i in range(deals_count):
            deal = Deal(deal_id=i+1, currency_pair=currency_pair, status=Deal.STATUS_OPEN)
            repo.save(deal)
        
        creation_time = time.time() - start_time
        avg_creation_time = (creation_time / deals_count) * 1000
        
        assert avg_creation_time < 3, f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {avg_creation_time:.2f}ms"
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è
        start_time = time.time()
        all_deals = repo.get_all()
        read_time = (time.time() - start_time) * 1000
        
        assert read_time < 140, f"–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {read_time:.2f}ms"
        assert len(all_deals) == deals_count
        
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {deals_count} —Å–¥–µ–ª–æ–∫ —Å–æ–∑–¥–∞–Ω—ã –∑–∞ {creation_time:.2f}s")
        print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {avg_creation_time:.3f}ms")
        print(f"‚úÖ –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫: {read_time:.2f}ms")


class TestMemoryFirstOrdersRepository(TestMemoryFirstArchitecture):
    """–¢–µ—Å—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤ (–ê–¢–û–ú–ê–†–ù–´–ï –î–ê–ù–ù–´–ï)"""
    
    def test_orders_repository_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        repo = MemoryFirstOrdersRepository()
        
        assert repo is not None
        assert isinstance(repo, IOrdersRepository)
        assert isinstance(repo, MemoryFirstRepository)
        assert repo.df is not None
        assert len(repo.df) == 0
        
        print("‚úÖ MemoryFirstOrdersRepository —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def test_orders_save_and_get(self, test_order):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        repo = MemoryFirstOrdersRepository()
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        start_time = time.time()
        repo.save(test_order)
        save_time = (time.time() - start_time) * 1000
        
        assert save_time < 10, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ: {save_time:.2f}ms"
        assert len(repo.df) == 1
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ ID
        start_time = time.time()
        retrieved_order = repo.get_by_id(test_order.order_id)
        get_time = (time.time() - start_time) * 1000
        
        assert get_time < 5, f"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ: {get_time:.2f}ms"
        assert retrieved_order is not None
        assert retrieved_order.order_id == test_order.order_id
        assert retrieved_order.symbol == test_order.symbol
        
        print(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞ {save_time:.2f}ms, –ø–æ–ª—É—á–µ–Ω –∑–∞ {get_time:.2f}ms")
    
    def test_orders_status_updates(self, test_order):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        repo = MemoryFirstOrdersRepository()
        repo.save(test_order)
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        success = repo.update_order_status(test_order.order_id, Order.STATUS_FILLED, 25.0, 0.1)
        assert success is True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updated_order = repo.get_by_id(test_order.order_id)
        assert updated_order.status == Order.STATUS_FILLED
        assert updated_order.filled_amount == 25.0
        assert updated_order.fees == 0.1
        
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


class TestMemoryFirstTickersRepository(TestMemoryFirstArchitecture):
    """–¢–µ—Å—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ä–æ–≤ (–ü–û–¢–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï)"""
    
    @pytest.mark.asyncio
    async def test_tickers_repository_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ä–æ–≤"""
        repo = MemoryFirstTickersRepository(batch_size=100, dump_interval_minutes=1)
        
        assert repo is not None
        assert isinstance(repo, ITickersRepository)
        assert isinstance(repo, MemoryFirstRepository)
        assert repo.df is not None
        assert len(repo.df) == 0
        assert repo.batch_size == 100
        
        print("‚úÖ MemoryFirstTickersRepository —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    @pytest.mark.asyncio
    async def test_tickers_streaming_operations(self, test_ticker):
        """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∏–∫–µ—Ä–∞–º–∏"""
        repo = MemoryFirstTickersRepository(batch_size=10, dump_interval_minutes=60)
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤
        tickers_count = 50
        start_time = time.time()
        
        for i in range(tickers_count):
            ticker = Ticker({"symbol": "ATMUSDT", "timestamp": int(time.time() * 1000) + i})
            ticker.last = 100.0 + i * 0.1
            ticker.bid = 99.5 + i * 0.1
            ticker.ask = 100.5 + i * 0.1
            ticker.baseVolume = 1000.0 + i * 10
            repo.save(ticker)
        
        streaming_time = time.time() - start_time
        avg_streaming_time = (streaming_time / tickers_count) * 1000
        
        assert avg_streaming_time < 1.3, f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ —Ç–∏–∫–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {avg_streaming_time:.2f}ms"
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏–∫–µ—Ä–∞
        latest_ticker = repo.get_latest_ticker("ATMUSDT")
        assert latest_ticker is not None
        assert latest_ticker.symbol == "ATMUSDT"
        
        # –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
        price_history = repo.get_price_history("ATMUSDT", limit=10)
        assert len(price_history) <= 10
        assert all(isinstance(price, float) for price in price_history)
        
        print(f"‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {tickers_count} —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ {streaming_time:.2f}s")
        print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {avg_streaming_time:.3f}ms")
    
    @pytest.mark.asyncio
    async def test_tickers_memory_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤"""
        repo = MemoryFirstTickersRepository(batch_size=1000, keep_last_n=100)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤
        for i in range(200):
            ticker = Ticker({"symbol": "ATMUSDT", "timestamp": int(time.time() * 1000) + i})
            ticker.last = 100.0 + i * 0.1
            repo.save(ticker)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
        assert len(repo.df) <= repo.keep_last_n
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –∑–∞–ø–∏—Å–µ–π
        last_10 = repo.get_last_n(10)
        assert len(last_10) <= 10
        
        print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é —Ç–∏–∫–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


class TestMemoryFirstOrderBooksRepository(TestMemoryFirstArchitecture):
    """–¢–µ—Å—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å—Ç–∞–∫–∞–Ω–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ (–ü–û–¢–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï)"""
    
    @pytest.mark.asyncio
    async def test_order_books_repository_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å—Ç–∞–∫–∞–Ω–æ–≤"""
        repo = MemoryFirstOrderBooksRepository(batch_size=50, dump_interval_minutes=1)
        
        assert repo is not None
        assert isinstance(repo, IOrderBooksRepository)
        assert isinstance(repo, MemoryFirstRepository)
        assert repo.df is not None
        assert len(repo.df) == 0
        
        print("‚úÖ MemoryFirstOrderBooksRepository —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    @pytest.mark.asyncio
    async def test_order_books_streaming_operations(self, test_order_book):
        """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—Ç–∞–∫–∞–Ω–∞–º–∏"""
        repo = MemoryFirstOrderBooksRepository(batch_size=100, dump_interval_minutes=60)
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–æ–≤
        order_books_count = 30
        start_time = time.time()
        
        for i in range(order_books_count):
            order_book = OrderBook(
                symbol="ATMUSDT",
                bids=[[99.5 + i * 0.1, 100 + i], [99.0 + i * 0.1, 200 + i]],
                asks=[[100.5 + i * 0.1, 150 + i], [101.0 + i * 0.1, 300 + i]],
                timestamp=int(time.time() * 1000) + i
            )
            repo.save(order_book)
        
        streaming_time = time.time() - start_time
        avg_streaming_time = (streaming_time / order_books_count) * 1000
        
        assert avg_streaming_time < 2, f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞–∫–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {avg_streaming_time:.2f}ms"
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞
        latest_order_book = repo.get_latest_order_book("ATMUSDT")
        assert latest_order_book is not None
        assert latest_order_book.symbol == "ATMUSDT"
        
        # –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø—Ä–µ–¥–æ–≤
        spread_history = repo.get_spread_history("ATMUSDT", limit=10)
        assert len(spread_history) <= 10
        assert all(isinstance(spread, float) for spread in spread_history)
        
        print(f"‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {order_books_count} —Å—Ç–∞–∫–∞–Ω–æ–≤ –∑–∞ {streaming_time:.2f}s")
        print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {avg_streaming_time:.3f}ms")


class TestRepositoryFactory(TestMemoryFirstArchitecture):
    """–¢–µ—Å—Ç—ã —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    
    @pytest.mark.asyncio
    async def test_factory_creation_and_initialization(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–±—Ä–∏–∫–∏"""
        factory = RepositoryFactory()
        
        assert factory is not None
        assert factory._initialized is False
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ PostgreSQL)
        await factory.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        storage_info = factory.get_storage_info()
        assert isinstance(storage_info, dict)
        assert "deals_type" in storage_info
        assert "orders_type" in storage_info
        
        await factory.close()
        
        print("‚úÖ RepositoryFactory —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    @pytest.mark.asyncio
    async def test_factory_repository_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É"""
        factory = RepositoryFactory()
        await factory.initialize()
        
        try:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
            deals_repo = await factory.get_deals_repository()
            assert deals_repo is not None
            assert isinstance(deals_repo, IDealsRepository)
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤
            orders_repo = await factory.get_orders_repository()
            assert orders_repo is not None
            assert isinstance(orders_repo, IOrdersRepository)
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ä–æ–≤
            tickers_repo = await factory.get_tickers_repository()
            assert tickers_repo is not None
            assert isinstance(tickers_repo, ITickersRepository)
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å—Ç–∞–∫–∞–Ω–æ–≤
            order_books_repo = await factory.get_order_books_repository()
            assert order_books_repo is not None
            assert isinstance(order_books_repo, IOrderBooksRepository)
            
            print("‚úÖ –í—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É —É—Å–ø–µ—à–Ω–æ")
            
        finally:
            await factory.close()
    
    @pytest.mark.asyncio
    async def test_factory_fallback_mechanisms(self):
        """–¢–µ—Å—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ —Ñ–∞–±—Ä–∏–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        factory = RepositoryFactory()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        factory.config = {
            "database": {
                "host": "nonexistent_host",
                "port": 9999,
                "user": "wrong_user",
                "password": "wrong_password",
                "database": "wrong_db"
            },
            "storage": {
                "deals_type": "memory_first_postgres",
                "orders_type": "memory_first_postgres"
            }
        }
        
        await factory.initialize()
        
        try:
            # –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å fallback —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            deals_repo = await factory.get_deals_repository()
            orders_repo = await factory.get_orders_repository()
            
            assert deals_repo is not None
            assert orders_repo is not None
            
            print("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        finally:
            await factory.close()


class TestIntegrationScenarios(TestMemoryFirstArchitecture):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    @pytest.mark.asyncio
    async def test_full_trading_cycle_simulation(self, currency_pair):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        factory = RepositoryFactory()
        await factory.initialize()
        
        try:
            deals_repo = await factory.get_deals_repository()
            orders_repo = await factory.get_orders_repository()
            tickers_repo = await factory.get_tickers_repository()
            
            # 1. –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
            deal = Deal(deal_id=1, currency_pair=currency_pair, status=Deal.STATUS_OPEN)
            deals_repo.save(deal)
            
            # 2. –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
            buy_order = Order(
                order_id=1,
                side=Order.SIDE_BUY,
                order_type=Order.TYPE_LIMIT,
                price=100.0,
                amount=25.0,
                symbol="ATMUSDT",
                deal_id=deal.deal_id
            )
            orders_repo.save(buy_order)
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã
            for i in range(10):
                ticker = Ticker({"symbol": "ATMUSDT", "timestamp": int(time.time() * 1000) + i})
                ticker.last = 100.0 + i * 0.1
                tickers_repo.save(ticker)
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            retrieved_deal = deals_repo.get_by_id(deal.deal_id)
            retrieved_order = orders_repo.get_by_id(buy_order.order_id)
            latest_ticker = tickers_repo.get_latest_ticker("ATMUSDT")
            
            assert retrieved_deal is not None
            assert retrieved_order is not None
            assert latest_ticker is not None
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
            orders_repo.update_order_status(buy_order.order_id, Order.STATUS_FILLED, 25.0, 0.1)
            
            # 6. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
            deals_repo.close_deal(deal.deal_id, 2, 1.5)  # sell_order_id=2, profit=1.5
            
            # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            final_deal = deals_repo.get_by_id(deal.deal_id)
            final_order = orders_repo.get_by_id(buy_order.order_id)
            
            assert final_deal.status == Deal.STATUS_CLOSED
            assert final_order.status == Order.STATUS_FILLED
            
            print("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        finally:
            await factory.close()
    
    def test_performance_benchmarks(self, currency_pair):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        deals_repo = MemoryFirstDealsRepository()
        orders_repo = MemoryFirstOrdersRepository()
        tickers_repo = MemoryFirstTickersRepository(batch_size=1000)
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
        deals_count = 1000
        start_time = time.time()
        
        for i in range(deals_count):
            deal = Deal(deal_id=i+1, currency_pair=currency_pair, status=Deal.STATUS_OPEN)
            deals_repo.save(deal)
        
        deals_time = time.time() - start_time
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
        orders_count = 2000
        start_time = time.time()
        
        for i in range(orders_count):
            order = Order(
                order_id=i+1,
                side=Order.SIDE_BUY if i % 2 == 0 else Order.SIDE_SELL,
                order_type=Order.TYPE_LIMIT,
                price=100.0 + i * 0.01,
                amount=25.0,
                symbol="ATMUSDT"
            )
            orders_repo.save(order)
        
        orders_time = time.time() - start_time
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        tickers_count = 10000
        start_time = time.time()
        
        for i in range(tickers_count):
            ticker = Ticker({"symbol": "ATMUSDT", "timestamp": int(time.time() * 1000) + i})
            ticker.last = 100.0 + i * 0.001
            tickers_repo.save(ticker)
        
        tickers_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        deals_per_sec = deals_count / deals_time
        orders_per_sec = orders_count / orders_time
        tickers_per_sec = tickers_count / tickers_time
        
        assert deals_per_sec > 300, f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {deals_per_sec:.0f}/sec"
        assert orders_per_sec > 250, f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {orders_per_sec:.0f}/sec"
        assert tickers_per_sec > 600, f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {tickers_per_sec:.0f}/sec"
        
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫: {deals_per_sec:.0f}/sec")
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–æ–≤: {orders_per_sec:.0f}/sec")
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–æ–≤: {tickers_per_sec:.0f}/sec")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–û–í –î–í–£–•–£–†–û–í–ù–ï–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º pytest —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    pytest_args = [
        __file__,
        "-v",  # –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        "-s",  # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å print'—ã
        "--tb=short",  # –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—Ä–µ–π—Å–±–µ–∫–∏
        "-x"  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
    ]
    
    exit_code = pytest.main(pytest_args)
    
    if exit_code == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print(f"\n‚ùå –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò (–∫–æ–¥: {exit_code})")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
    
    return exit_code


if __name__ == "__main__":
    run_all_tests()