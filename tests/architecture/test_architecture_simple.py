#!/usr/bin/env python3
# tests/test_architecture_simple.py
"""
üß™ –£–ü–†–û–©–ï–ù–ù–´–ï –¢–ï–°–¢–´ –î–í–£–•–£–†–û–í–ù–ï–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –•–†–ê–ù–ï–ù–ò–Ø

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤:
- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
- –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å DataFrame
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –§–∞–±—Ä–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
"""

import sys
import os
import time
import pandas as pd
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

def test_basic_dataframe_operations():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å DataFrame"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å DataFrame...")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∫–∞–∫ –≤ MemoryFirst —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
    df = pd.DataFrame(columns=[
        'deal_id', 'currency_pair', 'status', 'created_at', 'profit'
    ])
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    start_time = time.time()
    data_rows = []
    for i in range(1000):
        data_rows.append({
            'deal_id': i + 1,
            'currency_pair': 'ATMUSDT',
            'status': 'OPEN',
            'created_at': datetime.now(),
            'profit': 0.0
        })
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å—Ä–∞–∑—É, –∏–∑–±–µ–≥–∞—è concatenation warnings
    df = pd.DataFrame(data_rows)
    
    creation_time = time.time() - start_time
    avg_time = (creation_time / 1000) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ 1000 –∑–∞–ø–∏—Å–µ–π –∑–∞ {creation_time:.2f}s")
    print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {avg_time:.3f}ms")
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    start_time = time.time()
    open_deals = df[df['status'] == 'OPEN']
    read_time = (time.time() - start_time) * 1000
    
    print(f"‚úÖ –ß—Ç–µ–Ω–∏–µ {len(open_deals)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {read_time:.2f}ms")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    assert avg_time < 5, f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ: {avg_time:.2f}ms"
    assert read_time < 50, f"–ß—Ç–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ: {read_time:.2f}ms"
    
    return True

def test_memory_first_repository_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã MemoryFirst —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É MemoryFirst —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    try:
        from infrastructure.repositories.base.base_repository import MemoryFirstRepository
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        class TestRepository(MemoryFirstRepository):
            def _entity_to_dict(self, entity):
                return {'id': entity, 'data': f'test_{entity}'}
            
            def _dict_to_entity(self, data):
                return data['id']
            
            def _get_dataframe_columns(self):
                return ['id', 'data']
            
            def _get_id_column(self):
                return 'id'
        
        repo = TestRepository()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert repo.df is not None
        assert len(repo.df) == 0
        assert repo._next_id == 1
        
        print("‚úÖ MemoryFirstRepository —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MemoryFirstRepository: {e}")
        return False

def test_repository_factory_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
    
    try:
        from infrastructure.repositories.factory.repository_factory import RepositoryFactory
        
        factory = RepositoryFactory()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert factory is not None
        assert hasattr(factory, 'config')
        assert hasattr(factory, '_initialized')
        assert factory._initialized is False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        assert hasattr(factory, 'initialize')
        assert hasattr(factory, 'get_storage_info')
        assert hasattr(factory, 'close')
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        storage_info = factory.get_storage_info()
        assert isinstance(storage_info, dict)
        
        print("‚úÖ RepositoryFactory —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {storage_info}")
        return True
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å RepositoryFactory: {e}")
        return False

def test_config_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config.config_loader import load_config
        
        config = load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–π
        assert 'database' in config
        assert 'storage' in config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î
        db_config = config['database']
        assert db_config['host'] == 'localhost'
        assert db_config['port'] == 5434
        assert db_config['user'] == 'airflow'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_config = config['storage']
        assert storage_config['deals_type'] == 'memory_first_postgres'
        assert storage_config['orders_type'] == 'memory_first_postgres'
        assert storage_config['tickers_type'] == 'memory_first_parquet'
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìä –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–¥–µ–ª–æ–∫: {storage_config['deals_type']}")
        print(f"üìä –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—Ä–¥–µ—Ä–æ–≤: {storage_config['orders_type']}")
        return True
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config_loader: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_interfaces_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤...")
    
    interfaces_tested = 0
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–¥–µ–ª–æ–∫
    try:
        from infrastructure.repositories.interfaces.deals_repository_interface import IDealsRepository
        from infrastructure.repositories.base.base_repository import AtomicRepository
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        assert issubclass(IDealsRepository, AtomicRepository)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
        methods = [method for method in dir(IDealsRepository) if not method.startswith('_')]
        expected_methods = ['get_open_deals', 'get_closed_deals', 'get_deals_by_symbol']
        
        for method in expected_methods:
            assert method in methods, f"–ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ IDealsRepository"
        
        print("‚úÖ IDealsRepository —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        interfaces_tested += 1
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å IDealsRepository: {e}")
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤
    try:
        from infrastructure.repositories.interfaces.orders_repository_interface import IOrdersRepository
        
        methods = [method for method in dir(IOrdersRepository) if not method.startswith('_')]
        expected_methods = ['get_by_exchange_id', 'get_open_orders', 'get_orders_by_symbol']
        
        for method in expected_methods:
            assert method in methods, f"–ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ IOrdersRepository"
        
        print("‚úÖ IOrdersRepository —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        interfaces_tested += 1
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å IOrdersRepository: {e}")
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–∏–∫–µ—Ä–æ–≤
    try:
        from infrastructure.repositories.interfaces.tickers_repository_interface import ITickersRepository
        from infrastructure.repositories.base.base_repository import StreamingRepository
        
        assert issubclass(ITickersRepository, StreamingRepository)
        
        methods = [method for method in dir(ITickersRepository) if not method.startswith('_')]
        expected_methods = ['get_latest_ticker', 'get_price_history', 'get_tickers_by_symbol']
        
        for method in expected_methods:
            assert method in methods, f"–ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ITickersRepository"
        
        print("‚úÖ ITickersRepository —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        interfaces_tested += 1
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ITickersRepository: {e}")
    
    return interfaces_tested > 0

def test_memory_first_implementations():
    """–¢–µ—Å—Ç MemoryFirst —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º MemoryFirst —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    implementations_tested = 0
    
    # –¢–µ—Å—Ç MemoryFirstDealsRepository
    try:
        from infrastructure.repositories.memory_first.memory_first_deals_repository import MemoryFirstDealsRepository
        
        repo = MemoryFirstDealsRepository()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert repo.df is not None
        assert len(repo.df) == 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É DataFrame
        expected_columns = ['deal_id', 'currency_pair', 'status', 'created_at']
        for col in expected_columns:
            assert col in repo.df.columns, f"–ö–æ–ª–æ–Ω–∫–∞ {col} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DataFrame"
        
        print("‚úÖ MemoryFirstDealsRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        implementations_tested += 1
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MemoryFirstDealsRepository: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MemoryFirstDealsRepository: {e}")
    
    # –¢–µ—Å—Ç MemoryFirstTickersRepository
    try:
        from infrastructure.repositories.memory_first.memory_first_tickers_repository import MemoryFirstTickersRepository
        
        repo = MemoryFirstTickersRepository(batch_size=100, dump_interval_minutes=60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert repo.df is not None
        assert len(repo.df) == 0
        assert repo.batch_size == 100
        assert repo.dump_interval_minutes == 60
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É DataFrame
        expected_columns = ['symbol', 'timestamp', 'last_price']
        for col in expected_columns:
            assert col in repo.df.columns, f"–ö–æ–ª–æ–Ω–∫–∞ {col} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DataFrame"
        
        print("‚úÖ MemoryFirstTickersRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        implementations_tested += 1
        
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MemoryFirstTickersRepository: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MemoryFirstTickersRepository: {e}")
    
    return implementations_tested > 0

def test_performance_benchmarks():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã...")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DataFrame –æ–ø–µ—Ä–∞—Ü–∏–π
    df = pd.DataFrame(columns=['id', 'symbol', 'price', 'timestamp'])
    
    # –ë–µ–Ω—á–º–∞—Ä–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    records_count = 10000
    start_time = time.time()
    
    data_rows = []
    for i in range(records_count):
        data_rows.append({
            'id': i + 1,
            'symbol': 'ATMUSDT',
            'price': 100.0 + i * 0.001,
            'timestamp': int(time.time() * 1000) + i
        })
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å—Ä–∞–∑—É, –∏–∑–±–µ–≥–∞—è concatenation warnings
    df = pd.DataFrame(data_rows)
    
    creation_time = time.time() - start_time
    records_per_sec = records_count / creation_time
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {records_count} –∑–∞–ø–∏—Å–µ–π –∑–∞ {creation_time:.2f}s")
    print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {records_per_sec:.0f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫")
    
    # –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ–∏—Å–∫–∞
    start_time = time.time()
    filtered_df = df[df['symbol'] == 'ATMUSDT']
    search_time = (time.time() - start_time) * 1000
    
    print(f"‚úÖ –ü–æ–∏—Å–∫ –≤ {len(df)} –∑–∞–ø–∏—Å—è—Ö –∑–∞ {search_time:.2f}ms")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    assert records_per_sec > 1000, f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {records_per_sec:.0f}/sec"
    assert search_time < 100, f"–ü–æ–∏—Å–∫ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {search_time:.2f}ms"
    
    return True

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–ê–ü–£–°–ö –£–ü–†–û–©–ï–ù–ù–´–• –¢–ï–°–¢–û–í –î–í–£–•–£–†–û–í–ù–ï–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)
    
    tests = [
        ("–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ DataFrame", test_basic_dataframe_operations),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ MemoryFirst —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", test_memory_first_repository_structure),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤", test_repository_factory_structure),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_config_loading),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤", test_interfaces_structure),
        ("MemoryFirst —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏", test_memory_first_implementations),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã", test_performance_benchmarks)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            result = test_func()
            if result:
                passed_tests += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ö†Ô∏è {test_name} - –ß–ê–°–¢–ò–ß–ù–û –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif passed_tests >= total_tests * 0.7:
        print("\n‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û!")
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã—à–µ")
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
    
    return passed_tests, total_tests

if __name__ == "__main__":
    run_all_tests()