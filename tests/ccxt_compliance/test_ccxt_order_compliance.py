# tests/ccxt_compliance/test_ccxt_order_compliance.py
import pytest
import asyncio
from datetime import datetime, timezone
from unittest.mock import AsyncMock, MagicMock

from src.domain.entities.order import Order


class TestCCXTOrderCompliance:
    """
    üöÄ CCXT Order Compliance Tests
    
    –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Order Entity —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É CCXT Unified API.
    –í—Å–µ –ø–æ–ª—è, –º–µ—Ç–æ–¥—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å CCXT —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """

    @pytest.fixture
    def ccxt_standard_order(self):
        """–û–±—Ä–∞–∑–µ—Ü –æ—Ä–¥–µ—Ä–∞ —Å—Ç—Ä–æ–≥–æ –ø–æ CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        return {
            'id': '12345',
            'clientOrderId': 'myorder123',
            'datetime': '2024-01-15T10:30:00.000Z',
            'timestamp': 1705315800000,
            'lastTradeTimestamp': 1705315850000,
            'status': 'open',
            'symbol': 'BTC/USDT',
            'type': 'limit',
            'timeInForce': 'GTC',
            'side': 'buy',
            'price': 50000.0,
            'amount': 0.001,
            'filled': 0.0005,
            'remaining': 0.0005,
            'cost': 25.0,
            'average': 50000.0,
            'trades': [
                {
                    'id': 'trade1',
                    'timestamp': 1705315850000,
                    'datetime': '2024-01-15T10:30:50.000Z',
                    'symbol': 'BTC/USDT',
                    'side': 'buy',
                    'amount': 0.0005,
                    'price': 50000.0,
                    'cost': 25.0,
                    'fee': {'cost': 0.025, 'currency': 'USDT'}
                }
            ],
            'fee': {
                'cost': 0.025,
                'currency': 'USDT',
                'rate': 0.001
            },
            'info': {
                'orderId': '12345',
                'clientOrderId': 'myorder123',
                'status': 'PARTIALLY_FILLED'
            }
        }

    def test_ccxt_order_creation_from_standard_response(self, ccxt_standard_order):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Order –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ CCXT –æ—Ç–≤–µ—Ç–∞"""
        order = Order.from_ccxt_response(ccxt_standard_order)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ CCXT –ø–æ–ª—è
        assert order.id == '12345'
        assert order.clientOrderId == 'myorder123'
        assert order.datetime == '2024-01-15T10:30:00.000Z'
        assert order.timestamp == 1705315800000
        assert order.lastTradeTimestamp == 1705315850000
        assert order.status == 'open'
        assert order.symbol == 'BTC/USDT'
        assert order.type == 'limit'
        assert order.timeInForce == 'GTC'
        assert order.side == 'buy'
        assert order.price == 50000.0
        assert order.amount == 0.001
        assert order.filled == 0.0005
        assert order.remaining == 0.0005
        assert order.cost == 25.0
        assert order.average == 50000.0
        assert len(order.trades) == 1
        assert order.fee['cost'] == 0.025
        assert order.fee['currency'] == 'USDT'
        assert order.info['orderId'] == '12345'

    def test_ccxt_order_to_dict_compliance(self, ccxt_standard_order):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è to_ccxt_dict() CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        order = Order.from_ccxt_response(ccxt_standard_order)
        ccxt_dict = order.to_ccxt_dict()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö CCXT –ø–æ–ª–µ–π
        required_fields = [
            'id', 'clientOrderId', 'datetime', 'timestamp', 'lastTradeTimestamp',
            'status', 'symbol', 'type', 'timeInForce', 'side', 'price', 'amount',
            'filled', 'remaining', 'cost', 'average', 'trades', 'fee', 'info'
        ]
        
        for field in required_fields:
            assert field in ccxt_dict, f"Missing required CCXT field: {field}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        assert ccxt_dict['id'] == ccxt_standard_order['id']
        assert ccxt_dict['symbol'] == ccxt_standard_order['symbol']
        assert ccxt_dict['status'] == ccxt_standard_order['status']
        assert ccxt_dict['type'] == ccxt_standard_order['type']
        assert ccxt_dict['side'] == ccxt_standard_order['side']

    def test_ccxt_status_values_compliance(self):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        # CCXT —Å—Ç–∞—Ç—É—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏
        assert Order.STATUS_OPEN == 'open'
        assert Order.STATUS_CLOSED == 'closed'
        assert Order.STATUS_CANCELED == 'canceled'
        assert Order.STATUS_EXPIRED == 'expired'
        assert Order.STATUS_REJECTED == 'rejected'
        assert Order.STATUS_PENDING == 'pending'

    def test_ccxt_side_values_compliance(self):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–æ—Ä–æ–Ω –æ—Ä–¥–µ—Ä–∞ CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        assert Order.SIDE_BUY == 'buy'
        assert Order.SIDE_SELL == 'sell'

    def test_ccxt_type_values_compliance(self):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ –æ—Ä–¥–µ—Ä–∞ CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        assert Order.TYPE_LIMIT == 'limit'
        assert Order.TYPE_MARKET == 'market'
        assert Order.TYPE_STOP == 'stop'
        assert Order.TYPE_STOP_LIMIT == 'stop_limit'

    def test_ccxt_time_in_force_compliance(self):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Time in Force CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        assert Order.TIF_GTC == 'GTC'
        assert Order.TIF_IOC == 'IOC'
        assert Order.TIF_FOK == 'FOK'
        assert Order.TIF_PO == 'PO'

    def test_ccxt_validation_compliance(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π CCXT –æ—Ä–¥–µ—Ä
        order = Order(
            id='12345',
            symbol='BTC/USDT',
            type=Order.TYPE_LIMIT,
            side=Order.SIDE_BUY,
            amount=0.001,
            price=50000.0,
            status=Order.STATUS_OPEN
        )
        
        is_valid, errors = order.validate_ccxt_compliance()
        assert is_valid is True
        assert len(errors) == 0

    def test_ccxt_validation_missing_fields(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        order = Order(
            amount=0.001  # –¢–æ–ª—å–∫–æ amount, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        )
        
        is_valid, errors = order.validate_ccxt_compliance()
        assert is_valid is False
        assert len(errors) > 0
        assert any('symbol' in error for error in errors)
        assert any('side' in error for error in errors)
        assert any('type' in error for error in errors)

    def test_ccxt_update_from_response(self, ccxt_standard_order):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Order –∏–∑ CCXT –æ—Ç–≤–µ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ä–¥–µ—Ä
        order = Order(
            id='12345',
            symbol='BTC/USDT',
            type=Order.TYPE_LIMIT,
            side=Order.SIDE_BUY,
            amount=0.001,
            price=50000.0
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ CCXT –æ—Ç–≤–µ—Ç–∞
        order.update_from_ccxt_response(ccxt_standard_order)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        assert order.filled == 0.0005
        assert order.remaining == 0.0005
        assert order.cost == 25.0
        assert order.lastTradeTimestamp == 1705315850000
        assert len(order.trades) == 1

    def test_ccxt_fee_structure_compliance(self, ccxt_standard_order):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã fee CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        order = Order.from_ccxt_response(ccxt_standard_order)
        
        # Fee –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        assert isinstance(order.fee, dict)
        assert 'cost' in order.fee
        assert 'currency' in order.fee
        assert 'rate' in order.fee
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π
        assert isinstance(order.fee['cost'], (int, float))
        assert isinstance(order.fee['currency'], str)

    def test_ccxt_trades_structure_compliance(self, ccxt_standard_order):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã trades CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        order = Order.from_ccxt_response(ccxt_standard_order)
        
        # Trades –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º
        assert isinstance(order.trades, list)
        
        if order.trades:
            trade = order.trades[0]
            required_trade_fields = ['id', 'timestamp', 'datetime', 'symbol', 'side', 'amount', 'price', 'cost']
            
            for field in required_trade_fields:
                assert field in trade, f"Missing required trade field: {field}"

    def test_ccxt_info_structure_compliance(self, ccxt_standard_order):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã info CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        order = Order.from_ccxt_response(ccxt_standard_order)
        
        # Info –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        assert isinstance(order.info, dict)
        
        # –ï—Å–ª–∏ info —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–∏—Ä–∂–∏
        if order.info:
            assert 'orderId' in order.info

    def test_ccxt_datetime_format_compliance(self):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ datetime CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        order = Order(
            id='12345',
            symbol='BTC/USDT',
            type=Order.TYPE_LIMIT,
            side=Order.SIDE_BUY,
            amount=0.001
        )
        
        # Datetime –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO8601 —Å Z
        assert order.datetime.endswith('Z')
        assert 'T' in order.datetime
        
        # –î–æ–ª–∂–µ–Ω –ø–∞—Ä—Å–∏—Ç—å—Å—è –≤ datetime
        parsed = datetime.fromisoformat(order.datetime.replace('Z', '+00:00'))
        assert isinstance(parsed, datetime)

    def test_ccxt_timestamp_compliance(self):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è timestamp CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
        order = Order(
            id='12345',
            symbol='BTC/USDT',
            type=Order.TYPE_LIMIT,
            side=Order.SIDE_BUY,
            amount=0.001
        )
        
        # Timestamp –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        assert isinstance(order.timestamp, int)
        assert order.timestamp > 1000000000000  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –î–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ
        current_timestamp = int(datetime.now().timestamp() * 1000)
        assert abs(order.timestamp - current_timestamp) < 5000  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 5 —Å–µ–∫—É–Ω–¥

    def test_ccxt_precision_handling(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å precision –≤ CCXT —Å—Ç–∏–ª–µ"""
        order = Order(
            id='12345',
            symbol='BTC/USDT',
            type=Order.TYPE_LIMIT,
            side=Order.SIDE_BUY,
            amount=0.001234567890,  # –ú–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            price=50000.123456789
        )
        
        # –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é
        assert order.amount == 0.001234567890
        assert order.price == 50000.123456789

    def test_ccxt_status_transitions(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ CCXT –ª–æ–≥–∏–∫–µ"""
        order = Order(
            id='12345',
            symbol='BTC/USDT',
            type=Order.TYPE_LIMIT,
            side=Order.SIDE_BUY,
            amount=0.001,
            price=50000.0,
            status=Order.STATUS_PENDING
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ open
        order.mark_as_placed_on_exchange('exchange123', 1705315800000)
        assert order.status == Order.STATUS_OPEN
        assert order.id == 'exchange123'
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        order.update_filled_amount(0.0005, 50000.0)
        assert order.status == Order.STATUS_PARTIALLY_FILLED  # AutoTrade —Å—Ç–∞—Ç—É—Å
        assert order.filled == 0.0005
        assert order.remaining == 0.0005
        
        # –ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        order.update_filled_amount(0.001, 50000.0)
        assert order.status == Order.STATUS_CLOSED
        assert order.filled == 0.001
        assert order.remaining == 0.0

    def test_ccxt_backward_compatibility(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AutoTrade –ø–æ–ª—è–º–∏"""
        order = Order(
            id='12345',
            symbol='BTC/USDT',
            type=Order.TYPE_LIMIT,
            side=Order.SIDE_BUY,
            amount=0.001,
            price=50000.0,
            local_order_id=1001,
            deal_id=555
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        assert order.order_id == 1001  # local_order_id
        assert order.exchange_id == '12345'  # id
        assert order.order_type == 'limit'  # type

    @pytest.mark.parametrize("invalid_status", [
        'OPEN', 'CLOSED', 'PENDING',  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–∑–∞–≥–ª–∞–≤–Ω—ã–µ)
        'partial', 'filled', 'cancelled',  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        'active', 'inactive', 'waiting'  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
    ])
    def test_ccxt_invalid_status_handling(self, invalid_status):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤"""
        order = Order(
            id='12345',
            symbol='BTC/USDT',
            type=Order.TYPE_LIMIT,
            side=Order.SIDE_BUY,
            amount=0.001,
            status=invalid_status  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        )
        
        # –ü—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
        is_valid, errors = order.validate_ccxt_compliance()
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ç—É—Å—ã –º–æ–≥—É—Ç –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        assert order.status == invalid_status  # –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å

    def test_ccxt_none_values_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ None –∑–Ω–∞—á–µ–Ω–∏–π –≤ CCXT –ø–æ–ª—è—Ö"""
        ccxt_response = {
            'id': '12345',
            'symbol': 'BTC/USDT',
            'type': 'limit',
            'side': 'buy',
            'amount': 0.001,
            'price': None,  # None –∑–Ω–∞—á–µ–Ω–∏—è
            'filled': None,
            'remaining': None,
            'cost': None,
            'average': None,
            'lastTradeTimestamp': None,
            'trades': None,
            'fee': None,
            'info': None
        }
        
        order = Order.from_ccxt_response(ccxt_response)
        
        # None –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert order.price is None
        assert order.filled == 0.0  # Default –∑–Ω–∞—á–µ–Ω–∏–µ
        assert order.trades == []  # Default –∑–Ω–∞—á–µ–Ω–∏–µ
        assert order.fee == {'cost': 0.0, 'currency': None, 'rate': None}  # Default
        assert order.info == {}  # Default

    def test_ccxt_serialization_deserialization(self, ccxt_standard_order):
        """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º CCXT compliance"""
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –∏–∑ CCXT –æ—Ç–≤–µ—Ç–∞
        original_order = Order.from_ccxt_response(ccxt_standard_order)
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        order_dict = original_order.to_dict()
        
        # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        restored_order = Order.from_dict(order_dict)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ CCXT —Ñ–æ—Ä–º–∞—Ç—É
        original_ccxt = original_order.to_ccxt_dict()
        restored_ccxt = restored_order.to_ccxt_dict()
        
        # –í—Å–µ CCXT –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
        ccxt_fields = ['id', 'symbol', 'type', 'side', 'amount', 'price', 'status']
        for field in ccxt_fields:
            assert original_ccxt[field] == restored_ccxt[field]


if __name__ == "__main__":
    pytest.main([__file__, "-v"])