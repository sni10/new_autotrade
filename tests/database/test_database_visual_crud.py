#!/usr/bin/env python3
# test_database_visual_crud.py
"""
üß™ –í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ CRUD –û–ü–ï–†–ê–¶–ò–ô –° POSTGRESQL

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ø–∏–∏
- –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
"""

import asyncio
import asyncpg
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from domain.entities.deal import Deal
from domain.entities.currency_pair import CurrencyPair
from infrastructure.repositories.factory.repository_factory import RepositoryFactory

async def show_database_tables():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –ü–†–û–í–ï–†–Ø–ï–ú –¢–ê–ë–õ–ò–¶–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
    print("=" * 50)
    
    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5434,
            user="airflow", 
            password="airflow",
            database="airflow"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        if tables:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            for table in tables:
                print(f"   - {table['table_name']}")
        else:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        await conn.close()
        return len(tables)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return 0

async def show_table_content(table_name: str, title: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã"""
    print(f"\nüìã {title}")
    print("=" * 50)
    
    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5434,
            user="airflow", 
            password="airflow",
            database="airflow"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = $1
            )
        """, table_name)
        
        if not table_exists:
            print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await conn.close()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
        rows = await conn.fetch(f"SELECT * FROM {table_name} ORDER BY deal_id")
        
        if rows:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
            print("\nüìä –°–û–î–ï–†–ñ–ò–ú–û–ï –¢–ê–ë–õ–ò–¶–´:")
            print("-" * 80)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            if rows:
                columns = list(rows[0].keys())
                header = " | ".join(f"{col:12}" for col in columns[:6])  # –ü–µ—Ä–≤—ã–µ 6 –∫–æ–ª–æ–Ω–æ–∫
                print(header)
                print("-" * len(header))
                
                # –î–∞–Ω–Ω—ã–µ
                for row in rows:
                    values = []
                    for col in columns[:6]:
                        value = row[col]
                        if isinstance(value, datetime):
                            value = value.strftime("%H:%M:%S")
                        elif value is None:
                            value = "NULL"
                        else:
                            value = str(value)
                        values.append(f"{value:12}")
                    print(" | ".join(values))
        else:
            print("üì≠ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
        
        await conn.close()
        return len(rows) if rows else 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return 0

async def test_database_crud_operations():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê CRUD –û–ü–ï–†–ê–¶–ò–ô –° POSTGRESQL")
    print("=" * 70)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
    tables_count = await show_database_tables()
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    print("\nüè≠ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–ê–ë–†–ò–ö–ò –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í:")
    print("=" * 50)
    
    factory = RepositoryFactory()
    await factory.initialize()
    
    deals_repo = await factory.get_deals_repository()
    print("‚úÖ MemoryFirst —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–¥–µ–ª–æ–∫ —Å–æ–∑–¥–∞–Ω")
    
    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    await show_table_content("deals", "–ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ DEALS")
    
    # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É
    print("\nüí± –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –í–ê–õ–Æ–¢–ù–û–ô –ü–ê–†–´:")
    print("=" * 50)
    
    currency_pair = CurrencyPair(
        base_currency="ATM",
        quote_currency="USDT",
        symbol="ATMUSDT",
        deal_quota=25.0
    )
    print(f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {currency_pair.symbol}")
    
    # 5. –°–û–ó–î–ê–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –°–î–ï–õ–ö–£
    print("\nüìù –®–ê–ì 1: –°–û–ó–î–ê–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –°–î–ï–õ–ö–ò")
    print("=" * 50)
    
    original_deal = Deal(
        deal_id=1001,
        currency_pair=currency_pair,
        status=Deal.STATUS_OPEN,
        profit=0.0
    )
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ ID: {original_deal.deal_id}")
    print(f"   - –°—Ç–∞—Ç—É—Å: {original_deal.status}")
    print(f"   - –ü—Ä–∏–±—ã–ª—å: {original_deal.profit}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å PostgreSQL)
    deals_repo.save(original_deal)
    print("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î
    await asyncio.sleep(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    await show_table_content("deals", "–°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –°–î–ï–õ–ö–ò")
    
    # 6. –ò–ó–ú–ï–ù–Ø–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –°–î–ï–õ–ö–£
    print("\n‚úèÔ∏è –®–ê–ì 2: –ò–ó–ú–ï–ù–ï–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –°–î–ï–õ–ö–ò")
    print("=" * 50)
    
    original_deal.status = Deal.STATUS_CLOSED
    original_deal.profit = 1.5
    original_deal.updated_at = int(datetime.now().timestamp() * 1000)
    
    print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ ID: {original_deal.deal_id}")
    print(f"   - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {original_deal.status}")
    print(f"   - –ù–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {original_deal.profit}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    deals_repo.save(original_deal)
    print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    
    # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await show_table_content("deals", "–°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –°–î–ï–õ–ö–ò")
    
    # 7. –°–û–ó–î–ê–ï–ú –ö–û–ü–ò–Æ –°–î–ï–õ–ö–ò
    print("\nüìã –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –ö–û–ü–ò–ò –°–î–ï–õ–ö–ò")
    print("=" * 50)
    
    copy_deal = Deal(
        deal_id=1002,
        currency_pair=currency_pair,
        status=original_deal.status,
        profit=original_deal.profit
    )
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è —Å–¥–µ–ª–∫–∏ ID: {copy_deal.deal_id}")
    print(f"   - –°—Ç–∞—Ç—É—Å: {copy_deal.status}")
    print(f"   - –ü—Ä–∏–±—ã–ª—å: {copy_deal.profit}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é
    deals_repo.save(copy_deal)
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    
    # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏
    await show_table_content("deals", "–°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –ö–û–ü–ò–ò –°–î–ï–õ–ö–ò")
    
    # 8. –ò–ó–ú–ï–ù–Ø–ï–ú –ö–û–ü–ò–Æ
    print("\nüîß –®–ê–ì 4: –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–û–ü–ò–ò –°–î–ï–õ–ö–ò")
    print("=" * 50)
    
    copy_deal.profit = 2.8
    copy_deal.updated_at = int(datetime.now().timestamp() * 1000)
    
    print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∞ –∫–æ–ø–∏—è —Å–¥–µ–ª–∫–∏ ID: {copy_deal.deal_id}")
    print(f"   - –ù–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {copy_deal.profit}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ø–∏–∏
    deals_repo.save(copy_deal)
    print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    
    # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ø–∏–∏
    await show_table_content("deals", "–°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–ü–ò–ò –°–î–ï–õ–ö–ò")
    
    # 9. –£–î–ê–õ–Ø–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –°–î–ï–õ–ö–£
    print("\nüóëÔ∏è –®–ê–ì 5: –£–î–ê–õ–ï–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –°–î–ï–õ–ö–ò")
    print("=" * 50)
    
    success = deals_repo.delete_by_id(original_deal.deal_id)
    
    if success:
        print(f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ ID {original_deal.deal_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É ID {original_deal.deal_id}")
    
    # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_table_content("deals", "–§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø –û–†–ò–ì–ò–ù–ê–õ–ê")
    
    # 10. –ü–†–û–í–ï–†–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø –í –ü–ê–ú–Ø–¢–ò
    print("\nüß† –°–û–°–¢–û–Ø–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø –í –ü–ê–ú–Ø–¢–ò:")
    print("=" * 50)
    
    all_deals = deals_repo.get_all()
    print(f"‚úÖ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –≤ –ø–∞–º—è—Ç–∏: {len(all_deals)}")
    
    for deal in all_deals:
        print(f"   - ID: {deal.deal_id}, –°—Ç–∞—Ç—É—Å: {deal.status}, –ü—Ä–∏–±—ã–ª—å: {deal.profit}")
    
    # 11. –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê POSTGRESQL
    print("\nüîç –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê POSTGRESQL:")
    print("=" * 50)
    
    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5434,
            user="airflow", 
            password="airflow",
            database="airflow"
        )
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        count = await conn.fetchval("SELECT COUNT(*) FROM deals")
        print(f"‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ PostgreSQL: {count}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        rows = await conn.fetch("SELECT deal_id, status, profit FROM deals ORDER BY deal_id")
        
        for row in rows:
            print(f"   - PostgreSQL ID: {row['deal_id']}, –°—Ç–∞—Ç—É—Å: {row['status']}, –ü—Ä–∏–±—ã–ª—å: {row['profit']}")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PostgreSQL: {e}")
    
    # 12. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É
    await factory.close()
    print("\n‚úÖ –§–∞–±—Ä–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∑–∞–∫—Ä—ã—Ç–∞")
    
    print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("=" * 70)
    print("‚úÖ –í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def show_connection_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print("\nüîå –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö POSTGRESQL:")
    print("=" * 60)
    print("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print("   - –•–æ—Å—Ç: localhost")
    print("   - –ü–æ—Ä—Ç: 5434")
    print("   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: airflow")
    print("   - –ü–∞—Ä–æ–ª—å: airflow")
    print("   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: airflow")
    print()
    print("üõ†Ô∏è –°–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print()
    print("1Ô∏è‚É£ –ß–µ—Ä–µ–∑ psql (–∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞):")
    print("   psql -h localhost -p 5434 -U airflow -d airflow")
    print()
    print("2Ô∏è‚É£ –ß–µ—Ä–µ–∑ pgAdmin:")
    print("   - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    print("   - Host: localhost, Port: 5434")
    print("   - Username: airflow, Password: airflow")
    print("   - Database: airflow")
    print()
    print("3Ô∏è‚É£ –ß–µ—Ä–µ–∑ DBeaver:")
    print("   - New Connection ‚Üí PostgreSQL")
    print("   - Server Host: localhost, Port: 5434")
    print("   - Database: airflow")
    print("   - Username: airflow, Password: airflow")
    print()
    print("4Ô∏è‚É£ SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    print("   SELECT * FROM deals;")
    print("   SELECT * FROM orders;")
    print("   \\dt  -- –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
    print("   \\d deals  -- –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã deals")
    print()
    print("üéØ –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    print("   - deals (—Å–¥–µ–ª–∫–∏)")
    print("   - orders (–æ—Ä–¥–µ—Ä–∞)")
    print("   - tickers_history (–∏—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ä–æ–≤)")
    print("   - order_books_history (–∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–∫–∞–Ω–æ–≤)")

if __name__ == "__main__":
    print("üöÄ –í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ CRUD –û–ü–ï–†–ê–¶–ò–ô –° POSTGRESQL")
    print("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    show_connection_info()
    
    print("\n‚è≥ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
    import time
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_database_crud_operations())