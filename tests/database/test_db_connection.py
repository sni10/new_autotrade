#!/usr/bin/env python3
# test_db_connection.py
import asyncio
import asyncpg
import os

async def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        print("üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")

        # Use environment variables for Docker container, fallback to localhost for local testing
        host = os.getenv("DB_HOST", "localhost")
        port = int(os.getenv("DB_PORT", "5434"))
        user = os.getenv("DB_USER", "airflow")
        password = os.getenv("DB_PASSWORD", "airflow")
        database = os.getenv("DB_NAME", "airflow")

        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} –∫–∞–∫ {user}")

        conn = await asyncpg.connect(
            host=host,
            port=port,
            user=user,
            password=password,
            database=database
        )

        result = await conn.fetchval("SELECT version()")
        print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í–µ—Ä—Å–∏—è: {result}")

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        await conn.execute("""
                           CREATE TABLE IF NOT EXISTS test_table (
                                                                     id SERIAL PRIMARY KEY,
                                                                     name VARCHAR(50),
                               created_at TIMESTAMP DEFAULT NOW()
                               )
                           """)
        print("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–µ–Ω")

        # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        await conn.execute("""
                           INSERT INTO test_table (name) VALUES ($1)
                           """, "test_migration")
        print("‚úÖ –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω")

        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        rows = await conn.fetch("SELECT * FROM test_table LIMIT 5")
        print(f"‚úÖ –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π")

        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await conn.execute("DROP TABLE IF EXISTS test_table")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

        await conn.close()
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ó–∞–ø—É—â–µ–Ω –ª–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: docker ps")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ config.json")
        print("   - –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ—Ä—Ç 5434")
        return False

if __name__ == "__main__":
    asyncio.run(test_connection())