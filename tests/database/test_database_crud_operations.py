#!/usr/bin/env python3
# test_database_crud_operations.py
"""
üß™ –¢–ï–°–¢ CRUD –û–ü–ï–†–ê–¶–ò–ô –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π:
1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ RepositoryFactory
2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏
3. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ —Å–¥–µ–ª–∫–∏
5. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ø–∏–∏
6. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É DataFrame (–ø–∞–º—è—Ç—å) –∏ PostgreSQL (–¥–∏—Å–∫).
"""

import asyncio
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from domain.entities.deal import Deal
from domain.entities.currency_pair import CurrencyPair
from infrastructure.repositories.factory.repository_factory import RepositoryFactory

async def test_database_crud_operations():
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê CRUD –û–ü–ï–†–ê–¶–ò–ô –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    factory = RepositoryFactory()
    
    try:
        # –®–ê–ì 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        print("\nüìã –®–ê–ì 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        await factory.initialize()
        
        deals_repo = await factory.get_deals_repository()
        storage_info = factory.get_storage_info()
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_info['deals_type']}")
        print(f"üóÑÔ∏è PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if storage_info['postgresql_available'] else '‚ùå'}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É
        currency_pair = CurrencyPair(
            base_currency="ATM",
            quote_currency="USDT",
            symbol="ATMUSDT",
            deal_quota=25.0,
            profit_markup=0.015
        )
        
        # –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
        print("\nüìã –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏...")
        
        original_deal = Deal(
            deal_id=None,  # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID
            currency_pair=currency_pair,
            status=Deal.STATUS_OPEN,
            profit=0.0
        )
        
        start_time = time.time()
        deals_repo.save(original_deal)
        creation_time = (time.time() - start_time) * 1000
        
        print(f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        print(f"üÜî ID —Å–¥–µ–ª–∫–∏: {original_deal.deal_id}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {original_deal.status}")
        print(f"üí∞ –ü—Ä–∏–±—ã–ª—å: {original_deal.profit}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {creation_time:.2f}ms")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ –µ—Å—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        retrieved_original = deals_repo.get_by_id(original_deal.deal_id)
        assert retrieved_original is not None, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
        assert retrieved_original.deal_id == original_deal.deal_id, "ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        
        # –®–ê–ì 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
        print("\nüìã –®–ê–ì 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å –∏ —Å—Ç–∞—Ç—É—Å
        new_profit = 1.25
        success = deals_repo.update_deal_profit(original_deal.deal_id, new_profit)
        
        assert success, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–±—ã–ª—å —Å–¥–µ–ª–∫–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        updated_original = deals_repo.get_by_id(original_deal.deal_id)
        
        print(f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        print(f"üí∞ –ù–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {updated_original.profit}")
        print(f"üïê –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {updated_original.updated_at}")
        
        assert updated_original.profit == new_profit, f"–ü—Ä–∏–±—ã–ª—å –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å: {updated_original.profit} != {new_profit}"
        
        # –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ —Å–¥–µ–ª–∫–∏
        print("\nüìã –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ —Å–¥–µ–ª–∫–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –Ω–æ –Ω–æ–≤—ã–º ID
        deal_copy = Deal(
            deal_id=None,  # –ù–æ–≤—ã–π ID
            currency_pair=currency_pair,
            status=updated_original.status,
            profit=updated_original.profit
        )
        
        deals_repo.save(deal_copy)
        
        print(f"‚úÖ –ö–æ–ø–∏—è —Å–¥–µ–ª–∫–∏ —Å–æ–∑–¥–∞–Ω–∞!")
        print(f"üÜî ID –∫–æ–ø–∏–∏: {deal_copy.deal_id}")
        print(f"üÜî ID –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {original_deal.deal_id}")
        print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏: {deal_copy.status}")
        print(f"üí∞ –ü—Ä–∏–±—ã–ª—å –∫–æ–ø–∏–∏: {deal_copy.profit}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å —Å –Ω–æ–≤—ã–º ID
        assert deal_copy.deal_id != original_deal.deal_id, "–ö–æ–ø–∏—è –∏–º–µ–µ—Ç —Ç–æ—Ç –∂–µ ID —á—Ç–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª"
        
        retrieved_copy = deals_repo.get_by_id(deal_copy.deal_id)
        assert retrieved_copy is not None, "–ö–æ–ø–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
        
        # –®–ê–ì 5: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ø–∏–∏
        print("\nüìã –®–ê–ì 5: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ø–∏–∏ —Å–¥–µ–ª–∫–∏...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–ø–∏—é —Å –¥—Ä—É–≥–æ–π –ø—Ä–∏–±—ã–ª—å—é
        copy_profit = 2.75
        copy_sell_order_id = 999
        
        success = deals_repo.close_deal(deal_copy.deal_id, copy_sell_order_id, copy_profit)
        assert success, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∫–æ–ø–∏—é —Å–¥–µ–ª–∫–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ø–∏–∏
        updated_copy = deals_repo.get_by_id(deal_copy.deal_id)
        
        print(f"‚úÖ –ö–æ–ø–∏—è —Å–¥–µ–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        print(f"üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏: {updated_copy.status}")
        print(f"üí∞ –ù–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∫–æ–ø–∏–∏: {updated_copy.profit}")
        print(f"üõí ID –æ—Ä–¥–µ—Ä–∞ –ø—Ä–æ–¥–∞–∂–∏: {copy_sell_order_id}")
        print(f"üïê –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: {updated_copy.closed_at}")
        
        assert updated_copy.status == Deal.STATUS_CLOSED, f"–°—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {updated_copy.status}"
        assert updated_copy.profit == copy_profit, f"–ü—Ä–∏–±—ã–ª—å –∫–æ–ø–∏–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å: {updated_copy.profit}"
        
        # –®–ê–ì 6: –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏
        print("\nüìã –®–ê–ì 6: –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        original_before_delete = deals_repo.get_by_id(original_deal.deal_id)
        assert original_before_delete is not None, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –∏—Å—á–µ–∑–ª–∞ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è"
        
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É
        deleted = deals_repo.delete_by_id(original_deal.deal_id)
        assert deleted, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª —É–¥–∞–ª–µ–Ω
        original_after_delete = deals_repo.get_by_id(original_deal.deal_id)
        
        print(f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        print(f"üóëÔ∏è –°–¥–µ–ª–∫–∞ —Å ID {original_deal.deal_id} –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        assert original_after_delete is None, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"
        
        # –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("\nüìã –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ø–∏—è –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        final_copy = deals_repo.get_by_id(deal_copy.deal_id)
        assert final_copy is not None, "–ö–æ–ø–∏—è —Å–¥–µ–ª–∫–∏ –∏—Å—á–µ–∑–ª–∞"
        assert final_copy.status == Deal.STATUS_CLOSED, "–°—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è"
        assert final_copy.profit == copy_profit, "–ü—Ä–∏–±—ã–ª—å –∫–æ–ø–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = deals_repo.get_deals_statistics()
        all_deals = deals_repo.get_all()
        
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!")
        print(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {len(all_deals)}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        print(f"üéØ –ö–æ–ø–∏—è —Å–¥–µ–ª–∫–∏ ID {deal_copy.deal_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {final_copy.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        print("\nüìã –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        mass_operations_start = time.time()
        
        test_deals = []
        for i in range(100):
            test_deal = Deal(
                deal_id=None,
                currency_pair=currency_pair,
                status=Deal.STATUS_OPEN,
                profit=i * 0.1
            )
            deals_repo.save(test_deal)
            test_deals.append(test_deal)
        
        mass_operations_time = (time.time() - mass_operations_start) * 1000
        avg_operation_time = mass_operations_time / 100
        
        print(f"‚ö° 100 –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞ {mass_operations_time:.2f}ms")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {avg_operation_time:.3f}ms")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        for test_deal in test_deals:
            deals_repo.delete_by_id(test_deal.deal_id)
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ CRUD –û–ü–ï–†–ê–¶–ò–ô –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç") 
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ø–∏–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–î - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –æ—Ç–ª–∏—á–Ω–∞—è")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï CRUD –û–ü–ï–†–ê–¶–ò–ô: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await factory.close()
        print("\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê CRUD –û–ü–ï–†–ê–¶–ò–ô –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
    print("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è")
    print("—Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å PostgreSQL")
    print()
    
    success = await test_database_crud_operations()
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("üèÜ –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ production")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
    
    return success

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    result = asyncio.run(main())
    exit(0 if result else 1)