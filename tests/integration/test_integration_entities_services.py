#!/usr/bin/env python3
# test_integration_entities_services.py
"""
üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ù–´–• ENTITIES –ò –°–ï–†–í–ò–°–û–í

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É:
- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö entities (Deal, CurrencyPair)
- –°–µ—Ä–≤–∏—Å–æ–≤ —Å –Ω–æ–≤—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ (DealService, OrderService)
- –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PostgreSQL
"""

import asyncio
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from domain.entities.deal import Deal
from domain.entities.currency_pair import CurrencyPair
from domain.entities.order import Order
from domain.factories.deal_factory import DealFactory
from domain.factories.order_factory import OrderFactory
from domain.services.deals.deal_service import DealService
from domain.services.orders.order_service import OrderService
from infrastructure.repositories.factory.repository_factory import RepositoryFactory
from infrastructure.connectors.exchange_connector import CcxtExchangeConnector

async def test_updated_entities():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö entities"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ entities...")
    
    # –¢–µ—Å—Ç CurrencyPair (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
    currency_pair = CurrencyPair(
        base_currency="ATM",
        quote_currency="USDT",
        symbol="ATMUSDT",
        deal_quota=25.0,
        profit_markup=0.015
    )
    
    print(f"‚úÖ CurrencyPair —Å–æ–∑–¥–∞–Ω: {currency_pair}")
    assert currency_pair.symbol == "ATMUSDT"
    assert currency_pair.deal_quota == 25.0
    
    # –¢–µ—Å—Ç Deal —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    deal = Deal(
        deal_id=1,
        currency_pair=currency_pair,
        status=Deal.STATUS_OPEN,
        profit=0.0
    )
    
    print(f"‚úÖ Deal —Å–æ–∑–¥–∞–Ω: {deal}")
    assert deal.deal_id == 1
    assert deal.profit == 0.0
    assert deal.updated_at is not None
    
    # –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å profit
    deal.update_profit(1.5)
    assert deal.profit == 1.5
    print(f"‚úÖ Profit –æ–±–Ω–æ–≤–ª–µ–Ω: {deal.profit}")
    
    # –¢–µ—Å—Ç to_dict —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    deal_dict = deal.to_dict()
    assert "profit" in deal_dict
    assert "updated_at" in deal_dict
    print("‚úÖ to_dict —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è")
    
    # –¢–µ—Å—Ç from_dict —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    restored_deal = Deal.from_dict(deal_dict, currency_pair)
    assert restored_deal.profit == 1.5
    assert restored_deal.updated_at == deal.updated_at
    print("‚úÖ from_dict —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏")
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã entities –ø—Ä–æ–π–¥–µ–Ω—ã!")
    return True

async def test_repository_factory():
    """–¢–µ—Å—Ç —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º RepositoryFactory...")
    
    factory = RepositoryFactory()
    await factory.initialize()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage_info = factory.get_storage_info()
    print(f"üìä Storage info: {storage_info}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    deals_repo = await factory.get_deals_repository()
    orders_repo = await factory.get_orders_repository()
    
    print(f"‚úÖ Deals repository: {type(deals_repo).__name__}")
    print(f"‚úÖ Orders repository: {type(orders_repo).__name__}")
    
    await factory.close()
    print("‚úÖ RepositoryFactory –∑–∞–∫—Ä—ã—Ç")
    
    return True

async def test_services_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –Ω–æ–≤—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    factory = RepositoryFactory()
    await factory.initialize()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        deals_repo = await factory.get_deals_repository()
        orders_repo = await factory.get_orders_repository()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫–∏
        order_factory = OrderFactory()
        deal_factory = DealFactory(order_factory)
        
        # –°–æ–∑–¥–∞–µ–º mock exchange connector
        exchange_connector = None  # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –Ω–æ–≤—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
        order_service = OrderService(orders_repo, order_factory, exchange_connector)
        deal_service = DealService(deals_repo, order_service, deal_factory, exchange_connector)
        
        print("‚úÖ –°–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        currency_pair = CurrencyPair(
            base_currency="ATM",
            quote_currency="USDT",
            symbol="ATMUSDT",
            deal_quota=25.0
        )
        
        deal = deal_service.create_new_deal(currency_pair)
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ DealService: {deal.deal_id}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        open_deals = deal_service.get_open_deals()
        print(f"‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: {len(open_deals)}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –ø–æ ID
        retrieved_deal = deal_service.get_deal_by_id(deal.deal_id)
        assert retrieved_deal is not None
        assert retrieved_deal.deal_id == deal.deal_id
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ ID: {retrieved_deal.deal_id}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
        order_stats = order_service.get_statistics()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤: {order_stats}")
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    finally:
        await factory.close()
    
    return True

async def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
    
    factory = RepositoryFactory()
    await factory.initialize()
    
    try:
        deals_repo = await factory.get_deals_repository()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        currency_pair = CurrencyPair(
            base_currency="ATM",
            quote_currency="USDT",
            symbol="ATMUSDT",
            deal_quota=25.0
        )
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
        deals_count = 1000
        start_time = time.time()
        
        for i in range(deals_count):
            deal = Deal(
                deal_id=i+1,
                currency_pair=currency_pair,
                status=Deal.STATUS_OPEN,
                profit=i * 0.1
            )
            deals_repo.save(deal)
        
        creation_time = time.time() - start_time
        avg_time = (creation_time / deals_count) * 1000
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {deals_count} —Å–¥–µ–ª–æ–∫ –∑–∞ {creation_time:.2f}s")
        print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {avg_time:.3f}ms")
        
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
        start_time = time.time()
        all_deals = deals_repo.get_all()
        read_time = (time.time() - start_time) * 1000
        
        print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(all_deals)} —Å–¥–µ–ª–æ–∫ –∑–∞ {read_time:.2f}ms")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        start_time = time.time()
        open_deals = deals_repo.get_open_deals()
        search_time = (time.time() - start_time) * 1000
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(open_deals)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ {search_time:.2f}ms")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        assert avg_time < 5, f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ: {avg_time:.2f}ms"
        assert read_time < 100, f"–ß—Ç–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ: {read_time:.2f}ms"
        assert search_time < 150, f"–ü–æ–∏—Å–∫ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {search_time:.2f}ms"
        
        print("üéâ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    finally:
        await factory.close()
    
    return True

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í")
    print("=" * 60)
    
    tests = [
        ("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ entities", test_updated_entities),
        ("RepositoryFactory", test_repository_factory),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤", test_services_integration),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        try:
            print(f"\nüìã {test_name}:")
            result = await test_func()
            if result:
                passed_tests += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è entities –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
    
    return passed_tests, total_tests

if __name__ == "__main__":
    asyncio.run(run_all_tests())