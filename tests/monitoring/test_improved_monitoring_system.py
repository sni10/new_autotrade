#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""
import sys
import os
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'src')))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from domain.services.orders.buy_order_monitor import BuyOrderMonitor
        print("‚úÖ BuyOrderMonitor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from domain.services.deals.deal_completion_monitor import DealCompletionMonitor
        print("‚úÖ DealCompletionMonitor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from domain.services.orders.order_sync_monitor import OrderSyncMonitor
        print("‚úÖ OrderSyncMonitor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from domain.services.monitoring.system_stats_monitor import SystemStatsMonitor
        print("‚úÖ SystemStatsMonitor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_component_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        from domain.services.orders.buy_order_monitor import BuyOrderMonitor
        from domain.services.deals.deal_completion_monitor import DealCompletionMonitor
        from domain.services.orders.order_sync_monitor import OrderSyncMonitor
        from domain.services.monitoring.system_stats_monitor import SystemStatsMonitor
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å None (–º–æ–∫-–æ–±—ä–µ–∫—Ç—ã)
        buy_monitor = BuyOrderMonitor(
            order_service=None,
            deal_service=None,
            exchange_connector=None,
            max_age_minutes=5.0,
            max_price_deviation_percent=3.0,
            check_interval_seconds=10
        )
        print("‚úÖ BuyOrderMonitor —Å–æ–∑–¥–∞–Ω")
        
        deal_monitor = DealCompletionMonitor(
            deal_service=None,
            order_service=None,
            exchange_connector=None,
            check_interval_seconds=30
        )
        print("‚úÖ DealCompletionMonitor —Å–æ–∑–¥–∞–Ω")
        
        sync_monitor = OrderSyncMonitor(
            order_service=None,
            sync_interval_seconds=30
        )
        print("‚úÖ OrderSyncMonitor —Å–æ–∑–¥–∞–Ω")
        
        stats_monitor = SystemStatsMonitor(
            order_service=None,
            deal_service=None,
            buy_order_monitor=buy_monitor,
            deal_completion_monitor=deal_monitor,
            order_sync_monitor=sync_monitor,
            stats_interval_seconds=60
        )
        print("‚úÖ SystemStatsMonitor —Å–æ–∑–¥–∞–Ω")
        
        return True, {
            'buy_monitor': buy_monitor,
            'deal_monitor': deal_monitor,
            'sync_monitor': sync_monitor,
            'stats_monitor': stats_monitor
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False, {}

def test_statistics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    success, components = test_component_creation()
    if not success:
        return False
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        buy_stats = components['buy_monitor'].get_statistics()
        print(f"‚úÖ BuyOrderMonitor —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {buy_stats}")
        
        deal_stats = components['deal_monitor'].get_statistics()
        print(f"‚úÖ DealCompletionMonitor —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {deal_stats}")
        
        sync_stats = components['sync_monitor'].get_statistics()
        print(f"‚úÖ OrderSyncMonitor —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {sync_stats}")
        
        system_stats = components['stats_monitor'].get_statistics()
        print(f"‚úÖ SystemStatsMonitor —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {system_stats}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config.config_loader import load_config
        
        config = load_config()
        buy_order_monitor_cfg = config.get("buy_order_monitor", {})
        
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥ buy_order_monitor: {buy_order_monitor_cfg}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        max_age_minutes = buy_order_monitor_cfg.get("max_age_minutes", 5.0)
        max_price_deviation_percent = buy_order_monitor_cfg.get("max_price_deviation_percent", 3.0)
        check_interval_seconds = buy_order_monitor_cfg.get("check_interval_seconds", 10)
        
        expected_values = {
            "max_age_minutes": 5.0,
            "max_price_deviation_percent": 3.0,
            "check_interval_seconds": 10
        }
        
        actual_values = {
            "max_age_minutes": max_age_minutes,
            "max_price_deviation_percent": max_price_deviation_percent,
            "check_interval_seconds": check_interval_seconds
        }
        
        all_correct = True
        for param, expected in expected_values.items():
            actual = actual_values[param]
            is_correct = actual == expected
            status = "‚úÖ" if is_correct else "‚ùå"
            print(f"   {status} {param}: {actual}")
            if not is_correct:
                all_correct = False
        
        return all_correct
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_main_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ main.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        with open('main.py', 'r', encoding='utf-8') as f:
            main_content = f.read()
        
        required_imports = [
            'from domain.services.orders.order_sync_monitor import OrderSyncMonitor',
            'from domain.services.monitoring.system_stats_monitor import SystemStatsMonitor'
        ]
        
        required_components = [
            'order_sync_monitor = OrderSyncMonitor(',
            'system_stats_monitor = SystemStatsMonitor(',
            'order_sync_monitor.stop_monitoring()',
            'system_stats_monitor.stop_monitoring()'
        ]
        
        for import_line in required_imports:
            if import_line in main_content:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏–º–ø–æ—Ä—Ç: {import_line.split('import')[1].strip()}")
            else:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º–ø–æ—Ä—Ç: {import_line.split('import')[1].strip()}")
                return False
        
        for component in required_components:
            if component in main_content:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {component.split('=')[0].strip() if '=' in component else component.split('.')[0].strip()}")
            else:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {component.split('=')[0].strip() if '=' in component else component.split('.')[0].strip()}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üöÄ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("=" * 80)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", test_imports),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", lambda: test_component_creation()[0]),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", test_statistics),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å main.py", test_main_integration),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –¢–ï–°–¢–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print("=" * 80)

if __name__ == "__main__":
    main()