#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DealCompletionMonitor
"""
import sys
import os
import asyncio
import logging
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'src')))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # DEBUG –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

def test_statistics_initialization():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    try:
        from domain.services.deals.deal_completion_monitor import DealCompletionMonitor
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        mock_deal_service = Mock()
        mock_order_service = Mock()
        mock_exchange_connector = Mock()
        
        # –°–æ–∑–¥–∞–µ–º DealCompletionMonitor
        monitor = DealCompletionMonitor(
            deal_service=mock_deal_service,
            order_service=mock_order_service,
            exchange_connector=mock_exchange_connector,
            check_interval_seconds=30
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = monitor.get_statistics()
        expected_keys = [
            "checks_performed", "deals_monitored", "deals_completed", 
            "sell_orders_placed", "sync_operations"
        ]
        
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        for key in expected_keys:
            if key not in stats:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
                return False
            if stats[key] != 0:
                print(f"‚ùå –ö–ª—é—á '{key}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –Ω–æ —Ä–∞–≤–µ–Ω {stats[key]}")
                return False
        
        print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

async def test_statistics_counting():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    try:
        from domain.services.deals.deal_completion_monitor import DealCompletionMonitor
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        mock_deal_service = Mock()
        mock_order_service = Mock()
        mock_exchange_connector = Mock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–¥–µ–ª–∫–∏
        mock_deal1 = Mock()
        mock_deal1.deal_id = "deal_001"
        mock_deal2 = Mock()
        mock_deal2.deal_id = "deal_002"
        mock_deal3 = Mock()
        mock_deal3.deal_id = "deal_003"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ 3 –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        mock_deal_service.get_open_deals.return_value = [mock_deal1, mock_deal2, mock_deal3]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è orders_repo
        mock_order_service.orders_repo = Mock()
        mock_order_service.orders_repo.get_orders_by_deal.return_value = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        
        # –°–æ–∑–¥–∞–µ–º DealCompletionMonitor
        monitor = DealCompletionMonitor(
            deal_service=mock_deal_service,
            order_service=mock_order_service,
            exchange_connector=mock_exchange_connector,
            check_interval_seconds=30
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
        for i in range(5):
            await monitor.check_deals_completion()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = monitor.get_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫: {stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞
        if stats["checks_performed"] != 5:
            print(f"‚ùå checks_performed –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5, –Ω–æ —Ä–∞–≤–Ω–æ {stats['checks_performed']}")
            return False
        
        if stats["deals_monitored"] != 3:
            print(f"‚ùå deals_monitored –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3, –Ω–æ —Ä–∞–≤–Ω–æ {stats['deals_monitored']}")
            return False
        
        if "max_deals_monitored" not in stats:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'max_deals_monitored'")
            return False
        
        if stats["max_deals_monitored"] != 3:
            print(f"‚ùå max_deals_monitored –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3, –Ω–æ —Ä–∞–≤–Ω–æ {stats['max_deals_monitored']}")
            return False
        
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print(f"   - –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['checks_performed']}")
        print(f"   - –°–¥–µ–ª–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {stats['deals_monitored']}")
        print(f"   - –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {stats['max_deals_monitored']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å—á–µ—Ç–∞: {e}")
        return False

async def test_sell_orders_placement_counting():
    """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö SELL –æ—Ä–¥–µ—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö SELL –æ—Ä–¥–µ—Ä–æ–≤...")
    
    try:
        from domain.services.deals.deal_completion_monitor import DealCompletionMonitor
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        mock_deal_service = Mock()
        mock_order_service = Mock()
        mock_exchange_connector = Mock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–¥–µ–ª–∫—É
        mock_deal = Mock()
        mock_deal.deal_id = "deal_001"
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ—Ä–¥–µ—Ä–∞
        mock_buy_order = Mock()
        mock_buy_order.side = "BUY"
        mock_buy_order.order_id = "buy_001"
        mock_buy_order.status = "filled"
        mock_buy_order.is_filled.return_value = True  # BUY –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω
        mock_buy_order.get_fill_percentage.return_value = 1.0  # 100% –∑–∞–ø–æ–ª–Ω–µ–Ω
        
        mock_sell_order = Mock()
        mock_sell_order.side = "SELL"
        mock_sell_order.order_id = "sell_001"
        mock_sell_order.status = "PENDING"  # SELL –æ—Ä–¥–µ—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
        mock_sell_order.exchange_id = None  # –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ
        mock_sell_order.is_filled.return_value = False
        mock_sell_order.get_fill_percentage.return_value = 0.0  # 0% –∑–∞–ø–æ–ª–Ω–µ–Ω
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_deal_service.get_open_deals.return_value = [mock_deal]
        mock_order_service.orders_repo = Mock()
        mock_order_service.orders_repo.get_orders_by_deal.return_value = [mock_buy_order, mock_sell_order]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º get_order_status
        mock_order_service.get_order_status = AsyncMock()
        mock_order_service.get_order_status.side_effect = lambda order: order  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ –æ—Ä–¥–µ—Ä
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ SELL –æ—Ä–¥–µ—Ä–∞
        mock_result = Mock()
        mock_result.success = True
        mock_order_service.place_existing_order = AsyncMock(return_value=mock_result)
        
        # –°–æ–∑–¥–∞–µ–º DealCompletionMonitor
        monitor = DealCompletionMonitor(
            deal_service=mock_deal_service,
            order_service=mock_order_service,
            exchange_connector=mock_exchange_connector,
            check_interval_seconds=30
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await monitor.check_deals_completion()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = monitor.get_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SELL –æ—Ä–¥–µ—Ä–∞: {stats}")
        
        if stats["sell_orders_placed"] != 1:
            print(f"‚ùå sell_orders_placed –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1, –Ω–æ —Ä–∞–≤–Ω–æ {stats['sell_orders_placed']}")
            return False
        
        print("‚úÖ –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö SELL –æ—Ä–¥–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SELL –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return False

async def test_diagnostic_logging():
    """–¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        from domain.services.deals.deal_completion_monitor import DealCompletionMonitor
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        mock_deal_service = Mock()
        mock_order_service = Mock()
        mock_exchange_connector = Mock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–¥–µ–ª–∫—É
        mock_deal = Mock()
        mock_deal.deal_id = "deal_001"
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ—Ä–¥–µ—Ä–∞ (–æ–±–∞ –ù–ï –∏—Å–ø–æ–ª–Ω–µ–Ω—ã)
        mock_buy_order = Mock()
        mock_buy_order.side = "BUY"
        mock_buy_order.order_id = "buy_001"
        mock_buy_order.status = "open"
        mock_buy_order.is_filled.return_value = False  # –ù–ï –∏—Å–ø–æ–ª–Ω–µ–Ω
        mock_buy_order.filled = 0.5
        
        mock_sell_order = Mock()
        mock_sell_order.side = "SELL"
        mock_sell_order.order_id = "sell_001"
        mock_sell_order.status = "open"
        mock_sell_order.exchange_id = "exchange_123"
        mock_sell_order.is_filled.return_value = False  # –ù–ï –∏—Å–ø–æ–ª–Ω–µ–Ω
        mock_sell_order.filled = 0.3
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_deal_service.get_open_deals.return_value = [mock_deal]
        mock_order_service.orders_repo = Mock()
        mock_order_service.orders_repo.get_orders_by_deal.return_value = [mock_buy_order, mock_sell_order]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º get_order_status
        mock_order_service.get_order_status = AsyncMock()
        mock_order_service.get_order_status.side_effect = lambda order: order
        
        # –î–æ–±–∞–≤–ª—è–µ–º get_fill_percentage
        mock_buy_order.get_fill_percentage.return_value = 0.5
        mock_sell_order.get_fill_percentage.return_value = 0.3
        
        # –°–æ–∑–¥–∞–µ–º DealCompletionMonitor
        monitor = DealCompletionMonitor(
            deal_service=mock_deal_service,
            order_service=mock_order_service,
            exchange_connector=mock_exchange_connector,
            check_interval_seconds=30
        )
        
        print("üìä –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏ (–¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è)...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await monitor.check_deals_completion()
        
        print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –ª–æ–≥–∞—Ö –≤—ã—à–µ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üöÄ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò DealCompletionMonitor")
    print("=" * 80)
    
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", test_statistics_initialization),
        ("–ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", test_statistics_counting),
        ("–ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö SELL –æ—Ä–¥–µ—Ä–æ–≤", test_sell_orders_placement_counting),
        ("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", test_diagnostic_logging),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
                
            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DealCompletionMonitor —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫")
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("\nüîß –û–ñ–ò–î–ê–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
        print("   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç deals_monitored (—Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω max_deals_monitored (–º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)")
        print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥—Å—á–µ—Ç sell_orders_placed")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –¢–ï–°–¢–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())