#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ get_statistics() –≤ DealService
"""
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'src')))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

def test_deal_service_statistics():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ get_statistics() –≤ DealService"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ get_statistics() –≤ DealService...")
    
    try:
        from domain.services.deals.deal_service import DealService
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockDealsRepo:
            def get_all(self):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
                return []
            
            def get_open_deals(self):
                return []
        
        # –°–æ–∑–¥–∞–µ–º DealService —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞–º–∏
        deal_service = DealService(
            deals_repo=MockDealsRepo(),
            order_service=None,
            deal_factory=None,
            exchange_connector=None
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ get_statistics()
        stats = deal_service.get_statistics()
        
        print(f"‚úÖ –ú–µ—Ç–æ–¥ get_statistics() —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        required_keys = ['total_deals', 'completed_deals']
        for key in required_keys:
            if key in stats:
                print(f"‚úÖ –ö–ª—é—á '{key}': {stats[key]}")
            else:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}'")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DealService.get_statistics(): {e}")
        return False

def test_system_stats_monitor_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SystemStatsMonitor"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SystemStatsMonitor...")
    
    try:
        from domain.services.monitoring.system_stats_monitor import SystemStatsMonitor
        from domain.services.deals.deal_service import DealService
        from domain.services.orders.order_service import OrderService
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        class MockDealsRepo:
            def get_all(self):
                return []
            def get_open_deals(self):
                return []
        
        class MockOrdersRepo:
            def get_all(self):
                return []
            def get_open_orders(self):
                return []
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        deal_service = DealService(
            deals_repo=MockDealsRepo(),
            order_service=None,
            deal_factory=None,
            exchange_connector=None
        )
        
        order_service = OrderService(
            orders_repo=MockOrdersRepo(),
            order_factory=None,
            exchange_connector=None
        )
        
        # –°–æ–∑–¥–∞–µ–º SystemStatsMonitor
        stats_monitor = SystemStatsMonitor(
            order_service=order_service,
            deal_service=deal_service,
            stats_interval_seconds=60
        )
        
        print("‚úÖ SystemStatsMonitor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ _log_deals_statistics –Ω–∞–ø—Ä—è–º—É—é
        import asyncio
        
        async def test_deals_stats():
            try:
                await stats_monitor._log_deals_statistics()
                print("‚úÖ –ú–µ—Ç–æ–¥ _log_deals_statistics() –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫")
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _log_deals_statistics(): {e}")
                return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        result = asyncio.run(test_deals_stats())
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üöÄ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø DealService.get_statistics()")
    print("=" * 80)
    
    tests = [
        ("–ú–µ—Ç–æ–¥ get_statistics() –≤ DealService", test_deal_service_statistics),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SystemStatsMonitor", test_system_stats_monitor_integration),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –û—à–∏–±–∫–∞ 'DealService' object has no attribute 'get_statistics' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ SystemStatsMonitor —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–¥–µ–ª–æ–∫")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –¢–ï–°–¢–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print("=" * 80)

if __name__ == "__main__":
    main()