#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è BuyOrderMonitor
"""
import sys
import os
import asyncio
import logging
import time
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'src')))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

def test_improved_logging_logic():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è BuyOrderMonitor...")
    
    try:
        from domain.services.orders.buy_order_monitor import BuyOrderMonitor
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        mock_order_service = Mock()
        mock_deal_service = Mock()
        mock_exchange = Mock()
        
        # –°–æ–∑–¥–∞–µ–º BuyOrderMonitor —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        buy_monitor = BuyOrderMonitor(
            order_service=mock_order_service,
            deal_service=mock_deal_service,
            exchange_connector=mock_exchange,
            max_age_minutes=5.0,
            max_price_deviation_percent=3.0,
            check_interval_seconds=1  # –ö–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        buy_monitor.summary_interval_minutes = 0.1  # 6 —Å–µ–∫—É–Ω–¥
        
        print("‚úÖ BuyOrderMonitor —Å–æ–∑–¥–∞–Ω —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
        assert hasattr(buy_monitor, 'quiet_checks_count'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ quiet_checks_count"
        assert hasattr(buy_monitor, 'last_summary_time'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ last_summary_time"
        assert hasattr(buy_monitor, 'summary_interval_minutes'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ summary_interval_minutes"
        
        print("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        return True, buy_monitor
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BuyOrderMonitor: {e}")
        return False, None

async def test_quiet_checks_behavior():
    """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤...")
    
    success, buy_monitor = test_improved_logging_logic()
    if not success:
        return False
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
        buy_monitor.order_service.get_open_orders.return_value = []
        
        print("üìä –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑ –æ—Ä–¥–µ—Ä–æ–≤...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
        for i in range(5):
            await buy_monitor.check_stale_buy_orders()
            print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}: quiet_checks_count = {buy_monitor.quiet_checks_count}")
            time.sleep(0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
        assert buy_monitor.quiet_checks_count > 0, "–°—á–µ—Ç—á–∏–∫ —Ç–∏—Ö–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è"
        print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ —Ç–∏—Ö–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {buy_monitor.quiet_checks_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏—Ö–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {e}")
        return False

async def test_periodic_summary():
    """–¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏...")
    
    success, buy_monitor = test_improved_logging_logic()
    if not success:
        return False
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
        buy_monitor.order_service.get_open_orders.return_value = []
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        buy_monitor.summary_interval_minutes = 0.05  # 3 —Å–µ–∫—É–Ω–¥—ã
        
        print("üìä –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Å–≤–æ–¥–∫–∏...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –¥–ª—è —Å–≤–æ–¥–∫–∏
        for i in range(10):
            await buy_monitor.check_stale_buy_orders()
            if i == 5:
                print("   ‚è∞ –ñ–¥–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–≤–æ–¥–∫–∏...")
                time.sleep(4)  # –ñ–¥–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–≤–æ–¥–∫–∏
        
        print("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –ª–æ–≥–∞—Ö")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏: {e}")
        return False

async def test_active_monitoring_logging():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤...")
    
    success, buy_monitor = test_improved_logging_logic()
    if not success:
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ—Ä–¥–µ—Ä
        mock_order = Mock()
        mock_order.side = 'BUY'
        mock_order.order_id = 'test_order_123'
        mock_order.status = 'open'
        mock_order.created_at = int(time.time() * 1000)
        mock_order.symbol = 'OM/USDT'
        mock_order.price = 0.25
        mock_order.amount = 100
        mock_order.deal_id = 'test_deal_456'
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ä–¥–µ—Ä–∞
        buy_monitor.order_service.get_open_orders.return_value = [mock_order]
        buy_monitor.order_service.get_order_status = AsyncMock(return_value=mock_order)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ get_fill_percentage –∫ –º–æ–∫-–æ—Ä–¥–µ—Ä—É
        mock_order.get_fill_percentage = Mock(return_value=0.0)
        
        print("üìä –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –Ω–∞–ª–∏—á–∏–µ–º BUY –æ—Ä–¥–µ—Ä–∞...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await buy_monitor.check_stale_buy_orders()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ —Ç–∏—Ö–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–±—Ä–æ—à–µ–Ω
        assert buy_monitor.quiet_checks_count == 0, "–°—á–µ—Ç—á–∏–∫ —Ç–∏—Ö–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ —Å–±—Ä–æ—à–µ–Ω –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"
        print("‚úÖ –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ —Å—á–µ—Ç—á–∏–∫ —Ç–∏—Ö–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üöÄ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø BuyOrderMonitor")
    print("=" * 80)
    
    tests = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º", lambda: test_improved_logging_logic()[0]),
        ("–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤", test_quiet_checks_behavior),
        ("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞", test_periodic_summary),
        ("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤", test_active_monitoring_logging),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
                
            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ BuyOrderMonitor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —à—É–º–∞ –≤ –ª–æ–≥–∞—Ö")
        print("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        print("\nüîß –û–ñ–ò–î–ê–ï–ú–û–ï –ü–û–í–ï–î–ï–ù–ò–ï:")
        print("   ‚Ä¢ –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ BUY –æ—Ä–¥–µ—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –¢–ï–°–¢–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())