#!/usr/bin/env python3
"""
Apply database schema migration to fix critical issues
"""
import asyncio
import asyncpg

async def apply_migration():
    """Apply the database migration script"""
    print("üîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        # Connect to database
        conn = await asyncpg.connect(
            host="localhost",
            port=5434,
            user="airflow", 
            password="airflow",
            database="airflow"
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # Read migration script
        with open("database_schema_migration.sql", "r", encoding="utf-8") as f:
            migration_sql = f.read()
        
        print("üìÑ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # Execute migration
        print("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        await conn.execute(migration_sql)
        
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–ê!")
        
        # Verify the results
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        # Check orders table structure
        orders_columns = await conn.fetch("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'orders' 
            ORDER BY ordinal_position
        """)
        
        print("\nüóÇÔ∏è –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ ORDERS:")
        for col in orders_columns:
            nullable = "NULL" if col['is_nullable'] == "YES" else "NOT NULL"
            print(f"  - {col['column_name']}: {col['data_type']} ({nullable})")
        
        # Check if data column exists and is NOT NULL
        data_column = [col for col in orders_columns if col['column_name'] == 'data']
        if data_column and data_column[0]['is_nullable'] == 'NO':
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'data' –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ NOT NULL")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–ª–æ–Ω–∫–æ–π 'data'")
        
        # Check order_id data type
        order_id_column = [col for col in orders_columns if col['column_name'] == 'order_id']
        if order_id_column and 'bigint' in order_id_column[0]['data_type']:
            print("‚úÖ order_id —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ç–∏–ø BIGINT")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–æ–º order_id")
        
        await conn.close()
        print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = asyncio.run(apply_migration())
    if success:
        print("\n‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –æ—à–∏–±–∫–∏ —Å—Ö–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")