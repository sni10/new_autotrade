# application/use_cases/run_realtime_trading.py
from domain.entities.currency_pair import CurrencyPair
from domain.services.deal_service import DealService

from domain.services.ticker_service import TickerService
from infrastructure.connectors.pro_exchange_connector import CcxtProMarketDataConnector
from infrastructure.repositories.tickers_repository import InMemoryTickerRepository
import time
from datetime import datetime
from termcolor import colored  # pip install termcolor
from application.utils.performance_logger import PerformanceLogger
from domain.services.market_analysis_service import MarketAnalysisService

# üÜï –ù–û–í–´–ô –ò–ú–ü–û–†–¢
from domain.services.signal_cooldown_manager import SignalCooldownManager


def now_fmt():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def duration_color(duration):
    if duration < 1:
        return colored(f"{duration:.3f}s", "green")
    elif duration < 5:
        return colored(f"{duration:.3f}s", "yellow")
    else:
        return colored(f"{duration:.3f}s", "red")


async def run_realtime_trading(
        pro_exchange_connector: CcxtProMarketDataConnector,
        currency_pair: CurrencyPair,
        deal_service: DealService,
):
    repository = InMemoryTickerRepository(max_size=5000)
    ticker_service = TickerService(repository)

    # üÜï –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    logger = PerformanceLogger(log_interval_seconds=10)

    # üÜï –ó–ê–©–ò–¢–ê –û–¢ –ü–û–í–¢–û–†–ù–´–• –°–ò–ì–ù–ê–õ–û–í (—Ç–æ–ª—å–∫–æ –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫)
    cooldown_manager = SignalCooldownManager()

    # üÜï –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏–Ω—Ç—ã
    counter = 0

    market_analyzer = MarketAnalysisService()

    print(f"üöÄ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–õ–ò: {currency_pair.symbol}")
    print(f"   üí∞ –ë—é–¥–∂–µ—Ç –Ω–∞ —Å–¥–µ–ª–∫—É: {currency_pair.deal_quota} USDT")
    print(f"   üéØ –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫: {currency_pair.deal_count}")
    print(f"   üìä –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã)")
    print("="*80)

    while True:
        try:
            # üöÄ –£–ë–ò–†–ê–ï–ú –õ–ò–®–ù–ò–ï –ü–†–ò–ù–¢–´!
            # print(colored(f"\n‚è≥ [{now_fmt()}] Start Ticker_data.watch_ticker", "cyan"))
            start_watch = time.time()

            ticker_data = await pro_exchange_connector.client.watch_ticker(currency_pair.symbol)

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
            start_process = time.time()
            await ticker_service.process_ticker(ticker_data)
            end_process = time.time()

            processing_time = end_process - start_process
            counter += 1

            # üöÄ –£–ë–ò–†–ê–ï–ú get_last_n –∫–∞–∂–¥—ã–π —Ç–∏–∫!
            # repos_tickers = await ticker_service.repository.get_last_n(50)  # –£–î–ê–õ–ò–¢–¨!

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó get_last_n
            if len(repository.tickers) < 50:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑—Ä–µ–¥–∫–∞
                if counter % 100 == 0:
                    print(f"üü° –ù–∞–∫–æ–ø–ª–µ–Ω–æ {len(repository.tickers)} —Ç–∏–∫–æ–≤, –Ω—É–∂–Ω–æ 50")
                continue

            # üöÄ –£–ü–†–û–©–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            ticker_signal = await ticker_service.get_signal()

            # üöÄ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
            if len(repository.tickers) > 0:
                last_ticker = repository.tickers[-1]

                # –õ–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ PerformanceLogger
                signals_count = len(last_ticker.signals) if last_ticker.signals else 0
                logger.log_tick(
                    price=float(last_ticker.close),
                    processing_time=processing_time,
                    signals_count=signals_count
                )

                # –£–ë–ò–†–ê–ï–ú –í–°–ï –ü–†–ò–ù–¢–´ –° –ò–ù–î–ò–ö–ê–¢–û–†–ê–ú–ò!
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
                if logger.should_log() and last_ticker.signals:
                    hist = last_ticker.signals.get('histogram', 0.0)
                    macd = last_ticker.signals.get('macd', 0.0)
                    signal = last_ticker.signals.get('signal', 0.0)

                    print(f"üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: HIST={hist:.6f} | MACD={macd:.6f} | SIGNAL={signal:.6f}")

            # üÜï –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê –∫–∞–∂–¥—ã–µ 50 —Ç–∏–∫–æ–≤
            if counter % 50 == 0 and len(repository.tickers) > 20:
                # –í–ê–†–ò–ê–ù–¢ 1: –ß–µ—Ä–µ–∑ TickerService
                volatility_info = ticker_service.analyze_market_conditions()
                trend_info = ticker_service.get_price_trend()
                should_trade = ticker_service.should_trade_by_volatility()

                print(f"\nüîç –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê (—Ç–∏–∫ {counter}):")
                print(f"   {volatility_info}")
                print(f"   {trend_info}")
                print(f"   ü§ñ –¢–æ—Ä–≥–æ–≤–∞—Ç—å: {'‚úÖ –î–ê' if should_trade else '‚ùå –ù–ï–¢'}")

                # –í–ê–†–ò–ê–ù–¢ 2: –ß–µ—Ä–µ–∑ MarketAnalysisService (–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ)
                prices = [float(t.close) for t in repository.tickers[-50:]]
                volatility_analysis = market_analyzer.analyze_volatility(prices)
                trend_analysis = market_analyzer.analyze_trend(prices)

                print(f"\nüìä –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó:")
                print(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_analysis['avg_volatility']}% "
                      f"({volatility_analysis['risk_level']})")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {volatility_analysis['trading_recommendation']}")
                print(f"   –¢—Ä–µ–Ω–¥: {trend_analysis['trend_direction']} "
                      f"({trend_analysis['strength']}) {trend_analysis['change_percent']}%")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                active_deals_count = len(deal_service.get_open_deals())
                print(f"   {cooldown_manager.get_status(active_deals_count, currency_pair.deal_count)}")

            # üéØ –û–ë–†–ê–ë–û–¢–ö–ê –°–ò–ì–ù–ê–õ–ê –ü–û–ö–£–ü–ö–ò –° –ó–ê–©–ò–¢–û–ô –ü–û –õ–ò–ú–ò–¢–£ –°–î–ï–õ–û–ö
            if ticker_signal == "BUY":
                if len(repository.tickers) > 0:
                    last_ticker = repository.tickers[-1]
                    if last_ticker.signals:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                        macd = last_ticker.signals.get('macd', 0.0)
                        signal = last_ticker.signals.get('signal', 0.0)
                        hist = last_ticker.signals.get('histogram', 0.0)
                        current_price = float(last_ticker.close)

                        # üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê –ê–ö–¢–ò–í–ù–´–• –°–î–ï–õ–û–ö
                        active_deals_count = len(deal_service.get_open_deals())
                        can_buy, reason = cooldown_manager.can_buy(
                            active_deals_count=active_deals_count,
                            max_deals=currency_pair.deal_count
                        )

                        if not can_buy:
                            # üö´ –°–ò–ì–ù–ê–õ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù
                            if counter % 20 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞–∂–¥—ã–µ 20 —Ç–∏–∫–æ–≤
                                print(f"üö´ BUY –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason} | –¶–µ–Ω–∞: {current_price}")
                            continue

                        # ‚úÖ –°–ò–ì–ù–ê–õ –†–ê–ó–†–ï–®–ï–ù - –ü–û–ö–ê–ó–´–í–ê–ï–ú –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
                        print("\n" + "="*80)
                        print("üü¢üî• –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò –†–ê–ó–†–ï–®–ï–ù! –¢–ï–°–¢–ò–†–£–ï–ú –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†")
                        print("="*80)
                        print(f"   üìà MACD > Signal: {macd:.6f} > {signal:.6f}")
                        print(f"   üìä Histogram: {hist:.6f}")
                        print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} USDT")
                        print(f"   üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {active_deals_count}/{currency_pair.deal_count}")

                        # üßÆ –í–´–ó–û–í –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –°–¢–†–ê–¢–ï–ì–ò–ò
                        try:
                            strategy_result = ticker_service.calculate_strategy(
                                buy_price=current_price,
                                budget=currency_pair.deal_quota,  # 15.0 USDT
                                min_step=currency_pair.min_step,   # 0.01
                                price_step=currency_pair.price_step, # 0.0001
                                buy_fee_percent=0.1,   # Binance –∫–æ–º–∏—Å—Å–∏—è
                                sell_fee_percent=0.1,  # Binance –∫–æ–º–∏—Å—Å–∏—è  
                                profit_percent=currency_pair.profit_markup  # 1.5%
                            )
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            if isinstance(strategy_result, dict) and "comment" in strategy_result:
                                # –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
                                print(f"‚ùå {strategy_result['comment']}")
                            else:
                                # –£—Å–ø–µ—à–Ω—ã–π —Ä–∞—Å—á–µ—Ç - —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                buy_price_calc, total_coins_needed, sell_price_calc, coins_to_sell, info_dict = strategy_result
                                
                                print("\n‚úÖ –†–ê–°–ß–ï–¢ –£–°–ü–ï–®–ï–ù:")
                                print(f"   üõí –ö—É–ø–∏—Ç—å: {total_coins_needed} {currency_pair.base_currency} –ø–æ {buy_price_calc} USDT")
                                print(f"   üíµ –ü–æ—Ç—Ä–∞—Ç–∏–º: {float(total_coins_needed) * float(buy_price_calc):.4f} USDT")
                                print(f"   üè∑Ô∏è –ü—Ä–æ–¥–∞—Ç—å: {coins_to_sell} {currency_pair.base_currency} –ø–æ {sell_price_calc} USDT")
                                print(f"   üí∞ –í—ã—Ä—É—á–∏–º: {float(coins_to_sell) * float(sell_price_calc):.4f} USDT")
                                print(f"   üìä –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {info_dict.get('üîπ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', 'N/A')}")
                                print("\nüìã –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
                                for key, value in info_dict.items():
                                    if key != "comment":
                                        print(f"   {key}: {value}")

                                buy_price_calc, total_coins_needed, sell_price_calc, coins_to_sell, info_dict = strategy_result

                                # üÜï –°–û–ó–î–ê–ï–ú –°–î–ï–õ–ö–£
                                new_deal = deal_service.create_new_deal(currency_pair)

                                # üÜï –°–û–ó–î–ê–ï–ú BUY –û–†–î–ï–†
                                buy_order = deal_service.open_buy_order(
                                    price=float(buy_price_calc),
                                    amount=float(total_coins_needed),
                                    deal_id=new_deal.deal_id
                                )

                                # üÜï –°–û–ó–î–ê–ï–ú SELL –û–†–î–ï–†
                                sell_order = deal_service.open_sell_order(
                                    price=float(sell_price_calc),
                                    amount=float(coins_to_sell),
                                    deal_id=new_deal.deal_id
                                )

                                # üÜï –ü–†–ò–í–Ø–ó–´–í–ê–ï–ú –û–†–î–ï–†–ê –ö –°–î–ï–õ–ö–ï
                                new_deal.attach_orders(buy_order, sell_order)

                                print(f"üÜï –°–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ #{new_deal.deal_id}")
                                print(f"   üõí BUY: {buy_order}")
                                print(f"   üè∑Ô∏è SELL: {sell_order}")

                        except Exception as calc_error:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ: {calc_error}")
                        
                        print("="*80)
                        print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...\n")
                    else:
                        # –†–∞–∑ –≤ 100 —Ç–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—á–µ–º—É –Ω–µ –ø–æ–∫—É–ø–∞–µ–º (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                        if counter % 100 == 0:
                            if len(repository.tickers) > 0:
                                last_ticker = repository.tickers[-1]
                                if last_ticker.signals:
                                    macd = last_ticker.signals.get('macd', 0.0)
                                    signal = last_ticker.signals.get('signal', 0.0)
                                    hist = last_ticker.signals.get('histogram', 0.0)
                                    print(f"üü° –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞. MACD: {macd:.6f}, Signal: {signal:.6f}, Hist: {hist:.6f}")

        except Exception as e:
            print(f"‚ùå Error: {e}")
