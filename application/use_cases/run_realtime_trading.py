# application/use_cases/run_realtime_trading.py
from domain.entities.currency_pair import CurrencyPair
from domain.services.deal_service import DealService

from domain.services.ticker_service import TickerService
from infrastructure.connectors.pro_exchange_connector import CcxtProMarketDataConnector
from infrastructure.repositories.tickers_repository import InMemoryTickerRepository
import time
from datetime import datetime
from termcolor import colored  # pip install termcolor
from application.utils.performance_logger import PerformanceLogger
from domain.services.market_analysis_service import MarketAnalysisService


def now_fmt():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def duration_color(duration):
    if duration < 1:
        return colored(f"{duration:.3f}s", "green")
    elif duration < 5:
        return colored(f"{duration:.3f}s", "yellow")
    else:
        return colored(f"{duration:.3f}s", "red")


# –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤/—Å–∏–≥–Ω–∞–ª–æ–≤
# from domain.services.signal_service import SignalService

# run_realtime_trading.py (–ø—Ä–∏–º–µ—Ä–Ω–æ)


# –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–º–ø–æ—Ä—Ç—ã:


async def run_realtime_trading(
        pro_exchange_connector: CcxtProMarketDataConnector,
        currency_pair: CurrencyPair,
        deal_service: DealService,
):
    repository = InMemoryTickerRepository(max_size=5000)
    ticker_service = TickerService(repository)

    # üÜï –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    logger = PerformanceLogger(log_interval_seconds=10)

    # üÜï –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏–Ω—Ç—ã
    counter = 0

    market_analyzer = MarketAnalysisService()

    while True:
        try:
            # üöÄ –£–ë–ò–†–ê–ï–ú –õ–ò–®–ù–ò–ï –ü–†–ò–ù–¢–´!
            # print(colored(f"\n‚è≥ [{now_fmt()}] Start Ticker_data.watch_ticker", "cyan"))
            start_watch = time.time()

            ticker_data = await pro_exchange_connector.client.watch_ticker(currency_pair.symbol)

            # üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
            start_process = time.time()
            await ticker_service.process_ticker(ticker_data)
            end_process = time.time()

            processing_time = end_process - start_process
            counter += 1

            # üöÄ –£–ë–ò–†–ê–ï–ú get_last_n –∫–∞–∂–¥—ã–π —Ç–∏–∫!
            # repos_tickers = await ticker_service.repository.get_last_n(50)  # –£–î–ê–õ–ò–¢–¨!

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó get_last_n
            if len(repository.tickers) < 50:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑—Ä–µ–¥–∫–∞
                if counter % 100 == 0:
                    print(f"üü° –ù–∞–∫–æ–ø–ª–µ–Ω–æ {len(repository.tickers)} —Ç–∏–∫–æ–≤, –Ω—É–∂–Ω–æ 50")
                continue

            # üöÄ –£–ü–†–û–©–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            ticker_signal = await ticker_service.get_signal()

            # üöÄ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
            if len(repository.tickers) > 0:
                last_ticker = repository.tickers[-1]

                # –õ–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ PerformanceLogger
                signals_count = len(last_ticker.signals) if last_ticker.signals else 0
                logger.log_tick(
                    price=float(last_ticker.close),
                    processing_time=processing_time,
                    signals_count=signals_count
                )

                # –£–ë–ò–†–ê–ï–ú –í–°–ï –ü–†–ò–ù–¢–´ –° –ò–ù–î–ò–ö–ê–¢–û–†–ê–ú–ò!
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
                if logger.should_log() and last_ticker.signals:
                    hist = last_ticker.signals.get('histogram', 0.0)
                    macd = last_ticker.signals.get('macd', 0.0)
                    signal = last_ticker.signals.get('signal', 0.0)

                    print(f"üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: HIST={hist:.6f} | MACD={macd:.6f} | SIGNAL={signal:.6f}")

            # üÜï –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê –∫–∞–∂–¥—ã–µ 50 —Ç–∏–∫–æ–≤
            if counter % 50 == 0 and len(repository.tickers) > 20:
                # –í–ê–†–ò–ê–ù–¢ 1: –ß–µ—Ä–µ–∑ TickerService
                volatility_info = ticker_service.analyze_market_conditions()
                trend_info = ticker_service.get_price_trend()
                should_trade = ticker_service.should_trade_by_volatility()

                print(f"\nüîç –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê (—Ç–∏–∫ {counter}):")
                print(f"   {volatility_info}")
                print(f"   {trend_info}")
                print(f"   ü§ñ –¢–æ—Ä–≥–æ–≤–∞—Ç—å: {'‚úÖ –î–ê' if should_trade else '‚ùå –ù–ï–¢'}")

                # –í–ê–†–ò–ê–ù–¢ 2: –ß–µ—Ä–µ–∑ MarketAnalysisService (–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ)
                prices = [float(t.close) for t in repository.tickers[-50:]]
                volatility_analysis = market_analyzer.analyze_volatility(prices)
                trend_analysis = market_analyzer.analyze_trend(prices)

                print(f"\nüìä –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó:")
                print(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_analysis['avg_volatility']}% "
                      f"({volatility_analysis['risk_level']})")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {volatility_analysis['trading_recommendation']}")
                print(f"   –¢—Ä–µ–Ω–¥: {trend_analysis['trend_direction']} "
                      f"({trend_analysis['strength']}) {trend_analysis['change_percent']}%")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            # –î–æ–±–∞–≤–∏—Ç—å –≤ run_realtime_trading.py:
            if ticker_signal == "BUY":
                # üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú - –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ü–ï–†–ï–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                if len(repository.tickers) > 0:
                    last_ticker = repository.tickers[-1]
                    if last_ticker.signals:
                        macd = last_ticker.signals.get('macd', 0.0)
                        signal = last_ticker.signals.get('signal', 0.0)
                        hist = last_ticker.signals.get('histogram', 0.0)

                        print("üü¢üî• –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò! –£—Å–ª–æ–≤–∏—è:")
                        print(f"   üìà MACD > Signal: {macd:.6f} > {signal:.6f}")
                        print(f"   üìä Histogram –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è: {hist:.6f}")
                        print(f"   üìâ SMA —Ç—Ä–µ–Ω–¥ –≤–æ—Å—Ö–æ–¥—è—â–∏–π")

                        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏...
                    else:
                        # –†–∞–∑ –≤ 100 —Ç–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—á–µ–º—É –Ω–µ –ø–æ–∫—É–ø–∞–µ–º
                        if counter % 100 == 0:
                            # üîß –î–û–ë–ê–í–ò–¢–¨ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö:
                            if len(repository.tickers) > 0:
                                last_ticker = repository.tickers[-1]
                                if last_ticker.signals:
                                    macd = last_ticker.signals.get('macd', 0.0)
                                    signal = last_ticker.signals.get('signal', 0.0)
                                    hist = last_ticker.signals.get('histogram', 0.0)
                                    print(f"üü° –û–∂–∏–¥–∞–Ω–∏–µ. MACD: {macd:.6f}, Signal: {signal:.6f}, Hist: {hist:.6f}")

        except Exception as e:
            print(f"‚ùå Error: {e}")
