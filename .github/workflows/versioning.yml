name: Auto Versioning

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      increment_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  MAJOR_VERSION: 3

jobs:
  versioning:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n1)
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG="v${MAJOR_VERSION}.0.0"
          fi
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Calculate version
        id: version
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"
          CURRENT_VERSION=${LATEST_TAG#v}
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-$MAJOR_VERSION}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            INCREMENT_TYPE="${{ github.event.inputs.increment_type }}"
          else
            COMMITS_SINCE_TAG=$(git rev-list --count ${LATEST_TAG}..HEAD)
            if [[ $COMMITS_SINCE_TAG -eq 0 ]]; then
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          
            BREAKING_CHANGES=$(git log ${LATEST_TAG}..HEAD --grep="BREAKING CHANGE" --oneline | wc -l)
            FEATURES=$(git log ${LATEST_TAG}..HEAD --grep="feat:" --oneline | wc -l)
          
            if [[ $BREAKING_CHANGES -gt 0 ]]; then
              INCREMENT_TYPE="major"
            elif [[ $FEATURES -gt 0 ]]; then
              INCREMENT_TYPE="minor"
            else
              INCREMENT_TYPE="patch"
            fi
          fi
          
          case $INCREMENT_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          NEW_TAG="v${NEW_VERSION}"
          
          if git tag -l "$NEW_TAG" | grep -q "$NEW_TAG"; then
            echo "Tag $NEW_TAG already exists!"
            exit 1
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "increment_type=$INCREMENT_TYPE" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Generate changelog
        if: steps.version.outputs.skip != 'true'
        id: changelog
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"
          NEW_TAG="${{ steps.version.outputs.tag }}"
          
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          TOTAL_COMMITS=$(git rev-list --count ${LATEST_TAG}..HEAD)
          CONTRIBUTORS=$(git log ${LATEST_TAG}..HEAD --format='%an' | sort -u | wc -l)
          
          RELEASE_BODY="## Changes in ${NEW_TAG}
          
          ### Statistics
          - **Commits**: ${TOTAL_COMMITS}
          - **Contributors**: ${CONTRIBUTORS}
          - **Type**: ${{ steps.version.outputs.increment_type }}
          
          ### Changelog
          ${CHANGELOG}
          
          ### Links
          - **Full diff**: [\`${LATEST_TAG}...${NEW_TAG}\`](https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${NEW_TAG})
          - **Commit**: ${{ github.sha }}"
          
          {
            echo "body<<EOF"
            echo "$RELEASE_BODY"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create tag
        if: steps.version.outputs.skip != 'true'
        run: |
          NEW_TAG="${{ steps.version.outputs.tag }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG
          
          Auto-generated by GitHub Actions
          Commit: ${{ github.sha }}
          Increment: ${{ steps.version.outputs.increment_type }}
          Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          git push origin "$NEW_TAG"

      - name: Create GitHub Release
        if: steps.version.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: ${{ steps.changelog.outputs.body }}
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: always()
        run: |
          if [[ "${{ steps.version.outputs.skip }}" == "true" ]]; then
            echo "## Versioning skipped" >> $GITHUB_STEP_SUMMARY
            echo "No new commits for release" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Release created successfully" >> $GITHUB_STEP_SUMMARY
            echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Version** | ${{ steps.version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Tag** | ${{ steps.version.outputs.tag }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Type** | ${{ steps.version.outputs.increment_type }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Branch** | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          fi