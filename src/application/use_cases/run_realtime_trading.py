# application/use_cases/run_realtime_trading.py
"""Trading loop using OrderExecutionService and BuyOrderMonitor."""

import asyncio
import time
import logging
from decimal import Decimal

from domain.entities.currency_pair import CurrencyPair
from domain.services.deals.deal_service import DealService
from domain.services.market_data.orderbook_analyzer import OrderBookSignal
from infrastructure.connectors.exchange_connector import CcxtExchangeConnector
from infrastructure.repositories.tickers_repository import InMemoryTickerRepository
from domain.services.market_data.ticker_service import TickerService
from application.utils.performance_logger import PerformanceLogger
from domain.services.trading.signal_cooldown_manager import SignalCooldownManager
from domain.services.utils.orderbook_cache import OrderBookCache

logger = logging.getLogger(__name__)


async def run_realtime_trading(
    pro_exchange_connector_prod: CcxtExchangeConnector,
    pro_exchange_connector_sandbox: CcxtExchangeConnector,
    currency_pair: CurrencyPair,
    deal_service: DealService,
    order_execution_service,
    buy_order_monitor, # –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ
    orderbook_analyzer,
    deal_completion_monitor=None,  # –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    stop_loss_monitor=None,  # –î–æ–±–∞–≤–ª–µ–Ω StopLossMonitor
):
    """Simplified trading loop using OrderExecutionService and BuyOrderMonitor."""

    repository = InMemoryTickerRepository(max_size=5000)
    ticker_service = TickerService(repository)
    logger_perf = PerformanceLogger(log_interval_seconds=10)
    cooldown_manager = SignalCooldownManager()
    
    # –°–æ–∑–¥–∞–µ–º –∫–µ—à –¥–ª—è —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ (TTL 30 —Å–µ–∫—É–Ω–¥)
    orderbook_cache = OrderBookCache(ttl_seconds=30)
    
    counter = 0
    last_orderbook_update = 0
    orderbook_update_interval = 10  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–∫–∞–Ω –∫–∞–∂–¥—ã–µ 10 —Ç–∏–∫–æ–≤

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å OrderExecutionService + BuyOrderMonitor")

    try:
        while True:
            try:
                ticker_data = await pro_exchange_connector_prod.watch_ticker(currency_pair.symbol)

                start_process = time.time()
                await ticker_service.process_ticker(ticker_data)
                end_process = time.time()

                processing_time = end_process - start_process
                counter += 1

                if len(repository.tickers) < 50:
                    if counter % 100 == 0:
                        logger.info(
                            "üü° –ù–∞–∫–æ–ø–ª–µ–Ω–æ %s —Ç–∏–∫–æ–≤, –Ω—É–∂–Ω–æ 50",
                            len(repository.tickers),
                        )
                    continue

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                if counter - last_orderbook_update >= orderbook_update_interval:
                    try:
                        orderbook_data = await pro_exchange_connector_prod.fetch_order_book(currency_pair.symbol)
                        orderbook_cache.set(currency_pair.symbol, orderbook_data)
                        last_orderbook_update = counter
                        logger.debug(f"üì¶ –û–±–Ω–æ–≤–ª–µ–Ω –∫–µ—à —Å—Ç–∞–∫–∞–Ω–∞ –Ω–∞ —Ç–∏–∫–µ {counter}")
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à —Å—Ç–∞–∫–∞–Ω–∞: {e}")

                ticker_signal = await ticker_service.get_signal()

                if len(repository.tickers) > 0:
                    last_ticker = repository.tickers[-1]
                    signals_count = len(last_ticker.signals) if last_ticker.signals else 0
                    logger_perf.log_tick(
                        price=float(last_ticker.close),
                        processing_time=processing_time,
                        signals_count=signals_count,
                    )

                if ticker_signal == "BUY":
                    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–∫–∞–Ω–∞
                    orderbook_metrics = orderbook_analyzer.analyze_orderbook(
                        await pro_exchange_connector_prod.watch_order_book(currency_pair.symbol)
                    )

                    if orderbook_metrics.signal in [OrderBookSignal.REJECT, OrderBookSignal.WEAK_SELL, OrderBookSignal.STRONG_SELL]:
                        logger.info(f"üö´ –°–∏–≥–Ω–∞–ª MACD –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º —Å—Ç–∞–∫–∞–Ω–∞: {orderbook_metrics.signal.value}")
                        continue
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏—è
                    await order_execution_service.monitor_active_orders()

                    if len(repository.tickers) > 0:
                        last_ticker = repository.tickers[-1]
                        if last_ticker.signals:
                            current_price = float(last_ticker.close)

                            active_deals_count = len(deal_service.get_open_deals())
                            can_buy, reason = cooldown_manager.can_buy(
                                active_deals_count=active_deals_count,
                                max_deals=currency_pair.deal_count,
                            )

                            if not can_buy:
                                if counter % 20 == 0:
                                    logger.info(
                                        "üö´ BUY –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: %s | –¶–µ–Ω–∞: %s",
                                        reason,
                                        current_price,
                                    )
                                continue

                            logger.info("\n" + "=" * 80)
                            logger.info(
                                "üü¢üî• MACD –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò –û–ë–ù–ê–†–£–ñ–ï–ù! –í–´–ü–û–õ–ù–Ø–ï–ú –ß–ï–†–ï–ó OrderExecutionService..."
                            )
                            logger.info("=" * 80)

                            macd = last_ticker.signals.get('macd', 0.0)
                            signal = last_ticker.signals.get('signal', 0.0)
                            hist = last_ticker.signals.get('histogram', 0.0)

                            logger.info("   üìà MACD > Signal: %.6f > %.6f", macd, signal)
                            logger.info("   üìä Histogram: %.6f", hist)
                            logger.info("   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %s USDT", current_price)
                            logger.info(
                                "   üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: %s/%s",
                                active_deals_count,
                                currency_pair.deal_count,
                            )

                            try:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—é–¥–∂–µ—Ç –∏–∑ currency_pair
                                budget = currency_pair.deal_quota

                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                                balance_ok, balance_reason = await deal_service.check_balance_before_deal(
                                    quote_currency=currency_pair.quote_currency,
                                    required_amount=budget
                                )
                                if not balance_ok:
                                    logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {balance_reason}")
                                    continue

                                strategy_result = ticker_service.calculate_strategy(
                                    buy_price=current_price,
                                    budget=budget,
                                    currency_pair=currency_pair,
                                    profit_percent=currency_pair.profit_markup,
                                )

                                if isinstance(strategy_result, dict) and "comment" in strategy_result:
                                    logger.error(
                                        "‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ: %s",
                                        strategy_result["comment"],
                                    )
                                    continue

                                logger.info("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ OrderExecutionService...")
                                execution_result = await order_execution_service.execute_trading_strategy(
                                    currency_pair=currency_pair,
                                    strategy_result=strategy_result,
                                    metadata={
                                        'trigger': 'macd_signal',
                                        'macd_data': {
                                            'macd': macd,
                                            'signal': signal,
                                            'histogram': hist,
                                        },
                                        'market_price': current_price,
                                        'timestamp': int(time.time() * 1000),
                                    },
                                )

                                if execution_result.success:
                                    logger.info("üéâ –°–¢–†–ê–¢–ï–ì–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
                                else:
                                    logger.error(
                                        "‚ùå –°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê: %s",
                                        execution_result.error_message,
                                    )

                            except Exception as calc_error:
                                logger.exception(
                                    "‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %s",
                                    calc_error,
                                )

                            logger.info("=" * 80)
                            logger.info("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...\n")

                if counter % 50 == 0:  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 100 –Ω–∞ 50 –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
                    execution_stats = order_execution_service.get_execution_statistics()
                    logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê OrderExecutionService (—Ç–∏–∫ %s):", counter)
                    logger.info("   üöÄ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: %s", execution_stats["total_executions"])
                    logger.info("   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: %s", execution_stats["successful_executions"])
                    logger.info("   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: %s", execution_stats["failed_executions"])

                    order_stats = order_execution_service.order_service.get_statistics()
                    logger.info("   üì¶ –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: %s", order_stats["total_orders"])
                    logger.info("   üîÑ –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: %s", order_stats["open_orders"])

                    all_orders = order_execution_service.order_service.orders_repo.get_all()
                    if all_orders:
                        logger.info("   üîç –î–ï–¢–ê–õ–ò –ü–û –û–†–î–ï–†–ê–ú:")
                        # –ü–æ–ª—É—á–∞–µ–º —à–∞–≥ —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –í–´–ß–ò–°–õ–ï–ù–ò–Ø —Ç–æ—á–Ω–æ—Å—Ç–∏
                        price_step = Decimal(str(currency_pair.precision.get('price', '0.000001')))
                        amount_step = Decimal(str(currency_pair.precision.get('amount', '0.0001')))
                        price_precision = int(price_step.normalize().as_tuple().exponent * -1)
                        amount_precision = int(amount_step.normalize().as_tuple().exponent * -1)

                        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
                        log_format = (
                            f"     - ID: %s | DealID: %s | %s | %s | %s | "
                            f"–¶–µ–Ω–∞: %s | –ö–æ–ª-–≤–æ: %s | ExchangeID: %s | Filled: %s | AvgPrice: %s | Fees: %s"
                        )

                        for order in all_orders:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                            formatted_price = f"{order.price:.{price_precision}f}"
                            formatted_amount = f"{order.amount:.{amount_precision}f}"
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏ –∫–æ–º–∏—Å—Å–∏–∏
                            formatted_filled_amount = f"{order.filled_amount:.{amount_precision}f}"
                            formatted_average_price = f"{order.average_price:.{price_precision}f}"
                            formatted_fees = f"{order.fees:.{price_precision}f}" # –ö–æ–º–∏—Å—Å–∏–∏ —Ç–æ–∂–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é —Ü–µ–Ω—ã

                            logger.info(
                                log_format,
                                order.order_id,
                                order.deal_id,
                                order.symbol,
                                order.side.upper(),
                                order.status,
                                formatted_price,
                                formatted_amount,
                                order.exchange_id,
                                formatted_filled_amount,
                                formatted_average_price,
                                formatted_fees
                            )

                    active_deals = len(deal_service.get_open_deals())
                    logger.info("   üíº –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: %s", active_deals)

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                    balance = await pro_exchange_connector_sandbox.fetch_balance()
                    base_currency_balance = balance.get(currency_pair.base_currency, {}).get('free', 0.0)
                    quote_currency_balance = balance.get(currency_pair.quote_currency, {}).get('free', 0.0)
                    logger.info(f"   üí∞ –ë–∞–ª–∞–Ω—Å: {base_currency_balance:.6f} {currency_pair.base_currency} | {quote_currency_balance:.2f} {currency_pair.quote_currency}")

                    monitor_stats = buy_order_monitor.get_statistics()
                    logger.info("\nüïí –°–¢–ê–¢–ò–°–¢–ò–ö–ê BuyOrderMonitor:")
                    logger.info("   üîç –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: %s", monitor_stats["checks_performed"])
                    logger.info("   üö® –¢—É—Ö–ª—è–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: %s", monitor_stats["stale_orders_found"])
                    logger.info("   ‚ùå –û—Ä–¥–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ: %s", monitor_stats["orders_cancelled"])
                    logger.info("   üîÑ –û—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ: %s", monitor_stats["orders_recreated"])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ DealCompletionMonitor
                    if deal_completion_monitor:
                        try:
                            completion_stats = deal_completion_monitor.get_statistics()
                            logger.info("\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê DealCompletionMonitor:")
                            logger.info("   üîç –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: %s", completion_stats["checks_performed"])
                            logger.info("   üíº –°–¥–µ–ª–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: %s", completion_stats["deals_monitored"])
                            logger.info("   ‚úÖ –°–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: %s", completion_stats["deals_completed"])
                        except Exception as e:
                            logger.debug("‚ö†Ô∏è DealCompletionMonitor —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: %s", e)
                    
                    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    if stop_loss_monitor and counter % 50 == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 50 —Ç–∏–∫–æ–≤
                        try:
                            current_price = float(ticker_data.get('close', 0))
                            cached_orderbook = orderbook_cache.get(currency_pair.symbol)
                            
                            # –ü–µ—Ä–µ–¥–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ–ø-–ª–æ—Å—Å
                            await stop_loss_monitor.check_open_deals(
                                current_price=current_price,
                                cached_orderbook=cached_orderbook
                            )
                            
                            if counter % 500 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑ –≤ 500 —Ç–∏–∫–æ–≤
                                logger.debug("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–µ–Ω —Å—Ç–æ–ø-–ª–æ—Å—Å —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                        except Exception as e:
                            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å—Ç–æ–ø-–ª–æ—Å—Å–µ: {e}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è StopLossMonitor
                    if stop_loss_monitor:
                        try:
                            stop_loss_stats = stop_loss_monitor.get_statistics()
                            logger.info("\nüõ°Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê StopLossMonitor:")
                            logger.info("   üîç –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: %s", stop_loss_stats["checks_performed"])
                            logger.info("   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", stop_loss_stats["warnings_sent"])
                            logger.info("   üî¥ –ü—Ä–æ–±–∏—Ç–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: %s", stop_loss_stats["support_breaks"])
                            logger.info("   üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: %s", stop_loss_stats["emergency_liquidations"])
                            logger.info("   üí• –°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ —Å—Ä–∞–±–æ—Ç–∞–ª–æ: %s", stop_loss_stats["stop_loss_triggered"])
                            
                            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
                            cache_stats = orderbook_cache.get_stats()
                            logger.info("   üì¶ –ö–µ—à —Å—Ç–∞–∫–∞–Ω–∞: %s –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (TTL: %ss)", cache_stats["valid_entries"], cache_stats["ttl_seconds"])
                        except Exception as e:
                            logger.debug("‚ö†Ô∏è StopLossMonitor —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: %s", e)

            except Exception as e:
                logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: %s", e)
                await asyncio.sleep(1)

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    finally:
        logger.info("üö® –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        emergency_result = await order_execution_service.emergency_stop_all_trading()
        logger.info("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %s", emergency_result)

        final_monitor_stats = buy_order_monitor.get_statistics()
        logger.info("üïí –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê BuyOrderMonitor:")
        logger.info("   üîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: %s", final_monitor_stats["checks_performed"])
        logger.info("   üö® –í—Å–µ–≥–æ —Ç—É—Ö–ª—è–∫–æ–≤: %s", final_monitor_stats["stale_orders_found"])
        logger.info("   ‚ùå –í—Å–µ–≥–æ –æ—Ç–º–µ–Ω–µ–Ω–æ: %s", final_monitor_stats["orders_cancelled"])
        logger.info("   üîÑ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ: %s", final_monitor_stats["orders_recreated"])

        final_stats = order_execution_service.get_execution_statistics()
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê OrderExecutionService:")
        logger.info("   üöÄ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: %s", final_stats["total_executions"])
        logger.info("   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: %s", final_stats["successful_executions"])
        logger.info("   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: %.1f%%", final_stats["success_rate"])
        logger.info("   üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: %.4f USDT", final_stats["total_volume"])
        logger.info("   üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: %.4f USDT", final_stats["total_fees"])
