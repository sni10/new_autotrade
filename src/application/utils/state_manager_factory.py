import logging
from typing import Optional, Dict, Any

from src.domain.services.state.state_management_service import StateManagementService
from src.domain.repositories.i_state_repository import IStateRepository
from src.domain.repositories.i_deals_repository import IDealsRepository
from src.domain.repositories.i_orders_repository import IOrdersRepository
from src.domain.repositories.i_statistics_repository import IStatisticsRepository
from src.domain.repositories.i_configuration_repository import IConfigurationRepository

from src.infrastructure.repositories.in_memory_state_repository import InMemoryStateRepository
from src.infrastructure.database.database_manager import DatabaseManager

logger = logging.getLogger(__name__)


class StateManagerFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è StateManagementService —Å –Ω—É–∂–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    """
    
    @staticmethod
    def create_state_manager(
        config: Dict[str, Any],
        deals_repo: Optional[IDealsRepository] = None,
        orders_repo: Optional[IOrdersRepository] = None,
        statistics_repo: Optional[IStatisticsRepository] = None,
        config_repo: Optional[IConfigurationRepository] = None,
        db_manager: Optional[DatabaseManager] = None
    ) -> StateManagementService:
        """
        –°–æ–∑–¥–∞—Ç—å StateManagementService —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            deals_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–¥–µ–ª–æ–∫
            orders_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—Ä–¥–µ—Ä–æ–≤
            statistics_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            config_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π StateManagementService
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
            state_repo_type = config.get('state_management', {}).get('repository_type', 'in_memory')
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if state_repo_type == 'database' and db_manager:
                state_repo = StateManagerFactory._create_database_state_repo(db_manager)
            else:
                state_repo = InMemoryStateRepository()
                logger.info("üì¶ Using InMemoryStateRepository for state management")
            
            # –°–æ–∑–¥–∞–µ–º StateManagementService
            state_manager = StateManagementService(
                state_repo=state_repo,
                deals_repo=deals_repo,
                orders_repo=orders_repo,
                statistics_repo=statistics_repo,
                config_repo=config_repo
            )
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            snapshot_config = config.get('state_management', {}).get('snapshots', {})
            if 'interval_seconds' in snapshot_config:
                state_manager.snapshot_interval_seconds = snapshot_config['interval_seconds']
            
            logger.info("‚úÖ StateManagementService created successfully")
            return state_manager
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create StateManagementService: {e}")
            raise
    
    @staticmethod
    def _create_database_state_repo(db_manager: DatabaseManager) -> IStateRepository:
        """–°–æ–∑–¥–∞—Ç—å database-based —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        try:
            if db_manager.db_type == 'postgresql':
                from src.infrastructure.repositories.postgresql.postgresql_state_repository import PostgreSQLStateRepository
                return PostgreSQLStateRepository(db_manager)
            elif db_manager.db_type == 'sqlite':
                from src.infrastructure.repositories.sqlite.sqlite_state_repository import SQLiteStateRepository
                return SQLiteStateRepository(db_manager)
            else:
                logger.warning(f"‚ö†Ô∏è Unsupported database type for state repository: {db_manager.db_type}")
                return InMemoryStateRepository()
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Database state repository not available: {e}. Using in-memory fallback.")
            return InMemoryStateRepository()
        except Exception as e:
            logger.error(f"‚ùå Failed to create database state repository: {e}")
            return InMemoryStateRepository()
    
    @staticmethod
    def create_development_state_manager(
        enable_database: bool = False,
        enable_statistics: bool = True
    ) -> StateManagementService:
        """
        –°–æ–∑–¥–∞—Ç—å StateManagementService –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        
        Args:
            enable_database: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ database —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            enable_statistics: –í–∫–ª—é—á–∏—Ç—å –ª–∏ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
        Returns:
            StateManagementService –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º in-memory —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            state_repo = InMemoryStateRepository()
            
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            statistics_repo = None
            if enable_statistics:
                try:
                    from src.infrastructure.repositories.in_memory_statistics_repository import InMemoryStatisticsRepository
                    statistics_repo = InMemoryStatisticsRepository()
                except ImportError:
                    logger.warning("‚ö†Ô∏è InMemoryStatisticsRepository not available")
            
            state_manager = StateManagementService(
                state_repo=state_repo,
                statistics_repo=statistics_repo
            )
            
            # –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–Ω–∏–º–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            state_manager.snapshot_interval_seconds = 60  # 1 –º–∏–Ω—É—Ç–∞
            
            logger.info("üõ†Ô∏è Development StateManagementService created")
            return state_manager
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create development StateManagementService: {e}")
            raise
    
    @staticmethod
    def create_production_state_manager(
        config: Dict[str, Any],
        all_repositories: Dict[str, Any]
    ) -> StateManagementService:
        """
        –°–æ–∑–¥–∞—Ç—å StateManagementService –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å–æ –≤—Å–µ–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        
        Args:
            config: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            all_repositories: –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π StateManagementService
        """
        try:
            state_manager = StateManagerFactory.create_state_manager(
                config=config,
                deals_repo=all_repositories.get('deals'),
                orders_repo=all_repositories.get('orders'),
                statistics_repo=all_repositories.get('statistics'),
                config_repo=all_repositories.get('configuration'),
                db_manager=all_repositories.get('db_manager')
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            state_config = config.get('state_management', {})
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            if 'snapshot_interval_seconds' in state_config:
                state_manager.snapshot_interval_seconds = state_config['snapshot_interval_seconds']
            
            logger.info("üöÄ Production StateManagementService created")
            return state_manager
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create production StateManagementService: {e}")
            raise
    
    @staticmethod
    def validate_state_manager_config(config: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è StateManagementService
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
        """
        result = {
            'valid': True,
            'errors': [],
            'warnings': []
        }
        
        try:
            state_config = config.get('state_management', {})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo_type = state_config.get('repository_type', 'in_memory')
            if repo_type not in ['in_memory', 'database']:
                result['errors'].append(f"Invalid repository_type: {repo_type}")
                result['valid'] = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–Ω–∏–º–∫–æ–≤
            snapshot_config = state_config.get('snapshots', {})
            if 'interval_seconds' in snapshot_config:
                interval = snapshot_config['interval_seconds']
                if not isinstance(interval, int) or interval < 60:
                    result['errors'].append("snapshot interval_seconds must be integer >= 60")
                    result['valid'] = False
                elif interval < 300:
                    result['warnings'].append("snapshot interval < 5 minutes may impact performance")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏
            cleanup_config = state_config.get('cleanup', {})
            if 'snapshots_days_to_keep' in cleanup_config:
                days = cleanup_config['snapshots_days_to_keep']
                if not isinstance(days, int) or days < 1:
                    result['errors'].append("snapshots_days_to_keep must be integer >= 1")
                    result['valid'] = False
                elif days < 7:
                    result['warnings'].append("keeping snapshots < 7 days may limit recovery options")
            
            return result
            
        except Exception as e:
            result['valid'] = False
            result['errors'].append(f"Config validation error: {e}")
            return result