import math
from decimal import Decimal, ROUND_DOWN, ROUND_UP, ROUND_HALF_UP, InvalidOperation, getcontext
from typing import Dict, List, Optional, Tuple
import talib
import numpy as np
from talib import MA_Type

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å:
from domain.services.indicators.cached_indicator_service import CachedIndicatorService
from domain.entities.ticker import Ticker
from infrastructure.repositories.tickers_repository import InMemoryTickerRepository

# üÜï –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –°–¢–ê–ö–ê–ù–ê
from domain.services.market_data.orderbook_analyzer import OrderBookMetrics


def round_to_step(value: Decimal, step: Decimal) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç —á–∏—Å–ª–æ value –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —à–∞–≥–∞ step (–ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º).
    """
    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ "—à–∞–≥–æ–≤" —É–º–µ—â–∞–µ—Ç—Å—è, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ, —É–º–Ω–æ–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    steps = (value / step).quantize(Decimal("1"), rounding=ROUND_HALF_UP)
    return steps * step


def floor_to_step(value: Decimal, step: Decimal) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç —á–∏—Å–ª–æ value –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —à–∞–≥–∞ step.
    """
    steps = (value / step).to_integral_value(rounding=ROUND_DOWN)
    return steps * step


class TickerService:
    def __init__(self, repository: InMemoryTickerRepository):
        self.repository = repository
        self.cached_indicators = CachedIndicatorService()  # üÜï –î–æ–±–∞–≤–ª—è–µ–º –∫–µ—à
        self.price_history_cache = []  # üÜï –ö–µ—à –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
        self.volatility_window = 20

    async def process_ticker(self, data: Dict):
        """üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ä–∞"""
        ticker = Ticker(data)
        current_price = float(data.get('close', 0))

        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
        self.price_history_cache.append(current_price)
        if len(self.price_history_cache) > 200:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            self.price_history_cache.pop(0)

        # 2. –ë—ã—Å—Ç—Ä—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∫–∞–∂–¥—ã–π —Ç–∏–∫)
        fast_signals = self.cached_indicators.update_fast_indicators(current_price)

        # 3. –°—Ä–µ–¥–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∫–∞–∂–¥—ã–µ 10 —Ç–∏–∫–æ–≤)
        medium_signals = {}
        if self.cached_indicators.should_update_medium():
            medium_signals = self.cached_indicators.update_medium_indicators(self.price_history_cache)

        # 4. –¢—è–∂–µ–ª—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∫–∞–∂–¥—ã–µ 50 —Ç–∏–∫–æ–≤)
        heavy_signals = {}
        if self.cached_indicators.should_update_heavy():
            heavy_signals = self.cached_indicators.update_heavy_indicators(self.price_history_cache)

        # 5. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        all_signals = self.cached_indicators.get_all_cached_signals()
        ticker.update_signals(all_signals)

        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ä
        self.repository.save(ticker)

    async def get_signal(self) -> str:
        """üéØ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–∏–∫–µ—Ä—ã –ë–ï–ó get_last_n –∫–∞–∂–¥—ã–π —Ä–∞–∑
        if len(self.repository.tickers) < 50:
            return "HOLD"

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä–æ–≤
        recent_tickers = self.repository.tickers[-5:]

        if not recent_tickers:
            return "HOLD"

        last_ticker = recent_tickers[-1]
        if not last_ticker.signals:
            return "HOLD"

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        hist = last_ticker.signals.get('histogram', 0)
        macd = last_ticker.signals.get('macd', 0)
        signal = last_ticker.signals.get('signal', 0)
        sma_7 = last_ticker.signals.get('sma_7', 0)
        sma_25 = last_ticker.signals.get('sma_25', 0)

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
        macd_bullish = macd > signal
        sma_bullish = sma_7 > sma_25 if sma_25 > 0 else False
        hist_positive = hist > 0

        if macd_bullish and sma_bullish and hist_positive:
            return "BUY"
        else:
            return "HOLD"

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–†–û–í–ï–†–ö–ò MACD
    def get_macd_signal_data(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö MACD –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–∫–∞–Ω–æ–º"""
        if len(self.repository.tickers) < 50:
            return None

        last_ticker = self.repository.tickers[-1]
        if not last_ticker.signals:
            return None

        macd = last_ticker.signals.get('macd', 0)
        signal = last_ticker.signals.get('signal', 0)
        hist = last_ticker.signals.get('histogram', 0)

        return {
            'macd': macd,
            'signal': signal,
            'histogram': hist,
            'is_bullish': macd > signal and hist > 0
        }

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î
    def analyze_market_conditions(self) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
        if len(self.price_history_cache) < self.volatility_window:
            return "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ü–µ–Ω
        recent_prices = self.price_history_cache[-self.volatility_window:]

        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        price_changes = []
        for i in range(1, len(recent_prices)):
            change = abs(recent_prices[i] - recent_prices[i - 1]) / recent_prices[i - 1]
            price_changes.append(change)

        # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        avg_volatility = sum(price_changes) / len(price_changes) * 100

        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if avg_volatility > 0.15:
            return f"üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({avg_volatility:.3f}%) - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!"
        elif avg_volatility > 0.08:
            return f"‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({avg_volatility:.3f}%) - –ê–∫—Ç–∏–≤–Ω—ã–π —Ä—ã–Ω–æ–∫"
        elif avg_volatility > 0.03:
            return f"üìä –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({avg_volatility:.3f}%) - –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫"
        else:
            return f"üò¥ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({avg_volatility:.3f}%) - –°–ø–æ–∫–æ–π–Ω—ã–π —Ä—ã–Ω–æ–∫"

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î
    def get_price_trend(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω—ã"""
        if len(self.price_history_cache) < 10:
            return "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"

        recent_prices = self.price_history_cache[-10:]
        first_price = recent_prices[0]
        last_price = recent_prices[-1]

        change_percent = (last_price - first_price) / first_price * 100

        if change_percent > 0.5:
            return f"üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (+{change_percent:.2f}%)"
        elif change_percent < -0.5:
            return f"üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ({change_percent:.2f}%)"
        else:
            return f"‚û°Ô∏è –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥ ({change_percent:.2f}%)"

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î
    def should_trade_by_volatility(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if len(self.price_history_cache) < self.volatility_window:
            return False

        recent_prices = self.price_history_cache[-self.volatility_window:]
        price_changes = [abs(recent_prices[i] - recent_prices[i - 1]) / recent_prices[i - 1]
                         for i in range(1, len(recent_prices))]
        avg_volatility = sum(price_changes) / len(price_changes) * 100

        # –¢–æ—Ä–≥—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        return 0.03 <= avg_volatility <= 0.12

    def calculate_strategy_with_orderbook(
            self,
            buy_price: float,  # –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)
            budget: float,  # –ë—é–¥–∂–µ—Ç –≤ USDT
            min_step: float,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç –º–æ–Ω–µ—Ç—ã (1 –¥–ª—è —Ü–µ–ª—ã—Ö, 0.00001 –¥–ª—è BTC –∏ —Ç.–¥.)
            price_step: float,  # –®–∞–≥ —Ü–µ–Ω—ã (0.00001, 0.001, ...)
            buy_fee_percent: float,  # –ö–æ–º–∏—Å—Å–∏—è –ø–æ–∫—É–ø–∫–∞ (%)
            sell_fee_percent: float,  # –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ–¥–∞–∂–∞ (%)
            profit_percent: float,  # –ñ–µ–ª–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å (%)
            orderbook_modifications: Optional[Dict] = None  # üÜï –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç —Å—Ç–∞–∫–∞–Ω–∞
    ):
        """
        üÜï –£–õ–£–ß–®–ï–ù–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–∫–∞–Ω–∞
        """

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç —Å—Ç–∞–∫–∞–Ω–∞
        entry_price = buy_price
        budget_multiplier = 1.0
        target_price_hint = None

        if orderbook_modifications:
            if 'entry_price' in orderbook_modifications:
                entry_price = orderbook_modifications['entry_price']
            if 'budget_multiplier' in orderbook_modifications:
                budget_multiplier = orderbook_modifications['budget_multiplier']
            if 'exit_price_hint' in orderbook_modifications:
                target_price_hint = orderbook_modifications['exit_price_hint']

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±—é–¥–∂–µ—Ç
        adjusted_budget = budget * budget_multiplier

        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        strategy_result = self.calculate_strategy(
            buy_price=entry_price,
            budget=adjusted_budget,
            min_step=min_step,
            price_step=price_step,
            buy_fee_percent=buy_fee_percent,
            sell_fee_percent=sell_fee_percent,
            profit_percent=profit_percent
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω–µ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if target_price_hint and isinstance(strategy_result, tuple):
            buy_price_calc, total_coins_needed, sell_price_calc, coins_to_sell, info_dict = strategy_result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–≥–æ–¥–Ω–µ–µ –ª–∏ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞
            if target_price_hint > float(sell_price_calc):
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –Ω–æ–≤–æ–π —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π
                new_revenue = float(coins_to_sell) * target_price_hint
                new_profit = new_revenue - (float(total_coins_needed) * float(buy_price_calc))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                strategy_result = (
                    buy_price_calc,
                    total_coins_needed,
                    Decimal(str(target_price_hint)),
                    coins_to_sell,
                    {
                        **info_dict,
                        "üîπ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞–∫–∞–Ω—É)": f"{target_price_hint} USDT",
                        "üîπ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ (—Å —É—á–µ—Ç–æ–º —Å—Ç–∞–∫–∞–Ω–∞)": f"{new_revenue:.4f} USDT",
                        "üîπ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (—Å —É—á–µ—Ç–æ–º —Å—Ç–∞–∫–∞–Ω–∞)": f"{new_profit:.4f} USDT"
                    }
                )

        return strategy_result

    def calculate_strategy(
            self, buy_price,  # –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)
            budget,  # –ë—é–¥–∂–µ—Ç –≤ USDT
            min_step,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç –º–æ–Ω–µ—Ç—ã (1 –¥–ª—è —Ü–µ–ª—ã—Ö, 0.00001 –¥–ª—è BTC –∏ —Ç.–¥.)
            price_step,  # –®–∞–≥ —Ü–µ–Ω—ã (0.00001, 0.001, ...)
            buy_fee_percent,  # –ö–æ–º–∏—Å—Å–∏—è –ø–æ–∫—É–ø–∫–∞ (%)
            sell_fee_percent,  # –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ–¥–∞–∂–∞ (%)
            profit_percent  # –ñ–µ–ª–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å (%)
    ):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É —Å —É—á–µ—Ç–æ–º:
        - –ü–æ–∫—É–ø–∫–∏ —á—É—Ç—å –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç (—É—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–æ–¥–∞–∂–∏).
        - –ö–æ–º–∏—Å—Å–∏–∏ –ø–æ–∫—É–ø–∫–∏ (—Å—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 –º–æ–Ω–µ—Ç—ã).
        - –ü—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å >= 0.5% –æ—Ç –±—é–¥–∂–µ—Ç–∞.
        - –®–∞–≥–æ–≤ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è (–º–∏–Ω. –ª–æ—Ç, —à–∞–≥ —Ü–µ–Ω—ã).

        –í–æ–∑–≤—Ä–∞—â–∞–µ–º tuple (buy_price, total_coins_needed, sell_price, X_sell, info_dict)
        –õ–∏–±–æ {"comment": "..."} –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.
        """

        # 0) –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ Decimal
        buy_price = Decimal(str(buy_price))
        budget = Decimal(str(budget))
        min_step = Decimal(str(min_step))
        price_step = Decimal(str(price_step))
        buy_fee_percent = Decimal(str(buy_fee_percent))
        sell_fee_percent = Decimal(str(sell_fee_percent))
        profit_percent = Decimal(str(profit_percent))

        # 1) –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (buy_price <= 0 or budget <= 0 or
                min_step <= 0 or price_step <= 0):
            return {"comment": "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."}

        # 2) –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ c —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ (–¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ USDT)
        buy_price_with_fee = buy_price * (1 + buy_fee_percent / 100)
        # –û–∫—Ä—É–≥–ª–∏–º —Ü–µ–Ω—É –≤–Ω–∏–∑ –ø–æ price_step, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –±—é–¥–∂–µ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
        buy_price_with_fee = Decimal(str(round_to_step(buy_price_with_fee, price_step)))

        # 3) –ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π).
        #    –ù–æ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–æ–Ω–µ—Ç, –∞ –Ω–µ —Ü–µ–Ω–æ–π.
        sell_price_raw = buy_price * (1 + profit_percent / 100)
        sell_price = Decimal(str(round_to_step(sell_price_raw, price_step)))

        # 4) –°—á–∏—Ç–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ X (–∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ–¥–∞–¥–∏–º)
        #    –£ –Ω–∞—Å –µ—Å—Ç—å budget USDT, 1 –º–æ–Ω–µ—Ç–∞ —Å—Ç–æ–∏—Ç buy_price_with_fee,
        #    –∞ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è –º–æ–Ω–µ—Ç–æ–π => –∫—É–ø–ª–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã * (1 - sell_fee)
        raw_max_x = (budget / buy_price_with_fee) * (1 - sell_fee_percent / 100)

        # –û–∫—Ä—É–≥–ª–∏–º X –≤–Ω–∏–∑ –¥–æ min_step
        X_adjusted = Decimal(str(floor_to_step(raw_max_x, min_step)))
        if X_adjusted <= 0:
            return {"comment": "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥"}

        # 5) –ß—Ç–æ–±—ã –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –æ—Å—Ç–∞–ª–æ—Å—å X_adjusted, –Ω–∞–¥–æ –∫—É–ø–∏—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ:
        # total_coins_needed = X_adjusted / (1 - sell_fee)
        total_coins_needed = X_adjusted / (1 - sell_fee_percent / 100)
        # –û–∫—Ä—É–≥–ª–∏–º –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç –ø–æ min_step (–æ–±—ã—á–Ω–æ –µ—Å–ª–∏ lotSize=1, —Ç–æ —Ü–µ–ª—ã–µ).
        total_coins_needed = Decimal(str(floor_to_step(total_coins_needed, min_step)))

        # 6) –°–∫–æ–ª—å–∫–æ USDT —É–π–¥–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É —ç—Ç–∏—Ö –º–æ–Ω–µ—Ç
        total_usdt_needed = total_coins_needed * buy_price_with_fee
        # –û–∫—Ä—É–≥–ª–∏–º –ø–æ price_step, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å budget
        total_usdt_needed = Decimal(str(round_to_step(total_usdt_needed, price_step)))

        if total_usdt_needed > budget:
            return {"comment": "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±—é–¥–∂–µ—Ç–∞, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω—É–∂–Ω—ã–π –æ–±—ä—ë–º"}

        # 7) –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ X_adjusted –º–æ–Ω–µ—Ç –ø–æ sell_price
        final_revenue = X_adjusted * sell_price
        final_revenue = Decimal(str(round_to_step(final_revenue, price_step)))

        # 8) –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        net_profit = final_revenue - total_usdt_needed

        # 9) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å (‚â• 0.5% –æ—Ç –±—é–¥–∂–µ—Ç–∞)
        min_required_profit = budget * Decimal("0.005")  # 0.5%
        if net_profit < min_required_profit:
            return {"comment": f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å. –ù—É–∂–Ω–æ ‚â• {min_required_profit:.6f} USDT"}

        # 10) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ ¬´–∫—Ä–∞—Å–∏–≤–æ–º¬ª –≤–∏–¥–µ, –∫–∞–∫ —É –≤–∞—Å
        return (
            buy_price,  # 0
            total_coins_needed,  # 1
            sell_price,  # 2
            X_adjusted,  # 3
            {
                "comment": "‚úÖ –°–¥–µ–ª–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞.",
                "üîπ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–∏—Å—Ö–æ–¥–Ω–∞—è)": f"{buy_price} USDT",
                "üîπ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)": f"{buy_price_with_fee} USDT",
                "üîπ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è)": f"{sell_price} USDT",
                "üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã": f"{price_step} USDT",
                "üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –∞–∫—Ç–∏–≤–∞": f"{min_step} –º–æ–Ω–µ—Ç",
                "üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏": f"{X_adjusted} –º–æ–Ω–µ—Ç",
                "üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏": f"{total_coins_needed} –º–æ–Ω–µ—Ç",
                "üîπ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ—Ç—Ä–∞—Ç–∏–º": f"{total_usdt_needed} USDT",
                "üîπ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥": f"{final_revenue} USDT",
                "üîπ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": f"{net_profit} USDT"
            }
        )
