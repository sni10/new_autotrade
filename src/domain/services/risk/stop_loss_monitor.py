# domain/services/risk/stop_loss_monitor.py
import asyncio
import logging
from typing import Dict, Optional

from src.domain.services.deals.deal_service import DealService
from src.domain.services.orders.order_execution_service import OrderExecutionService
from src.infrastructure.connectors.exchange_connector import CcxtExchangeConnector
from src.domain.services.market_data.orderbook_analyzer import OrderBookAnalyzer, OrderBookSignal

logger = logging.getLogger(__name__)


class StopLossMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç stop-loss –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã.
    """

    def __init__(
        self,
        deal_service: DealService,
        order_execution_service: OrderExecutionService,
        exchange_connector: CcxtExchangeConnector,
        orderbook_analyzer: OrderBookAnalyzer,
        stop_loss_percent: float,
        check_interval_seconds: int,
        warning_percent: float = 5.0,
        critical_percent: float = 10.0,
        emergency_percent: float = 15.0,
    ):
        self.deal_service = deal_service
        self.order_execution_service = order_execution_service
        self.exchange_connector = exchange_connector
        self.orderbook_analyzer = orderbook_analyzer
        self.stop_loss_percent = stop_loss_percent
        self.warning_percent = warning_percent
        self.critical_percent = critical_percent
        self.emergency_percent = emergency_percent
        self.check_interval_seconds = check_interval_seconds
        self._is_running = False
        self._warned_deals = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        self._stats = {
            "checks_performed": 0,
            "warnings_sent": 0,
            "support_breaks": 0,
            "emergency_liquidations": 0,
            "stop_loss_triggered": 0,
        }

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
        self._is_running = True
        logger.info(f"üöÄ StopLossMonitor –∑–∞–ø—É—â–µ–Ω —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–∫–∞–Ω–∞:")
        logger.info(f"   - {self.warning_percent}% –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        logger.info(f"   - {self.critical_percent}% –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏ support_level")
        logger.info(f"   - {self.emergency_percent}% –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è")
        logger.info(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval_seconds} —Å–µ–∫.")
        while self._is_running:
            await self.check_open_deals()
            await asyncio.sleep(self.check_interval_seconds)

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        self._is_running = False
        logger.info("üî¥ StopLossMonitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def check_open_deals(self, current_price: float = None, cached_orderbook: dict = None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è stop-loss —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–∫–∞–Ω–∞."""
        self._stats["checks_performed"] += 1
        open_deals = self.deal_service.get_open_deals()

        for deal in open_deals:
            if not deal.buy_order or not deal.buy_order.is_filled():
                continue

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å –±–∏—Ä–∂–∏
                if current_price is None:
                    ticker = await self.exchange_connector.fetch_ticker(deal.currency_pair_id)
                    price = ticker['last']
                else:
                    price = current_price
                    
                entry_price = deal.buy_order.price
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞–∫–∞–Ω –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
                if cached_orderbook is not None:
                    orderbook_metrics = self.orderbook_analyzer.analyze_orderbook(cached_orderbook)
                else:
                    orderbook = await self.exchange_connector.fetch_order_book(deal.currency_pair_id)
                    orderbook_metrics = self.orderbook_analyzer.analyze_orderbook(orderbook)

                price_drop_percent = ((entry_price - price) / entry_price) * 100

                # –£—Ä–æ–≤–µ–Ω—å 1: -5% –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                if price_drop_percent >= self.warning_percent:
                    await self._handle_warning_level(deal, price_drop_percent, orderbook_metrics)
                
                # –£—Ä–æ–≤–µ–Ω—å 2: -10% –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏ support_level
                if price_drop_percent >= self.critical_percent:
                    await self._handle_critical_level(deal, price_drop_percent, price, orderbook_metrics)
                
                # –£—Ä–æ–≤–µ–Ω—å 3: -15% –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è
                if price_drop_percent >= self.emergency_percent:
                    await self._handle_emergency_level(deal, price_drop_percent, orderbook_metrics)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ stop-loss –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal.deal_id}: {e}")

    async def _handle_warning_level(self, deal, price_drop_percent: float, orderbook_metrics):
        """–£—Ä–æ–≤–µ–Ω—å 1: -5% –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        if deal.deal_id not in self._warned_deals:
            support_info = ""
            if orderbook_metrics.support_level:
                support_info = f" | –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {orderbook_metrics.support_level:.6f}"
            
            logger.warning(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü—Ä–æ—Å–∞–¥–∫–∞ {price_drop_percent:.2f}% –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal.deal_id}{support_info}")
            logger.warning(f"   –î–∏—Å–±–∞–ª–∞–Ω—Å –æ–±—ä–µ–º–æ–≤: {orderbook_metrics.volume_imbalance:.1f}%")
            
            self._warned_deals.add(deal.deal_id)
            self._stats["warnings_sent"] += 1

    async def _handle_critical_level(self, deal, price_drop_percent: float, current_price: float, orderbook_metrics):
        """–£—Ä–æ–≤–µ–Ω—å 2: -10% –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏ support_level"""
        support_broken = False
        
        if orderbook_metrics.support_level and current_price <= orderbook_metrics.support_level:
            support_broken = True
            logger.error(f"üî¥ –ü–†–û–ë–ò–¢–ò–ï –ü–û–î–î–ï–†–ñ–ö–ò! –¶–µ–Ω–∞ {current_price:.6f} <= –ø–æ–¥–¥–µ—Ä–∂–∫–∞ {orderbook_metrics.support_level:.6f}")
            self._stats["support_breaks"] += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–∞
        critical_conditions = [
            support_broken,
            orderbook_metrics.volume_imbalance < -20,  # –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ–¥–∞–∂
            orderbook_metrics.signal == OrderBookSignal.STRONG_SELL,
            orderbook_metrics.slippage_sell > 2.0  # –í—ã—Å–æ–∫–∏–π —Å–ª–∏–ø–ø–µ–¥–∂
        ]
        
        if any(critical_conditions):
            logger.error(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨! –°–¥–µ–ª–∫–∞ #{deal.deal_id} - –ø—Ä–æ—Å–∞–¥–∫–∞ {price_drop_percent:.2f}%")
            logger.error(f"   –£—Å–ª–æ–≤–∏—è: support_broken={support_broken}, imbalance={orderbook_metrics.volume_imbalance:.1f}%")
            await self._create_market_sell_order(deal)
            self._stats["stop_loss_triggered"] += 1

    async def _handle_emergency_level(self, deal, price_drop_percent: float, orderbook_metrics):
        """–£—Ä–æ–≤–µ–Ω—å 3: -15% –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è"""
        logger.critical(f"üÜò –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –õ–ò–ö–í–ò–î–ê–¶–ò–Ø! –°–¥–µ–ª–∫–∞ #{deal.deal_id} - –ø—Ä–æ—Å–∞–¥–∫–∞ {price_drop_percent:.2f}%")
        logger.critical(f"   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø–æ —Ä—ã–Ω–∫—É!")
        
        await self._create_market_sell_order(deal, force=True)
        self._stats["emergency_liquidations"] += 1
        self._stats["stop_loss_triggered"] += 1

    async def _create_market_sell_order(self, deal, force: bool = False):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–ª—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if deal.buy_order and deal.buy_order.is_filled():
                # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏–º–∏—Ç–Ω—ã–π sell-–æ—Ä–¥–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
                if deal.sell_order and not deal.sell_order.is_filled():
                    await self.order_execution_service.cancel_order(deal.sell_order)
                    logger.info(f"–û—Ç–º–µ–Ω–µ–Ω –ª–∏–º–∏—Ç–Ω—ã–π SELL –æ—Ä–¥–µ—Ä –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal.deal_id}")
                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                filled_amount = deal.buy_order.filled_amount
                
                market_sell_order = await self.order_execution_service.create_market_sell_order(
                    deal.currency_pair_id,
                    filled_amount,
                    deal.deal_id
                )
                
                if market_sell_order:
                    deal.sell_order = market_sell_order
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ä–∫–µ—Ç SELL –æ—Ä–¥–µ—Ä #{market_sell_order.order_id} –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal.deal_id}")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                    await self.deal_service.close_deal(deal)
                    logger.info(f"–°–¥–µ–ª–∫–∞ #{deal.deal_id} –∑–∞–∫—Ä—ã—Ç–∞ {'–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ' if force else '–ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É'}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal.deal_id}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal.deal_id}: {e}")
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
            await self.deal_service.close_deal(deal)

    async def trigger_stop_loss(self, deal):
        """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.warning(f"üö® –í—ã–∑–≤–∞–Ω —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ trigger_stop_loss –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal.deal_id}")
        await self._create_market_sell_order(deal)

    def get_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞."""
        return self._stats
