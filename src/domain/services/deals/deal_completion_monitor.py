# src/domain/services/deals/deal_completion_monitor.py
import asyncio
import logging
import time
from typing import List

from domain.services.deals.deal_service import DealService
from domain.services.orders.order_service import OrderService
from domain.entities.deal import Deal
from domain.entities.order import Order

logger = logging.getLogger(__name__)

class DealCompletionMonitor:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –æ–±–∞ –æ—Ä–¥–µ—Ä–∞ (BUY –∏ SELL) –≤ —Ä–∞–º–∫–∞—Ö –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏,
    –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫—É –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.
    """

    def __init__(self, deal_service: DealService, order_service: OrderService, check_interval_seconds: int = 30, grace_period_seconds: int = 60):
        self.deal_service = deal_service
        self.order_service = order_service
        self.check_interval_seconds = check_interval_seconds
        self.grace_period_seconds = grace_period_seconds
        self.stats = {
            "checks_performed": 0,
            "deals_monitored": 0,
            "deals_completed": 0,
            "sell_orders_placed": 0,
            "sync_operations": 0,
        }
        self._is_running = False

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
        self._is_running = True
        logger.info(f"üöÄ DealCompletionMonitor –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval_seconds}—Å)")
        while self._is_running:
            await self.check_deals_completion()
            await asyncio.sleep(self.check_interval_seconds)

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        self._is_running = False
        logger.info("üî¥ DealCompletionMonitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def check_deals_completion(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
        """
        self.stats["checks_performed"] += 1
        open_deals = self.deal_service.get_open_deals()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: deals_monitored –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        current_open_deals = len(open_deals)
        self.stats["deals_monitored"] = current_open_deals
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–¥–µ–ª–æ–∫
        if "max_deals_monitored" not in self.stats:
            self.stats["max_deals_monitored"] = 0
        self.stats["max_deals_monitored"] = max(self.stats["max_deals_monitored"], current_open_deals)

        if not open_deals:
            return

        logger.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(open_deals)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫...")

        for deal in open_deals:
            try:
                await self._check_single_deal(deal)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–¥–µ–ª–∫–∏ {deal.deal_id}: {e}", exc_info=True)

    async def _check_single_deal(self, deal: Deal):
        """–ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –±–∏—Ä–∂–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
            deal_orders = self.order_service.orders_repo.get_orders_by_deal(deal.deal_id)
            
            if not deal_orders:
                logger.warning(f"–°–¥–µ–ª–∫–∞ {deal.deal_id} –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞ –Ω–∞ BUY –∏ SELL
            buy_orders = [order for order in deal_orders if order.side.upper() == 'BUY']
            sell_orders = [order for order in deal_orders if order.side.upper() == 'SELL']
            
            if not buy_orders or not sell_orders:
                logger.debug(f"–°–¥–µ–ª–∫–∞ {deal.deal_id}: BUY –æ—Ä–¥–µ—Ä–æ–≤: {len(buy_orders)}, SELL –æ—Ä–¥–µ—Ä–æ–≤: {len(sell_orders)}. –û–∂–∏–¥–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞.")
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (–æ–±—ã—á–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
            buy_order = buy_orders[0]
            sell_order = sell_orders[0]
            
            # –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å –±–∏—Ä–∂–∏ –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –Ω–æ —Å —É—á–µ—Ç–æ–º grace period
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç buy –æ—Ä–¥–µ—Ä–∞
            buy_age_seconds = self._get_order_age_seconds(buy_order)
            if buy_age_seconds < self.grace_period_seconds:
                logger.debug(f"‚è≥ BUY {buy_order.order_id}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ (–≤–æ–∑—Ä–∞—Å—Ç {buy_age_seconds:.1f}—Å < {self.grace_period_seconds}—Å)")
                updated_buy = buy_order  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            else:
                updated_buy = await self.order_service.get_order_status(buy_order)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç sell –æ—Ä–¥–µ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –Ω–∞ –±–∏—Ä–∂–µ)
            if sell_order.exchange_id:
                sell_age_seconds = self._get_order_age_seconds(sell_order)
                if sell_age_seconds < self.grace_period_seconds:
                    logger.debug(f"‚è≥ SELL {sell_order.order_id}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ (–≤–æ–∑—Ä–∞—Å—Ç {sell_age_seconds:.1f}—Å < {self.grace_period_seconds}—Å)")
                    updated_sell = sell_order  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                else:
                    updated_sell = await self.order_service.get_order_status(sell_order)
            else:
                updated_sell = sell_order
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–∫–∏
            buy_fill = updated_buy.get_fill_percentage() if hasattr(updated_buy, 'get_fill_percentage') else 0.0
            sell_fill = updated_sell.get_fill_percentage() if hasattr(updated_sell, 'get_fill_percentage') else 0.0
            
            logger.info(f"üìà –°–î–ï–õ–ö–ê {deal.deal_id}: "
                       f"BUY[{updated_buy.status}, {buy_fill:.1%}] | "
                       f"SELL[{updated_sell.status}, {sell_fill:.1%}]")
            
            # –ê–ö–¢–ò–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø: –†–∞–∑–º–µ—â–∞–µ–º SELL –æ—Ä–¥–µ—Ä –∫–æ–≥–¥–∞ BUY –∏—Å–ø–æ–ª–Ω–µ–Ω
            if updated_buy.is_filled() and updated_sell.status == 'PENDING':
                logger.info(f"üéØ BUY –∏—Å–ø–æ–ª–Ω–µ–Ω! –†–∞–∑–º–µ—â–∞–µ–º SELL –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ...")
                result = await self.order_service.place_existing_order(updated_sell)
                if result.success:
                    logger.info(f"‚úÖ SELL –æ—Ä–¥–µ—Ä {updated_sell.order_id} —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ")
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä—è–º–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ–∑ .get()
                    self.stats["sell_orders_placed"] += 1
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å SELL: {result.error_message}")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
            if updated_buy.is_filled() and updated_sell.is_filled():
                logger.info(f"üéâ –°–î–ï–õ–ö–ê {deal.deal_id} –ó–ê–í–ï–†–®–ï–ù–ê!")
                self.deal_service.close_deal(deal.deal_id)
                self.stats["deals_completed"] += 1
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ {deal.deal_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
            else:
                # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É —Å–¥–µ–ª–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                buy_filled = updated_buy.is_filled()
                sell_filled = updated_sell.is_filled()
                logger.debug(f"üîç –°–î–ï–õ–ö–ê {deal.deal_id} –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê: "
                           f"BUY –∑–∞–ø–æ–ª–Ω–µ–Ω: {buy_filled}, SELL –∑–∞–ø–æ–ª–Ω–µ–Ω: {sell_filled}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö
                if not buy_filled:
                    logger.debug(f"   BUY –æ—Ä–¥–µ—Ä {updated_buy.order_id}: —Å—Ç–∞—Ç—É—Å={updated_buy.status}, filled={getattr(updated_buy, 'filled', 'N/A')}")
                if not sell_filled:
                    logger.debug(f"   SELL –æ—Ä–¥–µ—Ä {updated_sell.order_id}: —Å—Ç–∞—Ç—É—Å={updated_sell.status}, filled={getattr(updated_sell, 'filled', 'N/A')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏ {deal.deal_id}: {e}", exc_info=True)

    def get_statistics(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞."""
        return self.stats

    def _get_order_age_seconds(self, order: Order) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –æ—Ä–¥–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        try:
            current_time = int(time.time() * 1000)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ created_at –∫ int (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
            if hasattr(order.created_at, 'timestamp'):
                # –ï—Å–ª–∏ —ç—Ç–æ pandas Timestamp, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                created_at_ms = int(order.created_at.timestamp() * 1000)
            elif isinstance(order.created_at, (int, float)):
                # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                created_at_ms = int(order.created_at)
            else:
                # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 (–æ—Ä–¥–µ—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º)
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø created_at –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {type(order.created_at)}")
                return 0.0
            
            age_seconds = (current_time - created_at_ms) / 1000
            return max(0.0, age_seconds)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
            return 0.0
