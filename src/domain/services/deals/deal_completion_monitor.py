# src/domain/services/deals/deal_completion_monitor.py
import asyncio
import logging
from typing import List

from domain.services.deals.deal_service import DealService
from domain.services.orders.order_service import OrderService
from domain.entities.deal import Deal
from domain.entities.order import Order

logger = logging.getLogger(__name__)

class DealCompletionMonitor:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –æ–±–∞ –æ—Ä–¥–µ—Ä–∞ (BUY –∏ SELL) –≤ —Ä–∞–º–∫–∞—Ö –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏,
    –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫—É –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.
    """

    def __init__(self, deal_service: DealService, order_service: OrderService, check_interval_seconds: int = 30):
        self.deal_service = deal_service
        self.order_service = order_service
        self.check_interval_seconds = check_interval_seconds
        self.stats = {
            "checks_performed": 0,
            "deals_monitored": 0,
            "deals_completed": 0,
        }
        self._is_running = False

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
        self._is_running = True
        logger.info(f"üöÄ DealCompletionMonitor –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval_seconds}—Å)")
        while self._is_running:
            await self.check_deals_completion()
            await asyncio.sleep(self.check_interval_seconds)

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        self._is_running = False
        logger.info("üî¥ DealCompletionMonitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def check_deals_completion(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
        """
        self.stats["checks_performed"] += 1
        open_deals = self.deal_service.get_open_deals()
        self.stats["deals_monitored"] = len(open_deals)

        if not open_deals:
            return

        logger.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(open_deals)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫...")

        for deal in open_deals:
            try:
                await self._check_single_deal(deal)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–¥–µ–ª–∫–∏ {deal.deal_id}: {e}", exc_info=True)

    async def _check_single_deal(self, deal: Deal):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å–¥–µ–ª–∫—É."""
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –ø–æ deal_id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        # –≤–º–µ—Å—Ç–æ –ø–æ–ª–∞–≥–∞–Ω–∏—è –Ω–∞ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –æ–±—ä–µ–∫—Ç–µ Deal
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
            deal_orders = self.order_service.orders_repo.get_orders_by_deal(deal.deal_id)
            
            if not deal_orders:
                logger.warning(f"–°–¥–µ–ª–∫–∞ {deal.deal_id} –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞ –Ω–∞ BUY –∏ SELL
            buy_orders = [order for order in deal_orders if order.side.upper() == 'BUY']
            sell_orders = [order for order in deal_orders if order.side.upper() == 'SELL']
            
            if not buy_orders or not sell_orders:
                logger.debug(f"–°–¥–µ–ª–∫–∞ {deal.deal_id}: BUY –æ—Ä–¥–µ—Ä–æ–≤: {len(buy_orders)}, SELL –æ—Ä–¥–µ—Ä–æ–≤: {len(sell_orders)}. –û–∂–∏–¥–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞.")
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (–æ–±—ã—á–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
            buy_order = buy_orders[0]
            sell_order = sell_orders[0]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Å–¥–µ–ª–∫–µ
            logger.info(
                f"DEAL_STATUS | DealID: {deal.deal_id} | "
                f"BUY: {buy_order.order_id} [{buy_order.status}, {buy_order.get_fill_percentage():.0%}] | "
                f"SELL: {sell_order.order_id} [{sell_order.status}, {sell_order.get_fill_percentage():.0%}]"
            )

            # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: –æ–±–∞ –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω—ã
            if buy_order.is_filled() and sell_order.is_filled():
                logger.info(f"üéâ –°–¥–µ–ª–∫–∞ {deal.deal_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω–∞! –ó–∞–∫—Ä—ã–≤–∞–µ–º...")
                self.deal_service.close_deal(deal.deal_id)
                self.stats["deals_completed"] += 1
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ {deal.deal_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal.deal_id}: {e}", exc_info=True)

    def get_statistics(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞."""
        return self.stats
