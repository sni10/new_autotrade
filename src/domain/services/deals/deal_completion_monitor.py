# domain/services/deals/deal_completion_monitor.py
import asyncio
import logging
from typing import List

from src.domain.services.deals.deal_service import DealService

logger = logging.getLogger(__name__)


class DealCompletionMonitor:
    """
    üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏—Ö
    –∫–æ–≥–¥–∞ –æ–±–∞ –æ—Ä–¥–µ—Ä–∞ (BUY –∏ SELL) –∏—Å–ø–æ–ª–Ω–µ–Ω—ã.
    """

    def __init__(
        self,
        deal_service: DealService,
        check_interval_seconds: int = 30
    ):
        self.deal_service = deal_service
        self.check_interval_seconds = check_interval_seconds
        self.running = False
        self.stats = {
            'checks_performed': 0,
            'deals_completed': 0,
            'deals_monitored': 0
        }

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ"""
        if self.running:
            logger.warning("‚ö†Ô∏è DealCompletionMonitor already running")
            return
            
        self.running = True
        logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval_seconds}—Å)")
        
        while self.running:
            try:
                await self.check_deal_completion()
                await asyncio.sleep(self.check_interval_seconds)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False
        logger.info("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def check_deal_completion(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        try:
            open_deals = self.deal_service.get_open_deals()
            
            if not open_deals:
                return
                
            self.stats['checks_performed'] += 1
            self.stats['deals_monitored'] = len(open_deals)
            
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(open_deals)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
            
            for deal in open_deals:
                completed = await self.deal_service.close_deal_if_completed(deal)
                if completed:
                    self.stats['deals_completed'] += 1
                    logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ {deal.deal_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'running': self.running,
            'check_interval_seconds': self.check_interval_seconds,
            **self.stats
        }

    def configure(self, check_interval_seconds: int = None):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if check_interval_seconds is not None:
            self.check_interval_seconds = check_interval_seconds
            
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {self.get_statistics()}")