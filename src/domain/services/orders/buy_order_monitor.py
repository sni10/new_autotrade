# domain/services/buy_order_monitor.py.new
import asyncio
import logging
import time
from typing import List, Optional, Tuple
from domain.entities.order import Order
from domain.services.orders.order_service import OrderService
from domain.services.deals.deal_service import DealService
from infrastructure.connectors.exchange_connector import CcxtExchangeConnector

logger = logging.getLogger(__name__)

class BuyOrderMonitor:
    """
    üïí –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ç—É—Ö—à–∏—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ BUY –æ—Ä–¥–µ—Ä–∞ –Ω–∞:
    - –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç)
    - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç —Ä—ã–Ω–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3%)
    
    –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ - –æ—Ç–º–µ–Ω—è–µ—Ç –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä –ø–æ –Ω–æ–≤–æ–π —Ü–µ–Ω–µ
    """

    def __init__(
        self,
        order_service: OrderService,
        deal_service: DealService, # ‚ùóÔ∏è –î–û–ë–ê–í–õ–ï–ù–û
        exchange_connector: CcxtExchangeConnector,
        max_age_minutes: float = 15.0,
        max_price_deviation_percent: float = 3.0,
        check_interval_seconds: int = 60
    ):
        self.order_service = order_service
        self.deal_service = deal_service # ‚ùóÔ∏è –î–û–ë–ê–í–õ–ï–ù–û
        self.exchange = exchange_connector
        self.max_age_minutes = max_age_minutes
        self.max_price_deviation_percent = max_price_deviation_percent
        self.check_interval_seconds = check_interval_seconds
        
        self.running = False
        self.stats = {
            'checks_performed': 0,
            'stale_orders_found': 0,
            'orders_cancelled': 0,
            'orders_recreated': 0
        }

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ"""
        if self.running:
            logger.warning("‚ö†Ô∏è BuyOrderMonitor already running")
            return
            
        self.running = True
        logger.info(f"üïí –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ BUY –æ—Ä–¥–µ—Ä–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval_seconds}—Å)")
        
        while self.running:
            try:
                await self.check_stale_buy_orders()
                await asyncio.sleep(self.check_interval_seconds)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ BUY –æ—Ä–¥–µ—Ä–æ–≤: {e}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—ÄÔøΩÔøΩ –æ—à–∏–±–∫–µ

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False
        logger.info("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ BUY –æ—Ä–¥–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def check_stale_buy_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—É—Ö–∞–Ω–∏–µ"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞
            self.stats['checks_performed'] += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            open_orders = self.order_service.get_open_orders()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ BUY –æ—Ä–¥–µ—Ä–∞
            buy_orders = [order for order in open_orders if order.side == Order.SIDE_BUY]
            
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(buy_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤ (–≤—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö: {len(open_orders)})")
            
            if not buy_orders:
                logger.debug("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return
            
            for order in buy_orders:
                is_stale, reason = await self._is_order_stale(order)
                if is_stale:
                    await self._handle_stale_buy_order(order)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ BUY –æ—Ä–¥–µ—Ä–æ–≤: {e}")

    async def _is_order_stale(self, order: Order) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Ç—É—Ö –ª–∏ BUY –æ—Ä–¥–µ—Ä"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
            current_time = int(time.time() * 1000)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ created_at –∫ int (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
            if hasattr(order.created_at, 'timestamp'):
                # –ï—Å–ª–∏ —ç—Ç–æ pandas Timestamp, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                created_at_ms = int(order.created_at.timestamp() * 1000)
            elif isinstance(order.created_at, (int, float)):
                # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                created_at_ms = int(order.created_at)
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–æ—Ä–¥–µ—Ä –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–æ–≤—ã–º)
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø created_at –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {type(order.created_at)}")
                created_at_ms = current_time
            
            age_minutes = (current_time - created_at_ms) / 1000 / 60
            
            if age_minutes > self.max_age_minutes:
                reason = f"üïí BUY –æ—Ä–¥–µ—Ä {order.order_id} –ø—Ä–æ—Ç—É—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {age_minutes:.1f} –º–∏–Ω"
                logger.info(reason)
                return True, reason
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            deal = self.deal_service.get_deal_by_id(order.deal_id)
            if not deal:
                reason = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {order.deal_id} –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order.order_id}!"
                logger.error(reason)
                return False, reason

            ticker = await self.exchange.fetch_ticker(deal.symbol)
            current_price = ticker.last
            
            # –î–ª—è BUY: –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ —É—à–µ–ª –≤—ã—à–µ –Ω–∞—à–µ–π —Ü–µ–Ω—ã
            price_deviation = ((current_price - order.price) / order.price) * 100
            
            if price_deviation > self.max_price_deviation_percent:
                reason = f"üìà BUY –æ—Ä–¥–µ—Ä {order.order_id} –ø—Ä–æ—Ç—É—Ö –ø–æ —Ü–µ–Ω–µ: —Ä—ã–Ω–æ–∫ {current_price}, –æ—Ä–¥–µ—Ä {order.price} (+{price_deviation:.1f}%)"
                logger.info(reason)
                return True, reason
                
            return False, ""
            
        except Exception as e:
            reason = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}"
            logger.error(reason)
            return False, reason

    async def _handle_stale_buy_order(self, order: Order):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ç—É—Ö—à–µ–≥–æ BUY –æ—Ä–¥–µ—Ä–∞: –æ—Ç–º–µ–Ω–∞ + –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ SELL."""
        try:
            self.stats['stale_orders_found'] += 1
            logger.warning(f"üö® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ç—É—Ö—à–∏–π BUY –æ—Ä–¥–µ—Ä {order.order_id} –¥–ª—è —Å–¥–µ–ª–∫–∏ {order.deal_id}")

            # 1. –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π BUY –æ—Ä–¥–µ—Ä
            cancel_success = await self.order_service.cancel_order(order)
            if not cancel_success:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å BUY –æÔøΩÔøΩ–¥–µ—Ä {order.order_id}")
                return
            self.stats['orders_cancelled'] += 1
            logger.info(f"‚úÖ BUY –æ—Ä–¥–µ—Ä {order.order_id} –æ—Ç–º–µ–Ω–µ–Ω")

            # 2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º BUY –æ—Ä–¥–µ—Ä –ø–æ –Ω–æ–≤–æ–π —Ü–µ–Ω–µ
            new_buy_order = await self._recreate_buy_order(order)
            if not new_buy_order:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å BUY –æ—Ä–¥–µ—Ä –¥–ª—è —Å–¥–µ–ª–∫–∏ {order.deal_id}")
                return
            self.stats['orders_recreated'] += 1
            logger.info(f"‚úÖ BUY –æ—Ä–¥–µ—Ä –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω: {order.order_id} -> {new_buy_order.order_id} (Exchange ID: {new_buy_order.exchange_id})")

            # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –∫ –Ω–µ–π –Ω–æ–≤—ã–π BUY –æ—Ä–¥–µ—Ä
            deal = self.deal_service.get_deal_by_id(order.deal_id)
            if not deal:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {order.deal_id} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
                return
            
            deal.buy_order = new_buy_order
            self.deal_service.deals_repo.save(deal)
            logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ {deal.deal_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤—ã–º BUY –æ—Ä–¥–µ—Ä–æ–º {new_buy_order.order_id}")

            # 4. –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π PENDING SELL –æ—Ä–¥–µ—Ä
            await self._update_related_sell_order(deal, new_buy_order)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ç—É—Ö—à–µ–≥–æ BUY –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}", exc_info=True)

    async def _recreate_buy_order(self, old_order: Order) -> Optional[Order]:
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ BUY –æ—Ä–¥–µ—Ä–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ"""
        try:
            deal = self.deal_service.get_deal_by_id(old_order.deal_id)
            ticker = await self.exchange.fetch_ticker(deal.symbol)
            new_price = ticker.last * 0.999

            logger.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º BUY –æ—Ä–¥–µ—Ä: —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ {old_order.price}, –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ {new_price}")

            execution_result = await self.order_service.create_and_place_buy_order(
                symbol=deal.symbol,
                amount=old_order.amount,
                price=new_price,
                deal_id=old_order.deal_id
            )
            
            return execution_result.order if execution_result.success else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ÔøΩÔøΩ–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è BUY –æ—Ä–¥–µ—Ä–∞: {e}", exc_info=True)
            return None

    async def _update_related_sell_order(self, deal, new_buy_order: Order):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π PENDING SELL –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deal.sell_order –Ω–µ None
            if not deal.sell_order:
                logger.warning(f"–°–¥–µ–ª–∫–∞ {deal.deal_id} –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ SELL –æ—Ä–¥–µ—Ä–∞. –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.")
                return
                
            pending_sell = self.order_service.get_order_by_id(deal.sell_order.order_id)
            
            if not pending_sell or not pending_sell.is_pending():
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω PENDING SELL –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal.deal_id}. –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.")
                return

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è SELL –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ BUY
            # (–≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ —Ç–æ–π, —á—Ç–æ –≤ TickerService/Strategy)
            profit_markup = deal.currency_pair.profit_markup
            new_sell_price = new_buy_order.price * (1 + profit_markup)
            
            # TODO: –ü–µ—Ä–µ—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—è –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
            new_sell_amount = new_buy_order.amount 

            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º PENDING SELL –æ—Ä–¥–µ—Ä {pending_sell.order_id}: —Ü–µ–Ω–∞ {pending_sell.price} -> {new_sell_price}, –∫–æ–ª-–≤–æ {pending_sell.amount} -> {new_sell_amount}")

            pending_sell.price = new_sell_price
            pending_sell.amount = new_sell_amount
            
            self.order_service.orders_repo.save(pending_sell)
            logger.info(f"‚úÖ PENDING SELL –æ—Ä–¥–µ—Ä {pending_sell.order_id} –æ–±–Ω–æ–≤–ª–µ–Ω.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ SELL –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal.deal_id}: {e}", exc_info=True)

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'running': self.running,
            'max_age_minutes': self.max_age_minutes,
            'max_price_deviation_percent': self.max_price_deviation_percent,
            'check_interval_seconds': self.check_interval_seconds,
            **self.stats
        }

    def configure(
        self,
        max_age_minutes: float = None,
        max_price_deviation_percent: float = None,
        check_interval_seconds: int = None
    ):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if max_age_minutes is not None:
            self.max_age_minutes = max_age_minutes
        if max_price_deviation_percent is not None:
            self.max_price_deviation_percent = max_price_deviation_percent
        if check_interval_seconds is not None:
            self.check_interval_seconds = check_interval_seconds
            
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {self.get_statistics()}")
