# src/domain/services/orders/filled_buy_order_handler.py
import asyncio
import logging
from typing import List

from domain.entities.order import Order
from domain.services.orders.order_service import OrderService
from domain.services.deals.deal_service import DealService

logger = logging.getLogger(__name__)

class FilledBuyOrderHandler:
    """
    –°–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ BUY –æ—Ä–¥–µ—Ä–∞ –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º PENDING SELL –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É.
    """

    def __init__(self, order_service: OrderService, deal_service: DealService):
        self.order_service = order_service
        self.deal_service = deal_service
        self.processed_buy_orders = set()

    async def check_and_place_sell_orders(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ BUY –æ—Ä–¥–µ—Ä–∞ –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç
        —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ SELL –æ—Ä–¥–µ—Ä–∞.
        """
        try:
            all_orders = self.order_service.orders_repo.get_all()
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            buy_orders = [order for order in all_orders if order.side == Order.SIDE_BUY]
            logger.debug(f"üîç FilledBuyOrderHandler: –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(all_orders)}, BUY –æ—Ä–¥–µ—Ä–æ–≤: {len(buy_orders)}")
            
            if buy_orders:
                for buy_order in buy_orders:
                    logger.debug(f"   BUY –æ—Ä–¥–µ—Ä {buy_order.order_id}: —Å—Ç–∞—Ç—É—Å={buy_order.status}, filled={buy_order.filled_amount}, is_filled={buy_order.is_filled()}")
            
            filled_buy_orders = [
                order for order in all_orders
                if order.side == Order.SIDE_BUY
                and order.is_filled()
                and order.order_id not in self.processed_buy_orders
            ]

            logger.debug(f"üîç FilledBuyOrderHandler: –ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤: {len(filled_buy_orders)}, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.processed_buy_orders)}")

            if not filled_buy_orders:
                logger.debug("‚ÑπÔ∏è FilledBuyOrderHandler: –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            logger.info(f"üéØ FilledBuyOrderHandler: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(filled_buy_orders)} –Ω–æ–≤—ã—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞...")

            for buy_order in filled_buy_orders:
                await self._process_filled_buy_order(buy_order)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ FilledBuyOrderHandler: {e}", exc_info=True)

    async def _process_filled_buy_order(self, buy_order: Order):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π BUY –æ—Ä–¥–µ—Ä."""
        try:
            logger.info(f"üîÑ FilledBuyOrderHandler: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π BUY –æ—Ä–¥–µ—Ä {buy_order.order_id} –¥–ª—è —Å–¥–µ–ª–∫–∏ {buy_order.deal_id}")
            
            deal = self.deal_service.get_deal_by_id(buy_order.deal_id)
            if not deal:
                logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {buy_order.deal_id} –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ BUY –æ—Ä–¥–µ—Ä–∞ {buy_order.order_id}")
                self.processed_buy_orders.add(buy_order.order_id)
                return

            logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {deal.deal_id}, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π SELL –æ—Ä–¥–µ—Ä...")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deal.sell_order –Ω–µ None
            if not deal.sell_order:
                logger.warning(f"‚ùå –°–¥–µ–ª–∫–∞ {deal.deal_id} –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ SELL –æ—Ä–¥–µ—Ä–∞")
                self.processed_buy_orders.add(buy_order.order_id)
                return

            # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π PENDING SELL –æ—Ä–¥–µ—Ä
            sell_order = self.order_service.get_order_by_id(deal.sell_order.order_id)
            
            if not sell_order:
                logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω SELL –æ—Ä–¥–µ—Ä {deal.sell_order.order_id} –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal.deal_id}")
                self.processed_buy_orders.add(buy_order.order_id)
                return
            
            logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω SELL –æ—Ä–¥–µ—Ä {sell_order.order_id}: —Å—Ç–∞—Ç—É—Å={sell_order.status}, is_pending={sell_order.is_pending()}")
            
            if not sell_order.is_pending():
                logger.warning(f"‚ö†Ô∏è SELL –æ—Ä–¥–µ—Ä {sell_order.order_id} –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING (—Ç–µ–∫—É—â–∏–π: {sell_order.status}). –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω.")
                self.processed_buy_orders.add(buy_order.order_id)
                return

            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω PENDING SELL –æ—Ä–¥–µ—Ä {sell_order.order_id} –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal.deal_id}. –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞ –±–∏—Ä–∂–µ...")

            # –†–∞–∑–º–µ—â–∞–µ–º SELL –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
            execution_result = await self.order_service.place_existing_order(sell_order)

            if execution_result.success:
                logger.info(f"‚úÖ SELL –æ—Ä–¥–µ—Ä {sell_order.order_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ. Exchange ID: {execution_result.order.exchange_id}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å SELL –æ—Ä–¥–µ—Ä {sell_order.order_id}: {execution_result.error_message}")

            # –ü–æ–º–µ—á–∞–µ–º BUY –æ—Ä–¥–µ—Ä –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞
            self.processed_buy_orders.add(buy_order.order_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ BUY –æ—Ä–¥–µ—Ä–∞ {buy_order.order_id}: {e}", exc_info=True)
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ processed, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
