# domain/services/orders/ccxt_order_execution_service.py
import asyncio
import logging
import time
from typing import Optional, Dict, List, Any, Tuple
from dataclasses import dataclass
from datetime import datetime, timezone

from src.domain.entities.order import Order, OrderExecutionResult
from src.domain.entities.deal import Deal
from src.domain.entities.currency_pair import CurrencyPair
from src.infrastructure.connectors.ccxt_exchange_connector import CCXTExchangeConnector
from src.domain.repositories.i_orders_repository import IOrdersRepository

logger = logging.getLogger(__name__)


@dataclass
class CCXTTradingContext:
    """CCXT-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    currency_pair: CurrencyPair
    current_price: float
    budget: float
    strategy_result: Any
    deal: Optional[Deal] = None
    metadata: Optional[Dict[str, Any]] = None


@dataclass
class CCXTExecutionReport:
    """CCXT-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    success: bool
    deal_id: Optional[str] = None  # UUID string
    buy_order: Optional[Order] = None
    sell_order: Optional[Order] = None
    total_cost: float = 0.0
    expected_profit: float = 0.0
    fees: float = 0.0
    execution_time_ms: float = 0.0
    error_message: Optional[str] = None
    warnings: List[str] = None
    ccxt_data: Optional[Dict[str, Any]] = None  # –ü–æ–ª–Ω—ã–µ CCXT –¥–∞–Ω–Ω—ã–µ


class CCXTOrderExecutionService:
    """
    üöÄ CCXT COMPLIANT Order Execution Service
    
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å CCXT —Å–µ—Ä–≤–∏—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CCXT Unified API –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º CCXT —Ñ–æ—Ä–º–∞—Ç–µ
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –æ—Ä–¥–µ—Ä–æ–≤
    - –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å CCXT-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    """

    def __init__(
        self,
        exchange_connector: CCXTExchangeConnector,
        orders_repository: IOrdersRepository,
        deal_service: Optional[Any] = None  # DealService –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    ):
        self.exchange_connector = exchange_connector
        self.orders_repository = orders_repository
        self.deal_service = deal_service
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.execution_stats = {
            'total_executions': 0,
            'successful_executions': 0,
            'failed_executions': 0,
            'total_volume': 0.0,
            'total_fees': 0.0,
            'average_execution_time_ms': 0.0,
            'ccxt_compliance_score': 100.0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.max_execution_time_sec = 30.0
        self.enable_risk_checks = True
        self.enable_balance_checks = True
        self.enable_slippage_protection = True
        self.enable_ccxt_validation = True

    # ===== MAIN EXECUTION METHODS =====

    async def execute_ccxt_order(
        self,
        symbol: str,
        type: str,
        side: str,
        amount: float,
        price: Optional[float] = None,
        params: Optional[Dict[str, Any]] = None,
        deal_id: Optional[str] = None
    ) -> OrderExecutionResult:
        """
        üéØ –ì–õ–ê–í–ù–´–ô –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CCXT-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –≤ CCXT —Ñ–æ—Ä–º–∞—Ç–µ (BTC/USDT)
            type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ CCXT (limit, market, stop, etc.)
            side: –°—Ç–æ—Ä–æ–Ω–∞ CCXT (buy, sell)
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            params: CCXT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            deal_id: ID —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å–≤—è–∑–∫–∏
            
        Returns:
            OrderExecutionResult —Å CCXT –¥–∞–Ω–Ω—ã–º–∏
        """
        start_time = time.time()
        execution_id = f"ccxt_exec_{int(start_time * 1000)}"
        
        logger.info(f"üöÄ [{execution_id}] Starting CCXT order execution: {side.upper()} {amount} {symbol}")
        
        try:
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            validation_result = await self._validate_ccxt_order_params(
                symbol, type, side, amount, price, params
            )
            if not validation_result.success:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"CCXT validation failed: {validation_result.error_message}"
                )

            # 2. Pre-execution –ø—Ä–æ–≤–µ—Ä–∫–∏
            pre_check_result = await self._perform_ccxt_pre_checks(
                symbol, side, amount, price
            )
            if not pre_check_result[0]:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"Pre-execution checks failed: {pre_check_result[1]}"
                )

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Order –æ–±—ä–µ–∫—Ç–∞
            local_order = self._create_local_order(
                symbol, type, side, amount, price, params, deal_id
            )

            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
            await self.orders_repository.save_order(local_order)
            logger.debug(f"Order {local_order.local_order_id} saved in PENDING status")

            # 5. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ —á–µ—Ä–µ–∑ CCXT
            ccxt_result = await self.exchange_connector.create_order(
                symbol=symbol,
                type=type,
                side=side,
                amount=amount,
                price=price,
                params=params or {}
            )

            # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂–∏
            local_order.update_from_ccxt_response(ccxt_result)
            local_order.mark_as_placed_on_exchange(
                ccxt_result['id'],
                ccxt_result.get('timestamp')
            )

            # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            await self.orders_repository.update_order(local_order)

            # 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            execution_time = (time.time() - start_time) * 1000
            self._update_execution_stats(True, amount * (price or 0), 0, execution_time)

            logger.info(f"‚úÖ [{execution_id}] CCXT order executed successfully: {ccxt_result['id']}")

            return OrderExecutionResult(
                success=True,
                order=local_order,
                exchange_response=ccxt_result
            )

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Order
            execution_time = (time.time() - start_time) * 1000
            self._update_execution_stats(False, 0.0, 0.0, execution_time)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if 'local_order' in locals():
                local_order.mark_as_failed(str(e))
                await self.orders_repository.update_order(local_order)

            logger.error(f"‚ùå [{execution_id}] CCXT order execution failed: {e}")
            
            return OrderExecutionResult(
                success=False,
                order=locals().get('local_order'),
                error_message=str(e)
            )

    async def execute_trading_strategy(
        self,
        currency_pair: CurrencyPair,
        strategy_result: Any,
        metadata: Optional[Dict[str, Any]] = None
    ) -> CCXTExecutionReport:
        """
        üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å CCXT compliance
        """
        start_time = time.time()
        execution_id = f"ccxt_strategy_{int(start_time * 1000)}"
        
        logger.info(f"üöÄ [{execution_id}] Starting CCXT strategy execution for {currency_pair.symbol}")
        
        try:
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_data = self._parse_strategy_result(strategy_result)
            if not strategy_data:
                return CCXTExecutionReport(
                    success=False,
                    error_message="Failed to parse strategy result"
                )

            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = CCXTTradingContext(
                currency_pair=currency_pair,
                current_price=strategy_data['buy_price'],
                budget=currency_pair.deal_quota,
                strategy_result=strategy_result,
                metadata=metadata or {}
            )

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–µ—Å–ª–∏ deal_service –¥–æ—Å—Ç—É–ø–µ–Ω)
            deal = None
            if self.deal_service:
                deal = self.deal_service.create_new_deal(currency_pair)
                context.deal = deal
                logger.info(f"‚úÖ [{execution_id}] Deal {deal.deal_id} created")

            # 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ BUY –æ—Ä–¥–µ—Ä–∞
            buy_result = await self.execute_ccxt_order(
                symbol=currency_pair.symbol,
                type='limit',
                side='buy',
                amount=strategy_data['buy_amount'],
                price=strategy_data['buy_price'],
                deal_id=str(deal.deal_id) if deal else None
            )

            if not buy_result.success:
                return CCXTExecutionReport(
                    success=False,
                    deal_id=str(deal.deal_id) if deal else None,
                    error_message=f"BUY order failed: {buy_result.error_message}"
                )

            buy_order = buy_result.order
            logger.info(f"‚úÖ [{execution_id}] BUY order placed: {buy_order.id}")

            # 5. –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ SELL –æ—Ä–¥–µ—Ä–∞ (PENDING)
            sell_order = self._create_local_order(
                symbol=currency_pair.symbol,
                type='limit',
                side='sell',
                amount=strategy_data['sell_amount'],
                price=strategy_data['sell_price'],
                params={'timeInForce': 'GTC'},
                deal_id=str(deal.deal_id) if deal else None
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º SELL –æ—Ä–¥–µ—Ä –≤ PENDING —Å—Ç–∞—Ç—É—Å–µ
            await self.orders_repository.save_order(sell_order)
            logger.info(f"‚úÖ [{execution_id}] Local SELL order created: {sell_order.local_order_id}")

            # 6. –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ —Å–¥–µ–ª–∫–æ–π
            if deal and self.deal_service:
                deal.attach_orders(buy_order, sell_order)
                self.deal_service.save_deal(deal)

            # 7. –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            total_cost = buy_order.amount * buy_order.price
            expected_profit = (sell_order.amount * sell_order.price) - total_cost

            # 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            execution_time = (time.time() - start_time) * 1000
            self._update_execution_stats(True, total_cost, 0, execution_time)

            # 9. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = CCXTExecutionReport(
                success=True,
                deal_id=str(deal.deal_id) if deal else None,
                buy_order=buy_order,
                sell_order=sell_order,
                total_cost=total_cost,
                expected_profit=expected_profit,
                execution_time_ms=execution_time,
                ccxt_data={
                    'buy_ccxt_response': buy_result.exchange_response,
                    'strategy_data': strategy_data
                }
            )

            logger.info(f"üéâ [{execution_id}] CCXT strategy executed successfully!")
            logger.info(f"   üí∞ Cost: {total_cost:.4f} USDT")
            logger.info(f"   üìà Expected profit: {expected_profit:.4f} USDT")
            logger.info(f"   ‚è±Ô∏è Execution time: {execution_time:.1f}ms")

            return report

        except Exception as e:
            execution_time = (time.time() - start_time) * 1000
            self._update_execution_stats(False, 0.0, 0.0, execution_time)

            logger.error(f"‚ùå [{execution_id}] CCXT strategy execution failed: {e}")
            return CCXTExecutionReport(
                success=False,
                error_message=f"Unexpected error: {str(e)}",
                execution_time_ms=execution_time
            )

    # ===== ORDER MANAGEMENT METHODS =====

    async def cancel_ccxt_order(self, order: Order) -> bool:
        """
        –û—Ç–º–µ–Ω–∞ CCXT –æ—Ä–¥–µ—Ä–∞
        """
        try:
            if not order.id:
                logger.warning(f"Cannot cancel order without exchange ID: local_id={order.local_order_id}")
                return False

            # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞ –±–∏—Ä–∂–µ
            ccxt_result = await self.exchange_connector.cancel_order(order.id, order.symbol)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
            order.update_from_ccxt_response(ccxt_result)
            order.cancel_order("Cancelled by user")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await self.orders_repository.update_order(order)
            
            logger.info(f"‚úÖ CCXT order cancelled: {order.id}")
            return True

        except Exception as e:
            logger.error(f"‚ùå Failed to cancel CCXT order {order.id}: {e}")
            return False

    async def sync_order_with_exchange(self, order: Order) -> Order:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–µ–π
        """
        try:
            if not order.id:
                logger.warning(f"Cannot sync order without exchange ID: local_id={order.local_order_id}")
                return order

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            ccxt_order = await self.exchange_connector.fetch_order(order.id, order.symbol)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
            order.update_from_ccxt_response(ccxt_order)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await self.orders_repository.update_order(order)
            
            logger.debug(f"Synced order {order.id} with exchange")
            return order

        except Exception as e:
            logger.error(f"Failed to sync order {order.id}: {e}")
            return order

    async def sync_all_active_orders(self) -> List[Order]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–µ–π
        """
        try:
            active_orders = await self.orders_repository.get_active_orders()
            synced_orders = []

            for order in active_orders:
                synced_order = await self.sync_order_with_exchange(order)
                synced_orders.append(synced_order)

            logger.info(f"Synced {len(synced_orders)} active orders with exchange")
            return synced_orders

        except Exception as e:
            logger.error(f"Failed to sync active orders: {e}")
            return []

    # ===== VALIDATION METHODS =====

    async def _validate_ccxt_order_params(
        self,
        symbol: str,
        type: str,
        side: str,
        amount: float,
        price: Optional[float],
        params: Optional[Dict[str, Any]]
    ) -> OrderExecutionResult:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ CCXT –æ—Ä–¥–µ—Ä–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not symbol:
                return OrderExecutionResult(
                    success=False,
                    error_message="Symbol is required"
                )

            if type not in ['limit', 'market', 'stop', 'stop_limit']:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"Invalid order type: {type}"
                )

            if side not in ['buy', 'sell']:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"Invalid order side: {side}"
                )

            if amount <= 0:
                return OrderExecutionResult(
                    success=False,
                    error_message="Amount must be positive"
                )

            if type == 'limit' and (not price or price <= 0):
                return OrderExecutionResult(
                    success=False,
                    error_message="Price is required for limit orders"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            market_info = await self.exchange_connector.get_market_info(symbol)
            
            min_amount = market_info['limits']['amount']['min']
            if amount < min_amount:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"Amount {amount} below minimum {min_amount}"
                )

            if price and type == 'limit':
                min_price = market_info['limits']['price']['min']
                max_price = market_info['limits']['price']['max']
                
                if price < min_price or price > max_price:
                    return OrderExecutionResult(
                        success=False,
                        error_message=f"Price {price} outside allowed range [{min_price}, {max_price}]"
                    )

            return OrderExecutionResult(success=True)

        except Exception as e:
            return OrderExecutionResult(
                success=False,
                error_message=f"Validation error: {str(e)}"
            )

    async def _perform_ccxt_pre_checks(
        self,
        symbol: str,
        side: str,
        amount: float,
        price: Optional[float]
    ) -> Tuple[bool, str]:
        """
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º CCXT –æ—Ä–¥–µ—Ä–∞
        """
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            if self.enable_balance_checks:
                has_balance, currency, available = await self.exchange_connector.check_sufficient_balance(
                    symbol, side, amount, price
                )
                
                if not has_balance:
                    required = amount * (price or 0) if side == 'buy' else amount
                    return False, f"Insufficient {currency} balance: need {required:.8f}, have {available:.8f}"

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∏—Ä–∂–∏
            exchange_status = await self.exchange_connector.get_exchange_status()
            if exchange_status.get('status') != 'ok':
                return False, f"Exchange not available: {exchange_status.get('error', 'Unknown error')}"

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
            if price and self.enable_slippage_protection:
                ticker = await self.exchange_connector.fetch_ticker(symbol)
                market_price = ticker['last']
                
                price_diff = abs(price - market_price) / market_price
                if price_diff > 0.10:  # 10% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                    logger.warning(f"Price differs from market by {price_diff*100:.1f}%")

            return True, "All checks passed"

        except Exception as e:
            return False, f"Pre-check error: {str(e)}"

    # ===== HELPER METHODS =====

    def _create_local_order(
        self,
        symbol: str,
        type: str,
        side: str,
        amount: float,
        price: Optional[float],
        params: Optional[Dict[str, Any]],
        deal_id: Optional[str]
    ) -> Order:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Order –æ–±—ä–µ–∫—Ç–∞
        """
        current_time = int(time.time() * 1000)
        
        return Order(
            # CCXT –ø–æ–ª—è
            id=None,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            clientOrderId=f"autotrade_{current_time}_{deal_id or 'standalone'}",
            datetime=datetime.now(timezone.utc).isoformat().replace('+00:00', 'Z'),
            timestamp=current_time,
            status=Order.STATUS_PENDING,
            symbol=symbol,
            type=type,
            timeInForce=params.get('timeInForce', Order.TIF_GTC) if params else Order.TIF_GTC,
            side=side,
            price=price,
            amount=amount,
            filled=0.0,
            remaining=amount,
            trades=[],
            fee={'cost': 0.0, 'currency': None, 'rate': None},
            info={},
            
            # AutoTrade –ø–æ–ª—è
            deal_id=int(deal_id) if deal_id and deal_id.isdigit() else None,
            created_at=current_time,
            last_update=current_time,
            metadata=params or {}
        )

    def _parse_strategy_result(self, strategy_result: Any) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        try:
            if isinstance(strategy_result, dict) and "comment" in strategy_result:
                logger.warning(f"Strategy error: {strategy_result['comment']}")
                return None

            if isinstance(strategy_result, (tuple, list)) and len(strategy_result) >= 5:
                buy_price, buy_amount, sell_price, sell_amount, info_dict = strategy_result[:5]
                
                return {
                    'buy_price': float(buy_price),
                    'buy_amount': float(buy_amount),
                    'sell_price': float(sell_price),
                    'sell_amount': float(sell_amount),
                    'info': info_dict if isinstance(info_dict, dict) else {}
                }

            return None

        except Exception as e:
            logger.error(f"Error parsing strategy result: {e}")
            return None

    def _update_execution_stats(
        self,
        success: bool,
        volume: float,
        fees: float,
        execution_time_ms: float
    ):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        self.execution_stats['total_executions'] += 1
        
        if success:
            self.execution_stats['successful_executions'] += 1
            self.execution_stats['total_volume'] += volume
            self.execution_stats['total_fees'] += fees
        else:
            self.execution_stats['failed_executions'] += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total_time = (self.execution_stats['average_execution_time_ms'] * 
                     (self.execution_stats['total_executions'] - 1) + execution_time_ms)
        self.execution_stats['average_execution_time_ms'] = total_time / self.execution_stats['total_executions']

        # –û–±–Ω–æ–≤–ª—è–µ–º CCXT compliance score
        if self.execution_stats['total_executions'] > 0:
            success_rate = self.execution_stats['successful_executions'] / self.execution_stats['total_executions']
            self.execution_stats['ccxt_compliance_score'] = success_rate * 100

    # ===== MONITORING AND STATISTICS =====

    async def get_execution_report(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        """
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
            total_orders = await self.orders_repository.count_active_orders()
            order_stats = await self.orders_repository.get_order_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            health_check = await self.orders_repository.health_check()
            exchange_info = self.exchange_connector.get_exchange_info()
            
            return {
                'execution_stats': self.execution_stats,
                'orders_stats': {
                    'total_active': total_orders,
                    'by_status_side': order_stats
                },
                'system_health': {
                    'repository': health_check,
                    'exchange': exchange_info
                },
                'settings': {
                    'max_execution_time_sec': self.max_execution_time_sec,
                    'enable_risk_checks': self.enable_risk_checks,
                    'enable_balance_checks': self.enable_balance_checks,
                    'enable_slippage_protection': self.enable_slippage_protection,
                    'enable_ccxt_validation': self.enable_ccxt_validation
                },
                'timestamp': datetime.now(timezone.utc).isoformat()
            }

        except Exception as e:
            logger.error(f"Failed to generate execution report: {e}")
            return {'error': str(e), 'timestamp': datetime.now(timezone.utc).isoformat()}

    def reset_statistics(self):
        """
        –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        self.execution_stats = {
            'total_executions': 0,
            'successful_executions': 0,
            'failed_executions': 0,
            'total_volume': 0.0,
            'total_fees': 0.0,
            'average_execution_time_ms': 0.0,
            'ccxt_compliance_score': 100.0
        }
        logger.info("Execution statistics reset")

    # ===== EMERGENCY OPERATIONS =====

    async def emergency_cancel_all_orders(self, symbol: Optional[str] = None) -> int:
        """
        –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤
        """
        logger.warning("üö® EMERGENCY: Cancelling all orders")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            active_orders = await self.orders_repository.get_active_orders()
            
            if symbol:
                active_orders = [order for order in active_orders if order.symbol == symbol]
            
            cancelled_count = 0
            
            for order in active_orders:
                try:
                    if await self.cancel_ccxt_order(order):
                        cancelled_count += 1
                except Exception as e:
                    logger.error(f"Failed to cancel order {order.id}: {e}")
            
            logger.warning(f"üö® Emergency cancellation completed: {cancelled_count} orders cancelled")
            return cancelled_count

        except Exception as e:
            logger.error(f"Emergency cancellation failed: {e}")
            return 0

    # ===== CONFIGURATION =====

    def configure_execution_settings(
        self,
        max_execution_time_sec: Optional[float] = None,
        enable_risk_checks: Optional[bool] = None,
        enable_balance_checks: Optional[bool] = None,
        enable_slippage_protection: Optional[bool] = None,
        enable_ccxt_validation: Optional[bool] = None
    ):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if max_execution_time_sec is not None:
            self.max_execution_time_sec = max_execution_time_sec
        if enable_risk_checks is not None:
            self.enable_risk_checks = enable_risk_checks
        if enable_balance_checks is not None:
            self.enable_balance_checks = enable_balance_checks
        if enable_slippage_protection is not None:
            self.enable_slippage_protection = enable_slippage_protection
        if enable_ccxt_validation is not None:
            self.enable_ccxt_validation = enable_ccxt_validation

        logger.info("‚öôÔ∏è CCXT execution settings updated")

    def __repr__(self):
        return (f"CCXTOrderExecutionService("
                f"exchange={self.exchange_connector.exchange_name}, "
                f"executions={self.execution_stats['total_executions']}, "
                f"success_rate={self.execution_stats.get('ccxt_compliance_score', 0):.1f}%)")


# ===== FACTORY FUNCTION =====

def create_ccxt_order_execution_service(
    exchange_connector: CCXTExchangeConnector,
    orders_repository: IOrdersRepository,
    deal_service: Optional[Any] = None
) -> CCXTOrderExecutionService:
    """
    Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CCXT Order Execution Service
    """
    return CCXTOrderExecutionService(
        exchange_connector=exchange_connector,
        orders_repository=orders_repository,
        deal_service=deal_service
    )