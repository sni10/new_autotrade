# src/domain/services/orders/order_sync_monitor.py
import asyncio
import logging
from typing import List
from domain.services.orders.order_service import OrderService
from domain.entities.order import Order

logger = logging.getLogger(__name__)

class OrderSyncMonitor:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–µ–π.
    
    –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏,
    –ª–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–µ–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
    """

    def __init__(self, order_service: OrderService, sync_interval_seconds: int = 30):
        self.order_service = order_service
        self.sync_interval_seconds = sync_interval_seconds
        self.stats = {
            'syncs_performed': 0,
            'orders_updated': 0,
            'status_changes': 0,
            'fill_changes': 0,
            'errors': 0
        }
        self._is_running = False

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if self._is_running:
            logger.warning("‚ö†Ô∏è OrderSyncMonitor —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self._is_running = True
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ {self.sync_interval_seconds}—Å)")
        
        while self._is_running:
            try:
                await self.sync_all_orders()
                await asyncio.sleep(self.sync_interval_seconds)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self._is_running = False
        logger.info("üî¥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def sync_all_orders(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–µ–π"""
        try:
            self.stats['syncs_performed'] += 1
            open_orders = self.order_service.get_open_orders()
            
            if not open_orders:
                logger.debug("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return
            
            logger.debug(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º {len(open_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            
            for order in open_orders:
                if order.exchange_id:  # –¢–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –Ω–∞ –±–∏—Ä–∂–µ
                    await self._sync_single_order(order)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            self.stats['errors'] += 1

    async def _sync_single_order(self, order: Order):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–µ–π"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            old_status = order.status
            old_filled = getattr(order, 'filled', 0.0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –±–∏—Ä–∂–∏
            updated_order = await self.order_service.get_order_status(order)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
            status_changed = old_status != updated_order.status
            filled_changed = old_filled != getattr(updated_order, 'filled', 0.0)
            
            if status_changed or filled_changed:
                self.stats['status_changes'] += 1 if status_changed else 0
                self.stats['fill_changes'] += 1 if filled_changed else 0
                
                fill_percentage = updated_order.get_fill_percentage() if hasattr(updated_order, 'get_fill_percentage') else 0.0
                
                logger.info(f"üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï: {updated_order.order_id} "
                           f"—Å—Ç–∞—Ç—É—Å: {old_status}‚Üí{updated_order.status}"
                           f"{', –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ' + str(old_filled) + '‚Üí' + str(getattr(updated_order, 'filled', 0.0)) if filled_changed else ''} "
                           f"({fill_percentage:.1%})")
            
            self.stats['orders_updated'] += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
            self.stats['errors'] += 1

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return {
            'running': self._is_running,
            'sync_interval_seconds': self.sync_interval_seconds,
            **self.stats
        }

    def configure(self, sync_interval_seconds: int = None):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if sync_interval_seconds is not None:
            self.sync_interval_seconds = sync_interval_seconds
            
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –∏–Ω—Ç–µ—Ä–≤–∞–ª={self.sync_interval_seconds}—Å")