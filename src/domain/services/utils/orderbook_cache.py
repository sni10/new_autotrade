# domain/services/utils/orderbook_cache.py
import time
from typing import Dict, Optional
import logging

logger = logging.getLogger(__name__)

class OrderBookCache:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∫–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ —Å TTL
    """
    
    def __init__(self, ttl_seconds: int = 30):
        self.ttl_seconds = ttl_seconds
        self._cache: Dict[str, Dict] = {}
        self._timestamps: Dict[str, float] = {}
    
    def get(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞–∫–∞–Ω"""
        current_time = time.time()
        
        if symbol not in self._cache:
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if current_time - self._timestamps[symbol] > self.ttl_seconds:
            self._remove(symbol)
            return None
            
        return self._cache[symbol]
    
    def set(self, symbol: str, orderbook: Dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤ –∫–µ—à"""
        self._cache[symbol] = orderbook
        self._timestamps[symbol] = time.time()
        
        logger.debug(f"üì¶ –ö–µ—à–∏—Ä—É–µ–º —Å—Ç–∞–∫–∞–Ω –¥–ª—è {symbol}")
    
    def _remove(self, symbol: str):
        """–£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–µ—à–∞"""
        if symbol in self._cache:
            del self._cache[symbol]
        if symbol in self._timestamps:
            del self._timestamps[symbol]
            
        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è {symbol}")
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à"""
        self._cache.clear()
        self._timestamps.clear()
        logger.debug("üßπ –ö–µ—à —Å—Ç–∞–∫–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
    
    def get_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞"""
        current_time = time.time()
        valid_entries = 0
        
        for symbol, timestamp in self._timestamps.items():
            if current_time - timestamp <= self.ttl_seconds:
                valid_entries += 1
                
        return {
            "total_entries": len(self._cache),
            "valid_entries": valid_entries,
            "ttl_seconds": self.ttl_seconds
        }