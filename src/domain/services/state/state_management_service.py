import asyncio
import logging
import signal
import time
import hashlib
import json
from typing import Dict, List, Optional, Any, Callable, Set
from datetime import datetime
import uuid

from src.domain.entities.application_state import (
    ApplicationState, ApplicationStateInfo, SystemSnapshot, 
    RecoveryInfo, StateTransition, TradingSessionState, ShutdownReason
)
from src.domain.repositories.i_state_repository import IStateRepository
from src.domain.repositories.i_deals_repository import IDealsRepository
from src.domain.repositories.i_orders_repository import IOrdersRepository
from src.domain.repositories.i_statistics_repository import IStatisticsRepository
from src.domain.repositories.i_configuration_repository import IConfigurationRepository
from src.domain.entities.statistics import StatisticCategory

logger = logging.getLogger(__name__)


class StateManagementService:
    """
    –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ graceful shutdown, recovery –∏ state persistence.
    """
    
    def __init__(
        self,
        state_repo: IStateRepository,
        deals_repo: Optional[IDealsRepository] = None,
        orders_repo: Optional[IOrdersRepository] = None,
        statistics_repo: Optional[IStatisticsRepository] = None,
        config_repo: Optional[IConfigurationRepository] = None
    ):
        self.state_repo = state_repo
        self.deals_repo = deals_repo
        self.orders_repo = orders_repo
        self.statistics_repo = statistics_repo
        self.config_repo = config_repo
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_state = ApplicationState.STARTING
        self.state_info = ApplicationStateInfo(current_state=self.current_state)
        self.trading_sessions: Dict[str, TradingSessionState] = {}
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.state_change_handlers: Dict[ApplicationState, List[Callable]] = {}
        self.shutdown_handlers: List[Callable] = []
        self.recovery_handlers: List[Callable] = []
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.shutdown_requested = False
        self.emergency_stop = False
        self.snapshot_interval_seconds = 300  # 5 –º–∏–Ω—É—Ç
        self.last_snapshot_time = 0
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.start_time = time.time()
        self.state_transitions_count = 0
        self.snapshots_created = 0
        self.recovery_attempts = 0
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        try:
            logger.info("üîÑ Initializing State Management Service...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self._load_previous_state()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            recovery_needed = await self._check_recovery_needed()
            if recovery_needed:
                await self._perform_recovery()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ RUNNING
            await self.transition_to_state(ApplicationState.RUNNING, "Initialization completed")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            asyncio.create_task(self._periodic_snapshot_task())
            asyncio.create_task(self._state_monitoring_task())
            
            logger.info("‚úÖ State Management Service initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize State Management Service: {e}")
            await self.transition_to_state(ApplicationState.ERROR, f"Initialization error: {e}")
            return False
    
    async def transition_to_state(
        self, 
        new_state: ApplicationState, 
        reason: str,
        metadata: Optional[Dict[str, Any]] = None
    ) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        try:
            if new_state == self.current_state:
                return True
            
            start_time = time.time()
            previous_state = self.current_state
            
            logger.info(f"üîÑ State transition: {previous_state.value} ‚Üí {new_state.value} ({reason})")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            success = await self._execute_pre_transition_handlers(previous_state, new_state)
            if not success:
                logger.error(f"‚ùå Pre-transition handlers failed for {previous_state.value} ‚Üí {new_state.value}")
                return False
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
            transition = StateTransition(
                from_state=previous_state,
                to_state=new_state,
                timestamp=int(time.time() * 1000),
                reason=reason,
                success=True,
                duration_ms=int((time.time() - start_time) * 1000),
                metadata=metadata or {}
            )
            await self.state_repo.log_state_transition(transition)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.current_state = new_state
            self.state_info.previous_state = previous_state
            self.state_info.current_state = new_state
            self.state_info.state_changed_at = int(time.time() * 1000)
            self.state_transitions_count += 1
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            await self._execute_post_transition_handlers(previous_state, new_state)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self.state_repo.save_application_state(self.state_info)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.statistics_repo:
                await self.statistics_repo.increment_counter(
                    f"state_transitions_{new_state.value}",
                    StatisticCategory.SYSTEM
                )
            
            logger.info(f"‚úÖ State transition completed: {previous_state.value} ‚Üí {new_state.value}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå State transition failed: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
            failed_transition = StateTransition(
                from_state=previous_state if 'previous_state' in locals() else self.current_state,
                to_state=new_state,
                timestamp=int(time.time() * 1000),
                reason=reason,
                success=False,
                error_message=str(e),
                metadata=metadata or {}
            )
            
            try:
                await self.state_repo.log_state_transition(failed_transition)
            except:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å
            
            return False
    
    async def request_graceful_shutdown(self, reason: ShutdownReason = ShutdownReason.USER_REQUEST) -> bool:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å graceful shutdown"""
        try:
            logger.warning(f"üõë Graceful shutdown requested: {reason.value}")
            
            self.shutdown_requested = True
            self.state_info.safe_shutdown_requested = True
            self.state_info.last_shutdown_reason = reason
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.transition_to_state(
                ApplicationState.STOPPING, 
                f"Graceful shutdown: {reason.value}"
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫
            await self.create_system_snapshot("pre_shutdown")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º shutdown handlers
            await self._execute_shutdown_handlers()
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
            await self._shutdown_trading_sessions()
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self.transition_to_state(ApplicationState.STOPPED, "Graceful shutdown completed")
            
            logger.info("‚úÖ Graceful shutdown completed")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Graceful shutdown failed: {e}")
            await self.emergency_shutdown()
            return False
    
    async def emergency_shutdown(self) -> None:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        try:
            logger.critical("üö® Emergency shutdown initiated")
            
            self.emergency_stop = True
            self.state_info.emergency_stop_active = True
            
            # –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
            self.current_state = ApplicationState.ERROR
            self.state_info.current_state = ApplicationState.ERROR
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            try:
                await self.create_system_snapshot("emergency_shutdown")
                await self.state_repo.save_application_state(self.state_info)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            
            logger.critical("üö® Emergency shutdown completed")
            
        except Exception as e:
            logger.critical(f"üö® Emergency shutdown error: {e}")
    
    async def create_system_snapshot(self, snapshot_type: str = "periodic") -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            snapshot_id = f"{snapshot_type}_{int(time.time())}_{uuid.uuid4().hex[:8]}"
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö
            active_deals = []
            if self.deals_repo:
                deals = await self.deals_repo.get_active_deals()
                active_deals = [deal.to_dict() if hasattr(deal, 'to_dict') else deal for deal in deals]
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö
            pending_orders = []
            if self.orders_repo:
                orders = await self.orders_repo.get_open_orders()
                pending_orders = [order.to_dict() if hasattr(order, 'to_dict') else order for order in orders]
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            system_metrics = await self._collect_system_metrics()
            
            # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫
            snapshot = SystemSnapshot(
                snapshot_id=snapshot_id,
                timestamp=int(time.time() * 1000),
                application_state=self.current_state,
                trading_sessions=list(self.trading_sessions.values()),
                active_deals=active_deals,
                pending_orders=pending_orders,
                system_metrics=system_metrics,
                configuration_checksum=await self._calculate_config_checksum()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫
            success = await self.state_repo.save_system_snapshot(snapshot)
            if success:
                self.snapshots_created += 1
                self.last_snapshot_time = time.time()
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                recovery_info = RecoveryInfo(
                    snapshot_id=snapshot_id,
                    created_at=snapshot.timestamp,
                    application_version="2.4.0",  # TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    recovery_priority=self._calculate_recovery_priority(),
                    recovery_notes=f"Auto-generated {snapshot_type} snapshot"
                )
                
                await self.state_repo.save_recovery_info(recovery_info)
                
                logger.debug(f"üì∏ System snapshot created: {snapshot_id}")
                return snapshot_id
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create system snapshot: {e}")
            return None
    
    async def start_trading_session(
        self, 
        currency_pair: str,
        session_config: Optional[Dict[str, Any]] = None
    ) -> str:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        try:
            session_id = f"{currency_pair}_{int(time.time())}_{uuid.uuid4().hex[:8]}"
            
            session_state = TradingSessionState(
                session_id=session_id,
                currency_pair=currency_pair,
                is_active=True,
                start_timestamp=int(time.time() * 1000),
                last_activity_timestamp=int(time.time() * 1000),
                active_deals_count=0,
                open_orders_count=0,
                metadata=session_config or {}
            )
            
            self.trading_sessions[session_id] = session_state
            await self.state_repo.save_trading_session_state(session_state)
            
            self.state_info.trading_active = True
            await self.state_repo.save_application_state(self.state_info)
            
            logger.info(f"üìà Trading session started: {session_id} for {currency_pair}")
            return session_id
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start trading session: {e}")
            raise
    
    async def stop_trading_session(self, session_id: str, reason: str = "User request") -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        try:
            if session_id not in self.trading_sessions:
                logger.warning(f"‚ö†Ô∏è Trading session not found: {session_id}")
                return False
            
            session = self.trading_sessions[session_id]
            session.is_active = False
            session.metadata['stop_reason'] = reason
            session.metadata['stop_timestamp'] = int(time.time() * 1000)
            
            await self.state_repo.save_trading_session_state(session)
            del self.trading_sessions[session_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            if not self.trading_sessions:
                self.state_info.trading_active = False
                await self.state_repo.save_application_state(self.state_info)
            
            logger.info(f"üìâ Trading session stopped: {session_id} ({reason})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to stop trading session: {e}")
            return False
    
    def register_state_change_handler(self, state: ApplicationState, handler: Callable) -> None:
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if state not in self.state_change_handlers:
            self.state_change_handlers[state] = []
        self.state_change_handlers[state].append(handler)
    
    def register_shutdown_handler(self, handler: Callable) -> None:
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ shutdown"""
        self.shutdown_handlers.append(handler)
    
    def register_recovery_handler(self, handler: Callable) -> None:
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ recovery"""
        self.recovery_handlers.append(handler)
    
    async def get_state_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        uptime = time.time() - self.start_time
        
        return {
            'current_state': self.current_state.value,
            'uptime_seconds': int(uptime),
            'trading_active': self.state_info.trading_active,
            'active_sessions': len(self.trading_sessions),
            'shutdown_requested': self.shutdown_requested,
            'emergency_stop': self.emergency_stop,
            'state_transitions_count': self.state_transitions_count,
            'snapshots_created': self.snapshots_created,
            'last_snapshot_age_seconds': int(time.time() - self.last_snapshot_time) if self.last_snapshot_time > 0 else None,
            'recovery_attempts': self.recovery_attempts,
            'sessions': {sid: {
                'currency_pair': session.currency_pair,
                'active_deals': session.active_deals_count,
                'open_orders': session.open_orders_count,
                'uptime_minutes': (time.time() * 1000 - session.start_timestamp) / (1000 * 60)
            } for sid, session in self.trading_sessions.items()}
        }
    
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
    
    async def _load_previous_state(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        try:
            previous_state = await self.state_repo.load_application_state()
            if previous_state:
                self.state_info = previous_state
                self.state_info.restart_count += 1
                self.state_info.uptime_seconds = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º uptime
                
                logger.info(f"üì• Previous state loaded: {previous_state.current_state.value}")
            else:
                logger.info("üì• No previous state found, starting fresh")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to load previous state: {e}")
    
    async def _check_recovery_needed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if self.state_info.current_state in [ApplicationState.ERROR, ApplicationState.STOPPING]:
                logger.warning("‚ö†Ô∏è Previous session ended unexpectedly, recovery may be needed")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
            active_sessions = await self.state_repo.get_active_trading_sessions()
            if active_sessions:
                logger.warning(f"‚ö†Ô∏è Found {len(active_sessions)} active trading sessions from previous run")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Failed to check recovery status: {e}")
            return False
    
    async def _perform_recovery(self) -> None:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            logger.info("üîÑ Starting recovery process...")
            self.recovery_attempts += 1
            
            await self.transition_to_state(ApplicationState.RECOVERY, "Recovery initiated")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            recovery_candidates = await self.state_repo.get_recovery_candidates()
            
            if recovery_candidates:
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç
                best_candidate = recovery_candidates[0]
                snapshot = await self.state_repo.load_system_snapshot(best_candidate.snapshot_id)
                
                if snapshot:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
                    for session_state in snapshot.trading_sessions:
                        if session_state.is_active:
                            self.trading_sessions[session_state.session_id] = session_state
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º recovery handlers
                    await self._execute_recovery_handlers(snapshot)
                    
                    logger.info(f"‚úÖ Recovery completed from snapshot: {best_candidate.snapshot_id}")
                else:
                    logger.error("‚ùå Failed to load recovery snapshot")
            else:
                logger.info("‚ÑπÔ∏è No recovery candidates found, starting clean")
            
        except Exception as e:
            logger.error(f"‚ùå Recovery failed: {e}")
            await self.transition_to_state(ApplicationState.ERROR, f"Recovery failed: {e}")
    
    async def _execute_pre_transition_handlers(
        self, 
        from_state: ApplicationState, 
        to_state: ApplicationState
    ) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        try:
            handlers = self.state_change_handlers.get(to_state, [])
            for handler in handlers:
                try:
                    if asyncio.iscoroutinefunction(handler):
                        await handler(from_state, to_state)
                    else:
                        handler(from_state, to_state)
                except Exception as e:
                    logger.error(f"‚ùå State change handler failed: {e}")
                    return False
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Pre-transition handlers failed: {e}")
            return False
    
    async def _execute_post_transition_handlers(
        self, 
        from_state: ApplicationState, 
        to_state: ApplicationState
    ) -> None:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            if to_state == ApplicationState.RUNNING:
                self.state_info.session_start_time = int(time.time() * 1000)
            elif to_state == ApplicationState.STOPPED:
                self.state_info.trading_active = False
                
        except Exception as e:
            logger.error(f"‚ùå Post-transition handlers failed: {e}")
    
    async def _execute_shutdown_handlers(self) -> None:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å shutdown handlers"""
        try:
            for handler in self.shutdown_handlers:
                try:
                    if asyncio.iscoroutinefunction(handler):
                        await handler()
                    else:
                        handler()
                except Exception as e:
                    logger.error(f"‚ùå Shutdown handler failed: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå Shutdown handlers execution failed: {e}")
    
    async def _execute_recovery_handlers(self, snapshot: SystemSnapshot) -> None:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å recovery handlers"""
        try:
            for handler in self.recovery_handlers:
                try:
                    if asyncio.iscoroutinefunction(handler):
                        await handler(snapshot)
                    else:
                        handler(snapshot)
                except Exception as e:
                    logger.error(f"‚ùå Recovery handler failed: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå Recovery handlers execution failed: {e}")
    
    async def _shutdown_trading_sessions(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏"""
        try:
            session_ids = list(self.trading_sessions.keys())
            for session_id in session_ids:
                await self.stop_trading_session(session_id, "System shutdown")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to shutdown trading sessions: {e}")
    
    async def _collect_system_metrics(self) -> Dict[str, Any]:
        """–°–æ–±—Ä–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            uptime = time.time() - self.start_time
            
            metrics = {
                'uptime_seconds': int(uptime),
                'state_transitions': self.state_transitions_count,
                'snapshots_created': self.snapshots_created,
                'recovery_attempts': self.recovery_attempts,
                'active_sessions_count': len(self.trading_sessions),
                'memory_usage_mb': self._get_memory_usage(),
                'timestamp': int(time.time() * 1000)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ statistics_repo
            if self.statistics_repo:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                    current_time = int(time.time() * 1000)
                    hour_ago = current_time - (60 * 60 * 1000)
                    
                    system_stats = await self.statistics_repo.get_statistics_range(
                        hour_ago, current_time, StatisticCategory.SYSTEM
                    )
                    
                    metrics['system_statistics_count'] = len(system_stats)
                except Exception as e:
                    logger.debug(f"Could not collect system statistics: {e}")
            
            return metrics
            
        except Exception as e:
            logger.error(f"‚ùå Failed to collect system metrics: {e}")
            return {}
    
    async def _calculate_config_checksum(self) -> Optional[str]:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if not self.config_repo:
                return None
            
            all_configs = await self.config_repo.get_all_configs(include_secrets=False)
            config_data = json.dumps(all_configs, sort_keys=True)
            
            return hashlib.md5(config_data.encode()).hexdigest()
            
        except Exception as e:
            logger.error(f"‚ùå Failed to calculate config checksum: {e}")
            return None
    
    def _calculate_recovery_priority(self) -> int:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        priority = 3  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if self.trading_sessions:
            priority = 1
        
        # –ü–æ–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—à–∏–±–∫–∏
        if self.current_state == ApplicationState.ERROR:
            priority = 5
        
        return priority
    
    def _get_memory_usage(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB"""
        try:
            import psutil
            process = psutil.Process()
            return process.memory_info().rss / 1024 / 1024
        except:
            return 0.0
    
    def _setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            def signal_handler(signum, frame):
                logger.warning(f"üîî Received signal {signum}")
                
                if signum in [signal.SIGTERM, signal.SIGINT]:
                    # Graceful shutdown
                    asyncio.create_task(
                        self.request_graceful_shutdown(ShutdownReason.SYSTEM_SIGNAL)
                    )
                elif signum == signal.SIGUSR1:
                    # Create snapshot
                    asyncio.create_task(self.create_system_snapshot("signal_requested"))
            
            signal.signal(signal.SIGTERM, signal_handler)
            signal.signal(signal.SIGINT, signal_handler)
            
            # SIGUSR1 for snapshot creation (Unix only)
            if hasattr(signal, 'SIGUSR1'):
                signal.signal(signal.SIGUSR1, signal_handler)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not setup signal handlers: {e}")
    
    async def _periodic_snapshot_task(self) -> None:
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤"""
        try:
            while not self.shutdown_requested:
                await asyncio.sleep(self.snapshot_interval_seconds)
                
                if self.current_state == ApplicationState.RUNNING:
                    await self.create_system_snapshot("periodic")
                    
        except asyncio.CancelledError:
            logger.info("üì∏ Periodic snapshot task cancelled")
        except Exception as e:
            logger.error(f"‚ùå Periodic snapshot task error: {e}")
    
    async def _state_monitoring_task(self) -> None:
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            while not self.shutdown_requested:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                # –û–±–Ω–æ–≤–ª—è–µ–º uptime
                self.state_info.uptime_seconds = int(time.time() - self.start_time)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
                current_time = int(time.time() * 1000)
                for session in self.trading_sessions.values():
                    session.last_activity_timestamp = current_time
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self.state_repo.save_application_state(self.state_info)
                
        except asyncio.CancelledError:
            logger.info("üìä State monitoring task cancelled")
        except Exception as e:
            logger.error(f"‚ùå State monitoring task error: {e}")