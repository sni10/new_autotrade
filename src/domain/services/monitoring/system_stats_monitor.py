# src/domain/services/monitoring/system_stats_monitor.py
import asyncio
import logging
from typing import Optional
from domain.services.orders.order_service import OrderService
from domain.services.deals.deal_service import DealService
from domain.services.orders.buy_order_monitor import BuyOrderMonitor
from domain.services.deals.deal_completion_monitor import DealCompletionMonitor
from domain.services.orders.order_sync_monitor import OrderSyncMonitor

logger = logging.getLogger(__name__)

class SystemStatsMonitor:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
    
    –°–æ–±–∏—Ä–∞–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤, —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ –∏ —Å–¥–µ–ª–æ–∫
    –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
    """

    def __init__(
        self,
        order_service: OrderService,
        deal_service: DealService,
        buy_order_monitor: Optional[BuyOrderMonitor] = None,
        deal_completion_monitor: Optional[DealCompletionMonitor] = None,
        order_sync_monitor: Optional[OrderSyncMonitor] = None,
        stats_interval_seconds: int = 60
    ):
        self.order_service = order_service
        self.deal_service = deal_service
        self.buy_order_monitor = buy_order_monitor
        self.deal_completion_monitor = deal_completion_monitor
        self.order_sync_monitor = order_sync_monitor
        self.stats_interval_seconds = stats_interval_seconds
        self._is_running = False

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self._is_running:
            logger.warning("‚ö†Ô∏è SystemStatsMonitor —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self._is_running = True
        logger.info(f"üìä –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–µ {self.stats_interval_seconds}—Å)")
        
        while self._is_running:
            try:
                await self.log_system_statistics()
                await asyncio.sleep(self.stats_interval_seconds)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self._is_running = False
        logger.info("üî¥ –°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def log_system_statistics(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("=" * 80)
            logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
            logger.info("=" * 80)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
            await self._log_orders_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
            await self._log_deals_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
            await self._log_monitors_statistics()
            
            logger.info("=" * 80)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def _log_orders_statistics(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            order_stats = self.order_service.get_statistics()
            open_orders = self.order_service.get_open_orders()
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø–∞–º
            buy_orders = [o for o in open_orders if o.side == 'BUY']
            sell_orders = [o for o in open_orders if o.side == 'SELL']
            pending_orders = [o for o in open_orders if o.status == 'PENDING']
            
            logger.info(f"üìã –û–†–î–ï–†–ê:")
            logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ: {order_stats['total_orders']}")
            logger.info(f"   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {order_stats['open_orders']} (BUY: {len(buy_orders)}, SELL: {len(sell_orders)})")
            logger.info(f"   ‚Ä¢ Pending: {len(pending_orders)}")
            logger.info(f"   ‚Ä¢ –ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {order_stats['completed_orders']}")
            logger.info(f"   ‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {order_stats['cancelled_orders']}")
            logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {order_stats['failed_orders']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")

    async def _log_deals_statistics(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫"""
        try:
            deal_stats = self.deal_service.get_statistics()
            open_deals = self.deal_service.get_open_deals()
            
            logger.info(f"üíº –°–î–ï–õ–ö–ò:")
            logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ: {deal_stats['total_deals']}")
            logger.info(f"   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {len(open_deals)}")
            logger.info(f"   ‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {deal_stats.get('completed_deals', 0)}")
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º —Å–¥–µ–ª–∫–∞–º
            if open_deals:
                logger.info(f"   üìà –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:")
                for deal in open_deals[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    logger.info(f"      - –°–¥–µ–ª–∫–∞ {deal.deal_id}: {deal.symbol}, —Å—Ç–∞—Ç—É—Å: {deal.status}")
                if len(open_deals) > 5:
                    logger.info(f"      ... –∏ –µ—â–µ {len(open_deals) - 5} —Å–¥–µ–ª–æ–∫")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–¥–µ–ª–æ–∫: {e}")

    async def _log_monitors_statistics(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
        try:
            logger.info(f"üîß –ú–û–ù–ò–¢–û–†–´:")
            
            # BuyOrderMonitor
            if self.buy_order_monitor:
                buy_stats = self.buy_order_monitor.get_statistics()
                logger.info(f"   üïí BUY –ú–û–ù–ò–¢–û–†:")
                logger.info(f"      ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if buy_stats['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                logger.info(f"      ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫: {buy_stats['checks_performed']}")
                logger.info(f"      ‚Ä¢ –¢—É—Ö–ª—è–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {buy_stats['stale_orders_found']}")
                logger.info(f"      ‚Ä¢ –û—Ä–¥–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ: {buy_stats['orders_cancelled']}")
                logger.info(f"      ‚Ä¢ –û—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ: {buy_stats['orders_recreated']}")
                logger.info(f"      ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {buy_stats['max_age_minutes']}–º–∏–Ω, {buy_stats['max_price_deviation_percent']}%")
            
            # DealCompletionMonitor
            if self.deal_completion_monitor:
                deal_stats = self.deal_completion_monitor.get_statistics()
                logger.info(f"   ‚úÖ DEAL –ú–û–ù–ò–¢–û–†:")
                logger.info(f"      ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫: {deal_stats['checks_performed']}")
                logger.info(f"      ‚Ä¢ –°–¥–µ–ª–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {deal_stats['deals_monitored']}")
                logger.info(f"      ‚Ä¢ –°–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {deal_stats['deals_completed']}")
                logger.info(f"      ‚Ä¢ SELL –æ—Ä–¥–µ—Ä–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {deal_stats.get('sell_orders_placed', 0)}")
            
            # OrderSyncMonitor
            if self.order_sync_monitor:
                sync_stats = self.order_sync_monitor.get_statistics()
                logger.info(f"   üîÑ SYNC –ú–û–ù–ò–¢–û–†:")
                logger.info(f"      ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if sync_stats['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                logger.info(f"      ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π: {sync_stats['syncs_performed']}")
                logger.info(f"      ‚Ä¢ –û—Ä–¥–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {sync_stats['orders_updated']}")
                logger.info(f"      ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞: {sync_stats['status_changes']}")
                logger.info(f"      ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {sync_stats['fill_changes']}")
                logger.info(f"      ‚Ä¢ –û—à–∏–±–æ–∫: {sync_stats['errors']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {e}")

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'running': self._is_running,
            'stats_interval_seconds': self.stats_interval_seconds,
            'components': {
                'order_service': bool(self.order_service),
                'deal_service': bool(self.deal_service),
                'buy_order_monitor': bool(self.buy_order_monitor),
                'deal_completion_monitor': bool(self.deal_completion_monitor),
                'order_sync_monitor': bool(self.order_sync_monitor),
            }
        }