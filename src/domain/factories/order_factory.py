# domain/factories/order_factory.py.new - ENHANCED –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
import time
import uuid
import math
import logging
from itertools import count
from typing import Optional, Dict, Any
from domain.entities.order import Order, ExchangeInfo

logger = logging.getLogger(__name__)

# üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç—á–∏–∫–∞ + timestamp
_id_gen = count(int(time.time()*1e6))

def _next_id():
    """üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
    return next(_id_gen)

def _generate_client_order_id(prefix: str = "auto") -> str:
    """üÜï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ ID"""
    timestamp = int(time.time() * 1000)
    short_uuid = str(uuid.uuid4())[:8]
    return f"{prefix}_{timestamp}_{short_uuid}"

class OrderFactory:
    """
    üöÄ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø —Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∏—Ä–∂–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """

    def __init__(self, exchange_info_cache: Optional[Dict[str, ExchangeInfo]] = None, exchange_connector=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏

        Args:
            exchange_info_cache: –ö–µ—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö —Å –±–∏—Ä–∂–∏
            exchange_connector: –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω)
        """
        self.exchange_info_cache = exchange_info_cache or {}
        self.exchange_connector = exchange_connector

    def _create_base_order(
        self,
        side: str,
        order_type: str,
        symbol: str,
        amount: float,
        price: float = 0.0,
        deal_id: Optional[int] = None,
        client_order_id: Optional[str] = None,
        time_in_force: str = "GTC",
        metadata: Optional[Dict[str, Any]] = None
    ) -> Order:
        """
        üÜï –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

        Args:
            side: BUY –∏–ª–∏ SELL
            order_type: LIMIT, MARKET, STOP_LOSS, etc.
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            deal_id: ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
            client_order_id: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ None)
            time_in_force: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ—Ä–¥–µ—Ä–∞
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if client_order_id is None:
            client_order_id = _generate_client_order_id(f"{side.lower()}_{symbol.lower()}")

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        order = Order(
            order_id=_next_id(),
            side=side,
            order_type=order_type,
            price=price,
            amount=amount,
            status=Order.STATUS_PENDING,  # –ù–∞—á–∏–Ω–∞–µ–º —Å PENDING
            deal_id=deal_id,
            symbol=symbol,
            remaining_amount=amount,  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–µ—Å—å –æ–±—ä–µ–º –æ—Å—Ç–∞–µ—Ç—Å—è
            client_order_id=client_order_id,
            time_in_force=time_in_force,
            metadata=metadata or {}
        )

        return order

    def create_buy_order(
        self,
        symbol: str,
        amount,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        price,   # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        deal_id: Optional[int] = None,
        order_type: str = Order.TYPE_LIMIT,
        client_order_id: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None
    ) -> Order:
        """
        üõí –°–æ–∑–¥–∞–Ω–∏–µ BUY –æ—Ä–¥–µ—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (float –∏–ª–∏ Decimal)
            price: –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (float –∏–ª–∏ Decimal)
            deal_id: ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é LIMIT)
            client_order_id: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –±–∏—Ä–∂–∏
        adjusted_amount = self.adjust_amount_precision(symbol, float(amount), round_up=True)
        adjusted_price = self.adjust_price_precision(symbol, float(price))

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è PERCENT_PRICE_BY_SIDE –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        # —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ —Ñ–∞–±—Ä–∏–∫–∏.

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è buy –æ—Ä–¥–µ—Ä–∞
        buy_metadata = metadata or {}
        buy_metadata.update({
            'order_direction': 'entry',  # –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é
            'created_by': 'order_factory',
            'creation_timestamp': int(time.time() * 1000),
            'original_amount': str(amount),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            'original_price': str(price),
            'adjusted_amount': str(adjusted_amount),
            'adjusted_price': str(adjusted_price)
        })

        return self._create_base_order(
            side=Order.SIDE_BUY,
            order_type=order_type,
            symbol=symbol,
            amount=adjusted_amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            price=adjusted_price,    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            deal_id=deal_id,
            client_order_id=client_order_id,
            metadata=buy_metadata
        )

    def create_sell_order(
        self,
        symbol: str,
        amount,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        price,   # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        deal_id: Optional[int] = None,
        order_type: str = Order.TYPE_LIMIT,
        client_order_id: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None
    ) -> Order:
        """
        üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ SELL –æ—Ä–¥–µ—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (float –∏–ª–∏ Decimal)
            price: –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (float –∏–ª–∏ Decimal)
            deal_id: ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é LIMIT)
            client_order_id: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –±–∏—Ä–∂–∏
        adjusted_amount = self.adjust_amount_precision(symbol, float(amount), round_up=False)  # SELL –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑
        adjusted_price = self.adjust_price_precision(symbol, float(price))

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è PERCENT_PRICE_BY_SIDE –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        # —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ —Ñ–∞–±—Ä–∏–∫–∏.

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è sell –æ—Ä–¥–µ—Ä–∞
        sell_metadata = metadata or {}
        sell_metadata.update({
            'order_direction': 'exit',  # –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
            'created_by': 'order_factory',
            'creation_timestamp': int(time.time() * 1000),
            'original_amount': str(amount),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            'original_price': str(price),
            'adjusted_amount': str(adjusted_amount),
            'adjusted_price': str(adjusted_price)
        })

        return self._create_base_order(
            side=Order.SIDE_SELL,
            order_type=order_type,
            symbol=symbol,
            amount=adjusted_amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            price=adjusted_price,    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            deal_id=deal_id,
            client_order_id=client_order_id,
            metadata=sell_metadata
        )

    def create_market_buy_order(
        self,
        symbol: str,
        amount,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        deal_id: Optional[int] = None,
        client_order_id: Optional[str] = None
    ) -> Order:
        """
        üõí –°–æ–∑–¥–∞–Ω–∏–µ MARKET BUY –æ—Ä–¥–µ—Ä–∞ (–ø–æ–∫—É–ø–∫–∞ –ø–æ —Ä—ã–Ω–∫—É) —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
        """
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        adjusted_amount = self.adjust_amount_precision(symbol, float(amount), round_up=True)
        
        metadata = {
            'order_direction': 'entry',
            'order_urgency': 'immediate',
            'market_order': True,
            'original_amount': str(amount),
            'adjusted_amount': str(adjusted_amount)
        }

        return self._create_base_order(
            side=Order.SIDE_BUY,
            order_type=Order.TYPE_MARKET,
            symbol=symbol,
            amount=adjusted_amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            price=0.0,  # –î–ª—è market –æ—Ä–¥–µ—Ä–æ–≤ —Ü–µ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞
            deal_id=deal_id,
            client_order_id=client_order_id,
            metadata=metadata
        )

    def create_market_sell_order(
        self,
        symbol: str,
        amount,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        deal_id: Optional[int] = None,
        client_order_id: Optional[str] = None
    ) -> Order:
        """
        üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ MARKET SELL –æ—Ä–¥–µ—Ä–∞ (–ø—Ä–æ–¥–∞–∂–∞ –ø–æ —Ä—ã–Ω–∫—É) —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
        """
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (SELL –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑)
        adjusted_amount = self.adjust_amount_precision(symbol, float(amount), round_up=False)
        
        metadata = {
            'order_direction': 'exit',
            'order_urgency': 'immediate',
            'market_order': True,
            'original_amount': str(amount),
            'adjusted_amount': str(adjusted_amount)
        }

        return self._create_base_order(
            side=Order.SIDE_SELL,
            order_type=Order.TYPE_MARKET,
            symbol=symbol,
            amount=adjusted_amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            price=0.0,  # –î–ª—è market –æ—Ä–¥–µ—Ä–æ–≤ —Ü–µ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞
            deal_id=deal_id,
            client_order_id=client_order_id,
            metadata=metadata
        )

    def create_stop_loss_order(
        self,
        symbol: str,
        amount,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        stop_price,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        deal_id: Optional[int] = None,
        client_order_id: Optional[str] = None
    ) -> Order:
        """
        üõ°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ STOP LOSS –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —É–±—ã—Ç–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (float –∏–ª–∏ Decimal)
            stop_price: –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (float –∏–ª–∏ Decimal)
            deal_id: ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
            client_order_id: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID
        """
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è amount –∏ price
        adjusted_amount = self.adjust_amount_precision(symbol, float(amount), round_up=False)  # SELL –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑
        adjusted_stop_price = self.adjust_price_precision(symbol, float(stop_price))
        
        metadata = {
            'order_direction': 'exit',
            'order_purpose': 'stop_loss',
            'risk_management': True,
            'original_amount': str(amount),
            'original_stop_price': str(stop_price),
            'adjusted_amount': str(adjusted_amount),
            'adjusted_stop_price': str(adjusted_stop_price)
        }

        return self._create_base_order(
            side=Order.SIDE_SELL,
            order_type=Order.TYPE_STOP_LOSS,
            symbol=symbol,
            amount=adjusted_amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            price=adjusted_stop_price,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            deal_id=deal_id,
            client_order_id=client_order_id,
            metadata=metadata
        )

    def create_take_profit_order(
        self,
        symbol: str,
        amount,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        target_price,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ Decimal
        deal_id: Optional[int] = None,
        client_order_id: Optional[str] = None
    ) -> Order:
        """
        üí∞ –°–æ–∑–¥–∞–Ω–∏–µ TAKE PROFIT –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (float –∏–ª–∏ Decimal)
            target_price: –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–∏–±—ã–ª–∏ (float –∏–ª–∏ Decimal)
            deal_id: ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
            client_order_id: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID
        """
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è amount –∏ price
        adjusted_amount = self.adjust_amount_precision(symbol, float(amount), round_up=False)  # SELL –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑
        adjusted_target_price = self.adjust_price_precision(symbol, float(target_price))
        
        metadata = {
            'order_direction': 'exit',
            'order_purpose': 'take_profit',
            'profit_taking': True,
            'original_amount': str(amount),
            'original_target_price': str(target_price),
            'adjusted_amount': str(adjusted_amount),
            'adjusted_target_price': str(adjusted_target_price)
        }

        return self._create_base_order(
            side=Order.SIDE_SELL,
            order_type=Order.TYPE_TAKE_PROFIT,
            symbol=symbol,
            amount=adjusted_amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            price=adjusted_target_price,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            deal_id=deal_id,
            client_order_id=client_order_id,
            metadata=metadata
        )

    # üÜï –ú–ï–¢–û–î–´ –í–ê–õ–ò–î–ê–¶–ò–ò

    def validate_order_params(
        self,
        symbol: str,
        amount: float,
        price: float = None,
        side: str = None
    ) -> tuple[bool, list[str]]:
        """
        üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º

        Returns:
            tuple: (is_valid, list_of_errors)
        """
        errors = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not symbol:
            errors.append("Symbol is required")
        if amount <= 0:
            errors.append("Amount must be positive")
        if price is not None and price <= 0:
            errors.append("Price must be positive")
        if side and side not in [Order.SIDE_BUY, Order.SIDE_SELL]:
            errors.append("Side must be BUY or SELL")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–∏–≤ exchange info –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if symbol in self.exchange_info_cache:
            exchange_info = self.exchange_info_cache[symbol]

            if amount < exchange_info.min_qty:
                errors.append(f"Amount {amount} below minimum {exchange_info.min_qty}")
            if amount > exchange_info.max_qty:
                errors.append(f"Amount {amount} above maximum {exchange_info.max_qty}")

            if price is not None:
                if price < exchange_info.min_price:
                    errors.append(f"Price {price} below minimum {exchange_info.min_price}")
                if price > exchange_info.max_price:
                    errors.append(f"Price {price} above maximum {exchange_info.max_price}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
                notional_value = amount * price
                if notional_value < exchange_info.min_notional:
                    errors.append(f"Order value {notional_value} below minimum {exchange_info.min_notional}")

        return len(errors) == 0, errors

    def adjust_amount_precision(self, symbol: str, amount: float, round_up: bool = False) -> float:
        """üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ ``step_size`` –±–∏—Ä–∂–∏.

        –ï—Å–ª–∏ ``round_up`` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ ``True``, —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è
        –≤–≤–µ—Ä—Ö –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —à–∞–≥–∞. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BUY
        –æ—Ä–¥–µ—Ä–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –±–∏—Ä–∂–∞ –æ–∫—Ä—É–≥–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤
        –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
        """
        if symbol not in self.exchange_info_cache:
            return amount

        exchange_info = self.exchange_info_cache[symbol]
        step_size = exchange_info.step_size

        if step_size > 0:
            precision = len(str(step_size).split('.')[-1]) if '.' in str(step_size) else 0
            steps = amount / step_size
            steps = math.ceil(steps) if round_up else math.floor(steps)
            adjusted = round(steps * step_size, precision)
            adjusted = min(max(adjusted, exchange_info.min_qty), exchange_info.max_qty)
            return adjusted

        return amount

    def adjust_price_precision(self, symbol: str, price: float) -> float:
        """
        üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å–æ–≥–ª–∞—Å–Ω–æ tick_size –±–∏—Ä–∂–∏
        """
        if symbol not in self.exchange_info_cache:
            return price

        exchange_info = self.exchange_info_cache[symbol]
        tick_size = exchange_info.tick_size

        if tick_size > 0:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ tick_size
            precision = len(str(tick_size).split('.')[-1]) if '.' in str(tick_size) else 0
            adjusted = round(price // tick_size * tick_size, precision)
            return max(adjusted, exchange_info.min_price)

        return price

    def update_exchange_info(self, symbol: str, exchange_info: ExchangeInfo) -> None:
        """
        üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ
        """
        self.exchange_info_cache[symbol] = exchange_info

    def get_exchange_info(self, symbol: str) -> Optional[ExchangeInfo]:
        """
        üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ
        """
        return self.exchange_info_cache.get(symbol)

    async def fetch_market_price(self, symbol: str) -> Optional[Dict[str, float]]:
        """
        üìä –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ PERCENT_PRICE_BY_SIDE
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: 'bid', 'ask', 'last' –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
        """
        if not self.exchange_connector:
            logger.warning(f"‚ö†Ô∏è Exchange connector not available for market price fetching: {symbol}")
            return None
            
        try:
            ticker = await self.exchange_connector.fetch_ticker(symbol)
            return {
                'bid': ticker.bid,
                'ask': ticker.ask,
                'last': ticker.last
            }
        except Exception as e:
            logger.error(f"‚ùå Failed to fetch market price for {symbol}: {e}")
            return None

    async def validate_percent_price_by_side(self, symbol: str, price: float, side: str) -> tuple[bool, str, Optional[float]]:
        """
        üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤ —Ñ–∏–ª—å—Ç—Ä–∞ PERCENT_PRICE_BY_SIDE
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            price: –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
            side: BUY –∏–ª–∏ SELL
            
        Returns:
            tuple: (is_valid, error_message, suggested_price)
        """
        market_prices = await self.fetch_market_price(symbol)
        if not market_prices:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            logger.warning(f"‚ö†Ô∏è Cannot validate PERCENT_PRICE_BY_SIDE for {symbol}: market price unavailable")
            return True, "", None
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã (¬±10%) –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å—Å—è –∏–∑ exchange info
        max_deviation_percent = 10.0  # 10% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
        
        if side.upper() == Order.SIDE_BUY:
            # –î–ª—è BUY –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ask —Ü–µ–Ω—ã
            reference_price = market_prices.get('ask') or market_prices.get('last')
            if not reference_price:
                return True, "", None
                
            min_allowed = reference_price * (1 - max_deviation_percent / 100)
            max_allowed = reference_price * (1 + max_deviation_percent / 100)
            
            if price < min_allowed:
                suggested_price = min_allowed
                return False, f"BUY price {price} too low (min: {min_allowed:.8f}, market: {reference_price:.8f})", suggested_price
            elif price > max_allowed:
                suggested_price = max_allowed
                return False, f"BUY price {price} too high (max: {max_allowed:.8f}, market: {reference_price:.8f})", suggested_price
                
        elif side.upper() == Order.SIDE_SELL:
            # –î–ª—è SELL –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ bid —Ü–µ–Ω—ã
            reference_price = market_prices.get('bid') or market_prices.get('last')
            if not reference_price:
                return True, "", None
                
            min_allowed = reference_price * (1 - max_deviation_percent / 100)
            max_allowed = reference_price * (1 + max_deviation_percent / 100)
            
            if price < min_allowed:
                suggested_price = min_allowed
                return False, f"SELL price {price} too low (min: {min_allowed:.8f}, market: {reference_price:.8f})", suggested_price
            elif price > max_allowed:
                suggested_price = max_allowed
                return False, f"SELL price {price} too high (max: {max_allowed:.8f}, market: {reference_price:.8f})", suggested_price
        
        return True, "", None

    async def adjust_price_for_percent_price_filter(self, symbol: str, price: float, side: str, auto_adjust: bool = True) -> tuple[float, bool, str]:
        """
        üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–∏–ª—å—Ç—Ä—É PERCENT_PRICE_BY_SIDE
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            price: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞
            side: BUY –∏–ª–∏ SELL
            auto_adjust: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –µ—Å–ª–∏ –æ–Ω–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            
        Returns:
            tuple: (adjusted_price, was_adjusted, adjustment_message)
        """
        is_valid, error_msg, suggested_price = await self.validate_percent_price_by_side(symbol, price, side)
        
        if is_valid:
            return price, False, ""
            
        if not auto_adjust or suggested_price is None:
            return price, False, f"Price validation failed: {error_msg}"
            
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –±–∏—Ä–∂–∏ –∫ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ
        adjusted_price = self.adjust_price_precision(symbol, suggested_price)
        
        adjustment_msg = f"Price adjusted from {price} to {adjusted_price} for PERCENT_PRICE_BY_SIDE compliance: {error_msg}"
        logger.warning(f"‚ö†Ô∏è {adjustment_msg}")
        
        return adjusted_price, True, adjustment_msg
