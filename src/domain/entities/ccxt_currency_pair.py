# domain/entities/ccxt_currency_pair.py
import logging
import time
from typing import Optional, Dict, Any, List
from dataclasses import dataclass, field
from datetime import datetime, timezone

logger = logging.getLogger(__name__)


@dataclass
class CCXTMarketInfo:
    """
    üöÄ CCXT Market Information Structure
    
    –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CCXT market structure
    """
    # CCXT –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    id: str                                    # –±–∏—Ä–∂–µ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (BTCUSDT)
    symbol: str                               # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª (BTC/USDT)
    base: str                                 # –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ (BTC)
    quote: str                                # –∫–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞ (USDT)
    base_id: Optional[str] = None             # ID –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ
    quote_id: Optional[str] = None            # ID –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ
    active: bool = True                       # –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    
    # CCXT —Ç–∏–ø—ã —Ä—ã–Ω–∫–æ–≤
    type: str = 'spot'                        # —Ç–∏–ø —Ä—ã–Ω–∫–∞
    spot: bool = True                         # –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏
    margin: bool = False                      # –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    future: bool = False                      # –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    swap: bool = False                        # –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–≤–æ–ø —Ç–æ—Ä–≥–æ–≤–ª–∏
    option: bool = False                      # –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–ø—Ü–∏–æ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    contract: bool = False                    # –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    linear: Optional[bool] = None             # –ª–∏–Ω–µ–π–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    inverse: Optional[bool] = None            # –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    
    # CCXT —Ç–æ—á–Ω–æ—Å—Ç—å (precision)
    precision: Dict[str, Any] = field(default_factory=lambda: {
        'amount': 8,
        'price': 2,
        'cost': 8
    })
    
    # CCXT –ª–∏–º–∏—Ç—ã (limits)
    limits: Dict[str, Any] = field(default_factory=lambda: {
        'amount': {'min': 0.00001, 'max': None},
        'price': {'min': 0.01, 'max': None},
        'cost': {'min': 10, 'max': None},
        'leverage': {'min': None, 'max': None}
    })
    
    # CCXT –∫–æ–º–∏—Å—Å–∏–∏ (fees)
    maker: float = 0.001                      # –∫–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞
    taker: float = 0.001                      # –∫–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞
    
    # CCXT –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info: Dict[str, Any] = field(default_factory=dict)  # –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –±–∏—Ä–∂–∏
    
    # AutoTrade –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    last_updated: Optional[int] = None        # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    def __post_init__(self):
        if self.last_updated is None:
            self.last_updated = int(time.time() * 1000)


class CCXTCurrencyPair:
    """
    üöÄ CCXT COMPLIANT Currency Pair Entity
    
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å CCXT —Å—É—â–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å CCXT markets –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è CCXT.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CCXT markets
    - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - –†–∞—Å—á–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º precision
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ market data
    """

    def __init__(
        self,
        symbol: str,
        base_currency: Optional[str] = None,
        quote_currency: Optional[str] = None,
        # AutoTrade —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        order_life_time: int = 60,              # –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ—Ä–¥–µ—Ä–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        deal_quota: float = 100.0,              # —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤ quote –≤–∞–ª—é—Ç–µ
        profit_markup: float = 0.015,           # –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç (1.5%)
        deal_count: int = 1,                    # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        enable_auto_update: bool = True,        # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏
        cache_ttl_seconds: int = 300           # TTL –∫—ç—à–∞ market data (5 –º–∏–Ω—É—Ç)
    ):
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–º–≤–æ–ª–∞
        if '/' in symbol:
            self.symbol = symbol
            if not base_currency or not quote_currency:
                parts = symbol.split('/')
                self.base_currency = base_currency or parts[0]
                self.quote_currency = quote_currency or parts[1]
            else:
                self.base_currency = base_currency
                self.quote_currency = quote_currency
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (BTCUSDT -> BTC/USDT)
            self.base_currency = base_currency
            self.quote_currency = quote_currency
            if base_currency and quote_currency:
                self.symbol = f"{base_currency}/{quote_currency}"
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
                parsed = self._parse_symbol_without_separator(symbol)
                if parsed:
                    self.base_currency, self.quote_currency = parsed
                    self.symbol = f"{self.base_currency}/{self.quote_currency}"
                else:
                    raise ValueError(f"Cannot parse symbol: {symbol}")

        # AutoTrade –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.order_life_time = order_life_time
        self.deal_quota = deal_quota
        self.profit_markup = profit_markup
        self.deal_count = deal_count
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enable_auto_update = enable_auto_update
        self.cache_ttl_seconds = cache_ttl_seconds
        
        # CCXT market –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.market_info: Optional[CCXTMarketInfo] = None
        self._market_cache_time: float = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'market_updates': 0,
            'validation_checks': 0,
            'calculation_operations': 0,
            'last_activity': int(time.time() * 1000)
        }

    # ===== CCXT INTEGRATION METHODS =====

    def update_from_ccxt_market(self, ccxt_market: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ CCXT market structure
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º CCXT market structure
            if not self._validate_ccxt_market(ccxt_market):
                logger.error(f"Invalid CCXT market structure for {self.symbol}")
                return False

            # –°–æ–∑–¥–∞–µ–º CCXTMarketInfo –∏–∑ CCXT –¥–∞–Ω–Ω—ã—Ö
            self.market_info = CCXTMarketInfo(
                id=ccxt_market.get('id', ''),
                symbol=ccxt_market.get('symbol', self.symbol),
                base=ccxt_market.get('base', self.base_currency),
                quote=ccxt_market.get('quote', self.quote_currency),
                base_id=ccxt_market.get('baseId'),
                quote_id=ccxt_market.get('quoteId'),
                active=ccxt_market.get('active', True),
                type=ccxt_market.get('type', 'spot'),
                spot=ccxt_market.get('spot', True),
                margin=ccxt_market.get('margin', False),
                future=ccxt_market.get('future', False),
                swap=ccxt_market.get('swap', False),
                option=ccxt_market.get('option', False),
                contract=ccxt_market.get('contract', False),
                linear=ccxt_market.get('linear'),
                inverse=ccxt_market.get('inverse'),
                precision=ccxt_market.get('precision', {}),
                limits=ccxt_market.get('limits', {}),
                maker=ccxt_market.get('maker', 0.001),
                taker=ccxt_market.get('taker', 0.001),
                info=ccxt_market.get('info', {}),
                last_updated=int(time.time() * 1000)
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._market_cache_time = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['market_updates'] += 1
            self.stats['last_activity'] = int(time.time() * 1000)

            logger.debug(f"‚úÖ Updated {self.symbol} with CCXT market data")
            logger.debug(f"   Precision: {self.market_info.precision}")
            logger.debug(f"   Limits: {self.market_info.limits}")
            logger.debug(f"   Fees: maker={self.market_info.maker}, taker={self.market_info.taker}")

            return True

        except Exception as e:
            logger.error(f"Failed to update {self.symbol} with CCXT market data: {e}")
            return False

    def is_market_data_fresh(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å market data
        """
        if not self.market_info:
            return False
        
        age_seconds = time.time() - self._market_cache_time
        return age_seconds < self.cache_ttl_seconds

    def get_ccxt_market_dict(self) -> Optional[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç market info –≤ —Ñ–æ—Ä–º–∞—Ç–µ CCXT market structure
        """
        if not self.market_info:
            return None

        return {
            'id': self.market_info.id,
            'symbol': self.market_info.symbol,
            'base': self.market_info.base,
            'quote': self.market_info.quote,
            'baseId': self.market_info.base_id,
            'quoteId': self.market_info.quote_id,
            'active': self.market_info.active,
            'type': self.market_info.type,
            'spot': self.market_info.spot,
            'margin': self.market_info.margin,
            'future': self.market_info.future,
            'swap': self.market_info.swap,
            'option': self.market_info.option,
            'contract': self.market_info.contract,
            'linear': self.market_info.linear,
            'inverse': self.market_info.inverse,
            'precision': self.market_info.precision,
            'limits': self.market_info.limits,
            'maker': self.market_info.maker,
            'taker': self.market_info.taker,
            'info': self.market_info.info
        }

    # ===== TRADING CALCULATIONS =====

    def calculate_order_amount_precision(self, amount: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º precision amount
        """
        if not self.market_info or 'amount' not in self.market_info.precision:
            return amount

        precision = self.market_info.precision['amount']
        
        if isinstance(precision, int):
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            return round(amount, precision)
        elif isinstance(precision, float):
            # –®–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            return round(amount / precision) * precision
        else:
            return amount

    def calculate_order_price_precision(self, price: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º precision price
        """
        if not self.market_info or 'price' not in self.market_info.precision:
            return price

        precision = self.market_info.precision['price']
        
        if isinstance(precision, int):
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            return round(price, precision)
        elif isinstance(precision, float):
            # –®–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            return round(price / precision) * precision
        else:
            return price

    def calculate_optimal_buy_amount(self, price: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ deal_quota
        """
        try:
            # –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            raw_amount = self.deal_quota / price
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º precision
            precise_amount = self.calculate_order_amount_precision(raw_amount)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            if self.market_info and 'amount' in self.market_info.limits:
                min_amount = self.market_info.limits['amount'].get('min', 0)
                if precise_amount < min_amount:
                    logger.warning(f"Calculated amount {precise_amount} below minimum {min_amount}")
                    precise_amount = min_amount
            
            self.stats['calculation_operations'] += 1
            return precise_amount

        except Exception as e:
            logger.error(f"Failed to calculate optimal buy amount: {e}")
            return 0.0

    def calculate_sell_price_with_profit(self, buy_price: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ —Å —É—á–µ—Ç–æ–º –∂–µ–ª–∞–µ–º–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –∏ –∫–æ–º–∏—Å—Å–∏–π
        """
        try:
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ñ–∏—Ç–∞
            maker_fee = self.market_info.maker if self.market_info else 0.001
            taker_fee = self.market_info.taker if self.market_info else 0.001
            
            # –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (–ø–æ–∫—É–ø–∫–∞ + –ø—Ä–æ–¥–∞–∂–∞)
            total_fee_rate = taker_fee + maker_fee
            
            # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ = —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ * (1 + –ø—Ä–æ—Ñ–∏—Ç + –∫–æ–º–∏—Å—Å–∏–∏)
            sell_price = buy_price * (1 + self.profit_markup + total_fee_rate)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º precision
            precise_sell_price = self.calculate_order_price_precision(sell_price)
            
            self.stats['calculation_operations'] += 1
            return precise_sell_price

        except Exception as e:
            logger.error(f"Failed to calculate sell price: {e}")
            return buy_price * 1.02  # Fallback 2%

    # ===== VALIDATION METHODS =====

    def validate_order_amount(self, amount: float) -> tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ CCXT limits
        """
        self.stats['validation_checks'] += 1
        
        if not self.market_info:
            return False, "Market info not available"

        try:
            limits = self.market_info.limits.get('amount', {})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            min_amount = limits.get('min')
            if min_amount is not None and amount < min_amount:
                return False, f"Amount {amount} below minimum {min_amount}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            max_amount = limits.get('max')
            if max_amount is not None and amount > max_amount:
                return False, f"Amount {amount} above maximum {max_amount}"
            
            return True, "Valid"

        except Exception as e:
            return False, f"Validation error: {str(e)}"

    def validate_order_price(self, price: float) -> tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –æ—Ä–¥–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ CCXT limits
        """
        self.stats['validation_checks'] += 1
        
        if not self.market_info:
            return False, "Market info not available"

        try:
            limits = self.market_info.limits.get('price', {})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
            min_price = limits.get('min')
            if min_price is not None and price < min_price:
                return False, f"Price {price} below minimum {min_price}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
            max_price = limits.get('max')
            if max_price is not None and price > max_price:
                return False, f"Price {price} above maximum {max_price}"
            
            return True, "Valid"

        except Exception as e:
            return False, f"Validation error: {str(e)}"

    def validate_order_cost(self, amount: float, price: float) -> tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ CCXT limits
        """
        self.stats['validation_checks'] += 1
        
        if not self.market_info:
            return False, "Market info not available"

        try:
            cost = amount * price
            limits = self.market_info.limits.get('cost', {})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            min_cost = limits.get('min')
            if min_cost is not None and cost < min_cost:
                return False, f"Order cost {cost} below minimum {min_cost}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            max_cost = limits.get('max')
            if max_cost is not None and cost > max_cost:
                return False, f"Order cost {cost} above maximum {max_cost}"
            
            return True, "Valid"

        except Exception as e:
            return False, f"Validation error: {str(e)}"

    def validate_trading_pair(self) -> tuple[bool, List[str]]:
        """
        –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
        """
        errors = []

        if not self.market_info:
            errors.append("Market info not loaded")
            return False, errors

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if not self.market_info.active:
            errors.append("Trading pair is not active")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏
        if not self.market_info.spot:
            errors.append("Spot trading not supported")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self.base_currency or not self.quote_currency:
            errors.append("Base or quote currency not defined")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö precision –¥–∞–Ω–Ω—ã—Ö
        if not self.market_info.precision:
            errors.append("Precision data missing")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–∏–º–∏—Ç–æ–≤
        if not self.market_info.limits:
            errors.append("Limits data missing")

        return len(errors) == 0, errors

    # ===== HELPER METHODS =====

    def _parse_symbol_without_separator(self, symbol: str) -> Optional[tuple[str, str]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–º–≤–æ–ª–∞ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (BTCUSDT -> (BTC, USDT))
        """
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ quote –≤–∞–ª—é—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        quote_currencies = ['USDT', 'USDC', 'BUSD', 'BTC', 'ETH', 'BNB', 'USD', 'EUR']
        
        for quote in quote_currencies:
            if symbol.endswith(quote):
                base = symbol[:-len(quote)]
                if len(base) >= 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
                    return base, quote
        
        return None

    def _validate_ccxt_market(self, market_data: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è CCXT market structure
        """
        required_fields = ['symbol', 'base', 'quote', 'active']
        
        for field in required_fields:
            if field not in market_data:
                logger.error(f"Missing required field in CCXT market: {field}")
                return False
        
        return True

    # ===== INFORMATION METHODS =====

    def get_trading_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        info = {
            'symbol': self.symbol,
            'base_currency': self.base_currency,
            'quote_currency': self.quote_currency,
            'autotrade_params': {
                'order_life_time': self.order_life_time,
                'deal_quota': self.deal_quota,
                'profit_markup': self.profit_markup,
                'deal_count': self.deal_count
            },
            'market_data_available': self.market_info is not None,
            'market_data_fresh': self.is_market_data_fresh(),
            'stats': self.stats.copy()
        }

        if self.market_info:
            info['ccxt_market_info'] = {
                'id': self.market_info.id,
                'active': self.market_info.active,
                'type': self.market_info.type,
                'precision': self.market_info.precision,
                'limits': self.market_info.limits,
                'maker_fee': self.market_info.maker,
                'taker_fee': self.market_info.taker,
                'last_updated': self.market_info.last_updated
            }

        return info

    def get_fees_info(self) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
        """
        if self.market_info:
            return {
                'maker': self.market_info.maker,
                'taker': self.market_info.taker,
                'total_round_trip': self.market_info.maker + self.market_info.taker
            }
        else:
            return {
                'maker': 0.001,
                'taker': 0.001,
                'total_round_trip': 0.002
            }

    def update_autotrade_params(
        self,
        order_life_time: Optional[int] = None,
        deal_quota: Optional[float] = None,
        profit_markup: Optional[float] = None,
        deal_count: Optional[int] = None
    ):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ AutoTrade
        """
        if order_life_time is not None:
            self.order_life_time = order_life_time
        if deal_quota is not None:
            self.deal_quota = deal_quota
        if profit_markup is not None:
            self.profit_markup = profit_markup
        if deal_count is not None:
            self.deal_count = deal_count

        self.stats['last_activity'] = int(time.time() * 1000)
        logger.info(f"Updated AutoTrade params for {self.symbol}")

    def reset_statistics(self):
        """
        –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        self.stats = {
            'market_updates': 0,
            'validation_checks': 0,
            'calculation_operations': 0,
            'last_activity': int(time.time() * 1000)
        }

    # ===== LEGACY COMPATIBILITY =====

    @property
    def precision(self) -> Dict[str, Any]:
        """LEGACY: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç precision –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.market_info.precision if self.market_info else {}

    @property
    def limits(self) -> Dict[str, Any]:
        """LEGACY: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç limits –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.market_info.limits if self.market_info else {}

    @property
    def taker_fee(self) -> float:
        """LEGACY: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç taker fee –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.market_info.taker if self.market_info else 0.001

    @property
    def maker_fee(self) -> float:
        """LEGACY: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç maker fee –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.market_info.maker if self.market_info else 0.001

    def update_exchange_info(self, market_data: Dict[str, Any]):
        """LEGACY: –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        self.update_from_ccxt_market(market_data)

    # ===== STRING REPRESENTATIONS =====

    def __repr__(self):
        return (f"CCXTCurrencyPair(symbol={self.symbol}, "
                f"quota={self.deal_quota}, profit={self.profit_markup*100:.1f}%, "
                f"market_data={'‚úì' if self.market_info else '‚úó'})")

    def __str__(self):
        return f"{self.symbol} ({self.base_currency}/{self.quote_currency})"


# ===== FACTORY FUNCTIONS =====

def create_ccxt_currency_pair_from_symbol(symbol: str, **kwargs) -> CCXTCurrencyPair:
    """
    Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CCXTCurrencyPair –∏–∑ —Å–∏–º–≤–æ–ª–∞
    """
    return CCXTCurrencyPair(symbol=symbol, **kwargs)


def create_ccxt_currency_pair_from_market(ccxt_market: Dict[str, Any], **kwargs) -> CCXTCurrencyPair:
    """
    Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CCXTCurrencyPair –∏–∑ CCXT market data
    """
    pair = CCXTCurrencyPair(
        symbol=ccxt_market['symbol'],
        base_currency=ccxt_market['base'],
        quote_currency=ccxt_market['quote'],
        **kwargs
    )
    
    pair.update_from_ccxt_market(ccxt_market)
    return pair