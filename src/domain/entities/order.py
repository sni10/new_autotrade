# domain/entities/order.py.new - ENHANCED –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
import time
from typing import Optional, Dict, Any
from dataclasses import dataclass, field

class Order:
    """
    üöÄ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø —Å—É—â–Ω–æ—Å—Ç—å "–û—Ä–¥–µ—Ä" –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –±–∏—Ä–∂–µ
    –î–æ–±–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–≤—ã–º API
    """

    # –°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–∞
    STATUS_OPEN = "OPEN"
    STATUS_CLOSED = "CLOSED"
    STATUS_CANCELED = "CANCELED"
    STATUS_FAILED = "FAILED"
    STATUS_PENDING = "PENDING"
    STATUS_FILLED = "FILLED"          # üÜï –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω
    STATUS_PARTIALLY_FILLED = "PARTIALLY_FILLED"  # üÜï –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω

    # –°—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞
    SIDE_BUY = "BUY"
    SIDE_SELL = "SELL"

    # –¢–∏–ø—ã –æ—Ä–¥–µ—Ä–∞
    TYPE_LIMIT = "LIMIT"
    TYPE_MARKET = "MARKET"
    TYPE_STOP_LOSS = "STOP_LOSS"      # üÜï –°—Ç–æ–ø-–ª–æ—Å—Å
    TYPE_TAKE_PROFIT = "TAKE_PROFIT"  # üÜï –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç

    def __init__(
        self,
        order_id: int,
        side: str,
        order_type: str,
        price: float = 0.0,
        amount: float = 0.0,
        status: str = STATUS_PENDING,
        created_at: int = None,
        closed_at: int = None,
        deal_id: int = None,
        # üÜï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–õ–Ø –î–õ–Ø –ë–ò–†–ñ–ò:
        exchange_id: Optional[str] = None,      # ID –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
        symbol: Optional[str] = None,           # –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
        filled_amount: float = 0.0,             # –ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
        remaining_amount: float = 0.0,          # –û—Å—Ç–∞–≤—à–∏–π—Å—è –æ–±—ä–µ–º
        average_price: float = 0.0,             # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        fees: float = 0.0,                      # –ö–æ–º–∏—Å—Å–∏–∏
        fee_currency: str = "USDT",             # –í–∞–ª—é—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
        # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø:
        time_in_force: str = "GTC",             # Good Till Cancelled
        client_order_id: Optional[str] = None,  # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID
        exchange_timestamp: Optional[int] = None, # –í—Ä–µ–º—è –Ω–∞ –±–∏—Ä–∂–µ
        last_update: Optional[int] = None,      # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        error_message: Optional[str] = None,    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        retries: int = 0,                       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        # üÜï –ú–ï–¢–ê–î–ê–ù–ù–´–ï:
        metadata: Optional[Dict[str, Any]] = None  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    ):
        self.order_id = order_id
        self.side = side
        self.order_type = order_type
        self.price = price
        self.amount = amount
        self.status = status
        self.created_at = created_at or int(time.time() * 1000)
        self.closed_at = closed_at
        self.deal_id = deal_id

        # üÜï –ë–∏—Ä–∂–µ–≤—ã–µ –ø–æ–ª—è
        self.exchange_id = exchange_id
        self.symbol = symbol
        self.filled_amount = filled_amount
        self.remaining_amount = remaining_amount or amount  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é = amount
        self.average_price = average_price
        self.fees = fees
        self.fee_currency = fee_currency

        # üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        self.time_in_force = time_in_force
        self.client_order_id = client_order_id
        self.exchange_timestamp = exchange_timestamp
        self.last_update = last_update or self.created_at
        self.error_message = error_message
        self.retries = retries
        self.metadata = metadata or {}

    # üÜï –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê
    def is_open(self) -> bool:
        """–û—Ä–¥–µ—Ä –æ—Ç–∫—Ä—ã—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return self.status == self.STATUS_OPEN

    def is_closed(self) -> bool:
        """–û—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç (–∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω)"""
        return self.status in [self.STATUS_CLOSED, self.STATUS_FILLED, self.STATUS_CANCELED]

    def is_filled(self) -> bool:
        """–û—Ä–¥–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω"""
        return self.status == self.STATUS_FILLED

    def is_partially_filled(self) -> bool:
        """–û—Ä–¥–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω"""
        return self.status == self.STATUS_PARTIALLY_FILLED

    def is_pending(self) -> bool:
        """–û—Ä–¥–µ—Ä –æ–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –±–∏—Ä–∂–µ"""
        return self.status == self.STATUS_PENDING

    def is_failed(self) -> bool:
        """–û—Ä–¥–µ—Ä –Ω–µ —Å–º–æ–≥ –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω"""
        return self.status == self.STATUS_FAILED

    # üÜï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ò–°–ü–û–õ–ù–ï–ù–ò–ï–ú
    def get_fill_percentage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (0.0 - 1.0)"""
        if self.amount == 0:
            return 0.0
        return min(self.filled_amount / self.amount, 1.0)

    def get_remaining_amount(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–π—Å—è –æ–±—ä–µ–º –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return max(self.amount - self.filled_amount, 0.0)

    def is_fully_filled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω –æ—Ä–¥–µ—Ä"""
        return self.filled_amount >= self.amount

    # üÜï –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê
    def update_from_exchange(self, exchange_data: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è None."""
        self.exchange_id = exchange_data.get('id', self.exchange_id)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        filled = exchange_data.get('filled')
        if filled is not None:
            self.filled_amount = float(filled)

        remaining = exchange_data.get('remaining')
        if remaining is not None:
            self.remaining_amount = float(remaining)

        average = exchange_data.get('average')
        if average is not None:
            self.average_price = float(average)

        if 'fee' in exchange_data and exchange_data['fee'] is not None:
            fee_cost = exchange_data['fee'].get('cost')
            if fee_cost is not None:
                self.fees = float(fee_cost)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∏
        exchange_status = exchange_data.get('status', '').lower()
        if exchange_status == 'closed':
            self.status = self.STATUS_FILLED
        elif exchange_status == 'canceled':
            self.status = self.STATUS_CANCELED
        elif exchange_status == 'open':
            if self.filled_amount > 0:
                self.status = self.STATUS_PARTIALLY_FILLED
            else:
                self.status = self.STATUS_OPEN

        self.last_update = int(time.time() * 1000)
        self.exchange_timestamp = exchange_data.get('timestamp', self.exchange_timestamp)

    def mark_as_placed(self, exchange_id: str, exchange_timestamp: int = None) -> None:
        """–ü–æ–º–µ—á–∞–µ—Ç –æ—Ä–¥–µ—Ä –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –Ω–∞ –±–∏—Ä–∂–µ"""
        self.exchange_id = exchange_id
        self.status = self.STATUS_OPEN
        self.exchange_timestamp = exchange_timestamp or int(time.time() * 1000)
        self.last_update = int(time.time() * 1000)

    def mark_as_failed(self, error_message: str) -> None:
        """–ü–æ–º–µ—á–∞–µ—Ç –æ—Ä–¥–µ—Ä –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π"""
        self.status = self.STATUS_FAILED
        self.error_message = error_message
        self.closed_at = int(time.time() * 1000)
        self.last_update = self.closed_at

    # üÜï –ú–ï–¢–û–î–´ –î–õ–Ø –ó–ê–ö–†–´–¢–ò–Ø
    def close(self, filled_amount: float = None, average_price: float = None):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π"""
        if filled_amount is not None:
            self.filled_amount = filled_amount
        if average_price is not None:
            self.average_price = average_price

        self.status = self.STATUS_FILLED if self.is_fully_filled() else self.STATUS_PARTIALLY_FILLED
        self.closed_at = int(time.time() * 1000)
        self.last_update = self.closed_at

    def cancel(self, reason: str = None):
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä"""
        self.status = self.STATUS_CANCELED
        self.closed_at = int(time.time() * 1000)
        self.last_update = self.closed_at
        if reason:
            self.error_message = f"Canceled: {reason}"

    # üÜï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–°–ß–ï–¢–û–í
    def calculate_total_cost(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π)"""
        price = self.average_price if self.average_price > 0 else self.price
        return self.filled_amount * price

    def calculate_total_cost_with_fees(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π"""
        return self.calculate_total_cost() + self.fees

    # üÜï –ú–ï–¢–û–î–´ –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò
    def validate_for_exchange(self) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ä–¥–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ –±–∏—Ä–∂—É"""
        if not self.symbol:
            return False, "Symbol is required"
        if self.amount <= 0:
            return False, "Amount must be positive"
        if self.side not in [self.SIDE_BUY, self.SIDE_SELL]:
            return False, "Invalid side"
        if self.order_type == self.TYPE_LIMIT and self.price <= 0:
            return False, "Price must be positive for limit orders"
        return True, "Valid"

    # üÜï –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ä–¥–µ—Ä –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            'order_id': self.order_id,
            'side': self.side,
            'order_type': self.order_type,
            'price': self.price,
            'amount': self.amount,
            'status': self.status,
            'created_at': self.created_at,
            'closed_at': self.closed_at,
            'deal_id': self.deal_id,
            'exchange_id': self.exchange_id,
            'symbol': self.symbol,
            'filled_amount': self.filled_amount,
            'remaining_amount': self.remaining_amount,
            'average_price': self.average_price,
            'fees': self.fees,
            'fee_currency': self.fee_currency,
            'time_in_force': self.time_in_force,
            'client_order_id': self.client_order_id,
            'exchange_timestamp': self.exchange_timestamp,
            'last_update': self.last_update,
            'error_message': self.error_message,
            'retries': self.retries,
            'metadata': self.metadata
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Order':
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(**data)

    def __repr__(self):
        fill_pct = self.get_fill_percentage() * 100
        return (f"<Order(id={self.order_id}, exchange_id={self.exchange_id}, "
                f"deal_id={self.deal_id}, side={self.side}, type={self.order_type}, "
                f"status={self.status}, price={self.price}, amount={self.amount}, "
                f"filled={self.filled_amount} ({fill_pct:.1f}%), fees={self.fees})>")

    def __str__(self):
        """–ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        return (f"{self.side} {self.amount} {self.symbol} at {self.price} "
                f"[{self.status}] filled: {self.filled_amount}")


# üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–†–î–ï–†–ê–ú–ò

@dataclass
class OrderValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–∞"""
    is_valid: bool
    errors: list[str] = field(default_factory=list)
    warnings: list[str] = field(default_factory=list)

@dataclass
class OrderExecutionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
    success: bool
    order: Optional[Order] = None
    error_message: Optional[str] = None
    exchange_response: Optional[Dict[str, Any]] = None

@dataclass
class ExchangeInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ —Å –±–∏—Ä–∂–∏"""
    symbol: str
    min_qty: float
    max_qty: float
    step_size: float
    min_price: float
    max_price: float
    tick_size: float
    min_notional: float
    fees: Dict[str, float]  # maker/taker fees
