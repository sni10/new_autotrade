# infrastructure/connectors/ccxt_exchange_connector.py
import asyncio
import logging
import time
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional, Tuple
from pathlib import Path
import ccxt.pro as ccxtpro
import ccxt

from src.domain.entities.order import Order
from src.config.config_loader import load_config

logger = logging.getLogger(__name__)


class CCXTExchangeConnector:
    """
    üöÄ CCXT COMPLIANT Exchange Connector
    
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å CCXT Unified API —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –∫ –±–∏—Ä–∂–µ.
    –í—Å–µ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º CCXT —Ñ–æ—Ä–º–∞—Ç–µ.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ WebSocket streams, —Ç–∞–∫ –∏ REST API.
    """

    def __init__(self, exchange_name: str = "binance", use_sandbox: bool = False):
        self.exchange_name = exchange_name.lower()
        self.use_sandbox = use_sandbox
        self.config = None
        self.rest_client: Optional[ccxt.Exchange] = None      # REST API –∫–ª–∏–µ–Ω—Ç
        self.stream_client: Optional[ccxtpro.Exchange] = None  # WebSocket –∫–ª–∏–µ–Ω—Ç
        
        # –ö—ç—à–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._markets_cache: Optional[Dict[str, Any]] = None
        self._markets_cache_time: float = 0
        self._markets_cache_ttl: float = 3600  # 1 —á–∞—Å
        
        self._tickers_cache: Dict[str, Dict[str, Any]] = {}
        self._tickers_cache_ttl: float = 10  # 10 —Å–µ–∫—É–Ω–¥
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._load_config()
        self._init_clients()

    def _load_config(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª—é—á–µ–π"""
        try:
            full_config = load_config()
            env_key = 'sandbox' if self.use_sandbox else 'production'
            self.config = full_config.get(self.exchange_name, {}).get(env_key, {})

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            private_key_path = self.config.get('privateKeyPath')
            if private_key_path and Path(private_key_path).exists():
                with open(private_key_path, 'r', encoding='utf-8') as f:
                    private_key = f.read().strip()
                self.config['secret'] = private_key
                self.config['privateKey'] = private_key

            logger.info(f"‚úÖ Config loaded for {self.exchange_name} ({'sandbox' if self.use_sandbox else 'production'})")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to load config: {e}")
            raise

    def _init_clients(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CCXT –∫–ª–∏–µ–Ω—Ç—ã (REST –∏ WebSocket)"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CCXT
            base_settings = {
                'apiKey': self.config.get('apiKey'),
                'secret': self.config.get('secret'),
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'spot',
                    'adjustForTimeDifference': True
                },
                'timeout': 30000,  # 30 —Å–µ–∫—É–Ω–¥
                'rateLimit': 50,   # 50ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            }

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º REST –∫–ª–∏–µ–Ω—Ç
            rest_class = getattr(ccxt, self.exchange_name)
            self.rest_client = rest_class(base_settings.copy())

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
            stream_settings = base_settings.copy()
            stream_settings['newUpdates'] = True
            stream_class = getattr(ccxtpro, self.exchange_name)
            self.stream_client = stream_class(stream_settings)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º sandbox mode
            if self.use_sandbox:
                self.rest_client.set_sandbox_mode(True)
                self.stream_client.set_sandbox_mode(True)
                logger.info("üß™ Sandbox mode enabled")

            logger.info(f"‚úÖ CCXT clients initialized for {self.exchange_name}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize CCXT clients: {e}")
            raise

    # ===== MARKET DATA METHODS =====

    async def load_markets(self, reload: bool = False) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö (CCXT markets)
        """
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (not reload and 
            self._markets_cache and 
            (current_time - self._markets_cache_time) < self._markets_cache_ttl):
            return self._markets_cache

        try:
            markets = await self.rest_client.load_markets(reload)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._markets_cache = markets
            self._markets_cache_time = current_time
            
            logger.debug(f"Loaded {len(markets)} markets from {self.exchange_name}")
            return markets
            
        except Exception as e:
            logger.error(f"Failed to load markets: {e}")
            raise

    async def fetch_ticker(self, symbol: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–∫–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã (CCXT ticker structure)
        """
        try:
            ticker = await self.rest_client.fetch_ticker(symbol)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä
            current_time = time.time()
            self._tickers_cache[symbol] = {
                'data': ticker,
                'timestamp': current_time
            }
            
            return ticker
            
        except Exception as e:
            logger.error(f"Failed to fetch ticker for {symbol}: {e}")
            raise

    async def fetch_order_book(self, symbol: str, limit: int = 100) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ (CCXT order book structure)
        """
        try:
            order_book = await self.rest_client.fetch_order_book(symbol, limit)
            return order_book
            
        except Exception as e:
            logger.error(f"Failed to fetch order book for {symbol}: {e}")
            raise

    async def fetch_trades(self, symbol: str, since: Optional[int] = None, limit: int = 100) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (CCXT trades structure)
        """
        try:
            trades = await self.rest_client.fetch_trades(symbol, since, limit)
            return trades
            
        except Exception as e:
            logger.error(f"Failed to fetch trades for {symbol}: {e}")
            raise

    async def fetch_ohlcv(self, symbol: str, timeframe: str = '1m', since: Optional[int] = None, limit: int = 100) -> List[List]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç OHLCV –¥–∞–Ω–Ω—ã–µ (CCXT OHLCV structure)
        """
        try:
            ohlcv = await self.rest_client.fetch_ohlcv(symbol, timeframe, since, limit)
            return ohlcv
            
        except Exception as e:
            logger.error(f"Failed to fetch OHLCV for {symbol}: {e}")
            raise

    # ===== STREAMING METHODS =====

    async def watch_ticker(self, symbol: str) -> Dict[str, Any]:
        """
        WebSocket —Å—Ç—Ä–∏–º —Ç–∏–∫–µ—Ä–æ–≤ (CCXT ticker structure)
        """
        try:
            ticker = await self.stream_client.watch_ticker(symbol)
            return ticker
            
        except Exception as e:
            logger.error(f"Failed to watch ticker for {symbol}: {e}")
            raise

    async def watch_order_book(self, symbol: str, limit: int = 100) -> Dict[str, Any]:
        """
        WebSocket —Å—Ç—Ä–∏–º —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ (CCXT order book structure)
        """
        try:
            order_book = await self.stream_client.watch_order_book(symbol, limit)
            return order_book
            
        except Exception as e:
            logger.error(f"Failed to watch order book for {symbol}: {e}")
            raise

    async def watch_trades(self, symbol: str) -> List[Dict[str, Any]]:
        """
        WebSocket —Å—Ç—Ä–∏–º —Å–¥–µ–ª–æ–∫ (CCXT trades structure)
        """
        try:
            trades = await self.stream_client.watch_trades(symbol)
            return trades
            
        except Exception as e:
            logger.error(f"Failed to watch trades for {symbol}: {e}")
            raise

    async def watch_ohlcv(self, symbol: str, timeframe: str = '1m') -> List[List]:
        """
        WebSocket —Å—Ç—Ä–∏–º OHLCV (CCXT OHLCV structure)
        """
        try:
            ohlcv = await self.stream_client.watch_ohlcv(symbol, timeframe)
            return ohlcv
            
        except Exception as e:
            logger.error(f"Failed to watch OHLCV for {symbol}: {e}")
            raise

    # ===== ORDER MANAGEMENT METHODS =====

    async def create_order(
        self,
        symbol: str,
        type: str,
        side: str,
        amount: float,
        price: Optional[float] = None,
        params: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CCXT order structure)
        """
        try:
            logger.info(f"üì§ Creating {side.upper()} {type.upper()} order: {amount} {symbol} @ {price}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ CCXT
            order_result = await self.rest_client.create_order(
                symbol=symbol,
                type=type,
                side=side,
                amount=amount,
                price=price,
                params=params or {}
            )
            
            logger.info(f"‚úÖ Order created successfully: {order_result.get('id', 'N/A')}")
            return order_result
            
        except ccxt.InsufficientFunds as e:
            logger.error(f"üí∏ Insufficient funds: {e}")
            raise
        except ccxt.InvalidOrder as e:
            logger.error(f"‚ùå Invalid order: {e}")
            raise
        except ccxt.NetworkError as e:
            logger.error(f"üåê Network error: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå Unexpected error creating order: {e}")
            raise

    async def create_limit_order(
        self,
        symbol: str,
        side: str,
        amount: float,
        price: float,
        params: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
        """
        return await self.create_order(symbol, 'limit', side, amount, price, params)

    async def create_market_order(
        self,
        symbol: str,
        side: str,
        amount: float,
        params: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä
        """
        return await self.create_order(symbol, 'market', side, amount, None, params)

    async def cancel_order(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CCXT order structure)
        """
        try:
            logger.info(f"‚ùå Cancelling order {order_id} for {symbol}")
            
            result = await self.rest_client.cancel_order(order_id, symbol)
            
            logger.info(f"‚úÖ Order cancelled successfully: {order_id}")
            return result
            
        except ccxt.OrderNotFound as e:
            logger.warning(f"‚ö†Ô∏è Order not found on exchange: {order_id}")
            raise
        except Exception as e:
            logger.error(f"‚ùå Error cancelling order {order_id}: {e}")
            raise

    async def fetch_order(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ (CCXT order structure)
        """
        try:
            order = await self.rest_client.fetch_order(order_id, symbol)
            return order
            
        except ccxt.OrderNotFound as e:
            logger.warning(f"‚ö†Ô∏è Order not found: {order_id}")
            raise
        except Exception as e:
            logger.error(f"Failed to fetch order {order_id}: {e}")
            raise

    async def fetch_orders(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ (CCXT orders structure)
        """
        try:
            orders = await self.rest_client.fetch_orders(symbol, since, limit)
            return orders
            
        except Exception as e:
            logger.error(f"Failed to fetch orders: {e}")
            raise

    async def fetch_open_orders(self, symbol: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (CCXT orders structure)
        """
        try:
            orders = await self.rest_client.fetch_open_orders(symbol)
            return orders
            
        except Exception as e:
            logger.error(f"Failed to fetch open orders: {e}")
            raise

    async def fetch_closed_orders(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (CCXT orders structure)
        """
        try:
            orders = await self.rest_client.fetch_closed_orders(symbol, since, limit)
            return orders
            
        except Exception as e:
            logger.error(f"Failed to fetch closed orders: {e}")
            raise

    # ===== BALANCE METHODS =====

    async def fetch_balance(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ (CCXT balance structure)
        """
        try:
            balance = await self.rest_client.fetch_balance()
            return balance
            
        except Exception as e:
            logger.error(f"Failed to fetch balance: {e}")
            raise

    async def get_available_balance(self, currency: str) -> float:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ –≤–∞–ª—é—Ç–µ
        """
        try:
            balance = await self.fetch_balance()
            return balance.get(currency, {}).get('free', 0.0)
            
        except Exception as e:
            logger.error(f"Failed to get available balance for {currency}: {e}")
            return 0.0

    async def get_total_balance(self, currency: str) -> float:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ –≤–∞–ª—é—Ç–µ
        """
        try:
            balance = await self.fetch_balance()
            return balance.get(currency, {}).get('total', 0.0)
            
        except Exception as e:
            logger.error(f"Failed to get total balance for {currency}: {e}")
            return 0.0

    # ===== TRADING HELPER METHODS =====

    async def check_sufficient_balance(
        self,
        symbol: str,
        side: str,
        amount: float,
        price: Optional[float] = None
    ) -> Tuple[bool, str, float]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
            markets = await self.load_markets()
            market = markets.get(symbol)
            if not market:
                logger.error(f"Market {symbol} not found")
                return False, "UNKNOWN", 0.0

            base_currency = market['base']
            quote_currency = market['quote']

            if side.lower() == 'buy':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–∞ –∫–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞
                if not price:
                    # –î–ª—è –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    ticker = await self.fetch_ticker(symbol)
                    price = ticker.get('ask', ticker.get('last', 0))
                
                required_amount = amount * price
                available = await self.get_available_balance(quote_currency)
                return available >= required_amount, quote_currency, available
                
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω—É–∂–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
                available = await self.get_available_balance(base_currency)
                return available >= amount, base_currency, available

        except Exception as e:
            logger.error(f"Error checking balance: {e}")
            return False, "UNKNOWN", 0.0

    async def get_market_info(self, symbol: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ (CCXT market structure)
        """
        try:
            markets = await self.load_markets()
            market = markets.get(symbol)
            if not market:
                raise ValueError(f"Symbol {symbol} not found in markets")
            
            return market
            
        except Exception as e:
            logger.error(f"Failed to get market info for {symbol}: {e}")
            raise

    async def get_trading_fees(self, symbol: str) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        """
        try:
            market = await self.get_market_info(symbol)
            return {
                'maker': market.get('maker', 0.001),
                'taker': market.get('taker', 0.001)
            }
            
        except Exception as e:
            logger.error(f"Failed to get trading fees for {symbol}: {e}")
            return {'maker': 0.001, 'taker': 0.001}

    async def calculate_order_cost(
        self,
        symbol: str,
        side: str,
        amount: float,
        price: Optional[float] = None
    ) -> Dict[str, Any]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            if not price:
                ticker = await self.fetch_ticker(symbol)
                if side.lower() == 'buy':
                    price = ticker.get('ask', ticker.get('last', 0))
                else:
                    price = ticker.get('bid', ticker.get('last', 0))

            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            base_cost = amount * price

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
            fees = await self.get_trading_fees(symbol)
            fee_rate = fees.get('taker', 0.001)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º taker fee –∫–∞–∫ –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É
            fee_cost = base_cost * fee_rate

            return {
                'base_cost': base_cost,
                'fee_cost': fee_cost,
                'total_cost': base_cost + fee_cost,
                'fee_rate': fee_rate,
                'price': price,
                'amount': amount
            }
            
        except Exception as e:
            logger.error(f"Failed to calculate order cost: {e}")
            raise

    # ===== AUTOTRADE INTEGRATION METHODS =====

    def create_order_from_autotrade(self, order: Order) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç AutoTrade Order –≤ CCXT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º Order
        is_valid, errors = order.validate_ccxt_compliance()
        if not is_valid:
            raise ValueError(f"Order validation failed: {'; '.join(errors)}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º CCXT-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        return {
            'symbol': order.symbol,
            'type': order.type,
            'side': order.side,
            'amount': order.amount,
            'price': order.price,
            'params': {
                'timeInForce': order.timeInForce,
                'clientOrderId': order.clientOrderId
            }
        }

    async def sync_order_with_exchange(self, order: Order) -> Order:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç AutoTrade Order —Å –±–∏—Ä–∂–µ–π
        """
        if not order.id:
            logger.warning("Cannot sync order without exchange ID")
            return order

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –±–∏—Ä–∂–∏
            ccxt_order = await self.fetch_order(order.id, order.symbol)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Order –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂–∏
            order.update_from_ccxt_response(ccxt_order)
            
            logger.debug(f"Synced order {order.id} with exchange")
            return order
            
        except ccxt.OrderNotFound:
            # –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ rejected
            order.status = Order.STATUS_REJECTED
            order.error_message = "Order not found on exchange"
            logger.warning(f"Order {order.id} not found on exchange")
            return order
            
        except Exception as e:
            logger.error(f"Failed to sync order {order.id}: {e}")
            raise

    # ===== CONNECTION MANAGEMENT =====

    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
        """
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º REST API
            await self.fetch_balance()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket (–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–∫–∏)
            await self.load_markets()
            
            logger.info(f"‚úÖ Connection test successful for {self.exchange_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Connection test failed: {e}")
            return False

    async def get_server_time(self) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –±–∏—Ä–∂–∏ (Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
        """
        try:
            if hasattr(self.rest_client, 'fetch_time'):
                return await self.rest_client.fetch_time()
            else:
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                return int(time.time() * 1000)
                
        except Exception as e:
            logger.warning(f"Failed to get server time: {e}")
            return int(time.time() * 1000)

    async def get_exchange_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∏—Ä–∂–∏
        """
        try:
            if hasattr(self.rest_client, 'fetch_status'):
                status = await self.rest_client.fetch_status()
                return status
            else:
                # Fallback - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ balance
                await self.fetch_balance()
                return {
                    'status': 'ok',
                    'updated': int(time.time() * 1000)
                }
                
        except Exception as e:
            logger.error(f"Failed to get exchange status: {e}")
            return {
                'status': 'error',
                'error': str(e),
                'updated': int(time.time() * 1000)
            }

    async def close(self) -> None:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∏—Ä–∂–µ–π
        """
        try:
            if self.rest_client:
                await self.rest_client.close()
                logger.debug("Closed REST client connection")
                
            if self.stream_client:
                await self.stream_client.close()
                logger.debug("Closed WebSocket client connection")
                
            logger.info(f"üîå Closed all connections for {self.exchange_name}")
            
        except Exception as e:
            logger.error(f"Error closing connections: {e}")

    # ===== UTILITY METHODS =====

    def get_exchange_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–µ
        """
        return {
            'exchange_name': self.exchange_name,
            'use_sandbox': self.use_sandbox,
            'has_rest_client': self.rest_client is not None,
            'has_stream_client': self.stream_client is not None,
            'markets_cached': self._markets_cache is not None,
            'markets_cache_age': time.time() - self._markets_cache_time if self._markets_cache else None,
            'ccxt_version': ccxt.__version__
        }

    def __repr__(self):
        return (f"CCXTExchangeConnector(exchange={self.exchange_name}, "
                f"sandbox={self.use_sandbox}, "
                f"rest_client={'‚úì' if self.rest_client else '‚úó'}, "
                f"stream_client={'‚úì' if self.stream_client else '‚úó'})")


# ===== FACTORY FUNCTION =====

def create_ccxt_connector(
    exchange_name: str = "binance",
    use_sandbox: bool = False
) -> CCXTExchangeConnector:
    """
    Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CCXT –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
    """
    return CCXTExchangeConnector(exchange_name, use_sandbox)


# ===== EXAMPLE USAGE =====

if __name__ == "__main__":
    async def example_usage():
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        connector = create_ccxt_connector("binance", use_sandbox=True)
        
        try:
            # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if await connector.test_connection():
                print("‚úÖ Connection successful!")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤
                markets = await connector.load_markets()
                print(f"üìä Loaded {len(markets)} markets")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
                ticker = await connector.fetch_ticker("BTC/USDT")
                print(f"üí∞ BTC/USDT: {ticker['last']}")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                balance = await connector.fetch_balance()
                print(f"üí≥ USDT balance: {balance.get('USDT', {}).get('free', 0)}")
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            
        finally:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            await connector.close()
    
    asyncio.run(example_usage())