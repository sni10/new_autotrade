# infrastructure/connectors/exchange_adapter.py
import logging
from typing import Dict, List, Any, Optional, Tuple
from src.infrastructure.connectors.ccxt_exchange_connector import CCXTExchangeConnector
from src.domain.entities.order import Order, OrderExecutionResult

logger = logging.getLogger(__name__)


class ExchangeAdapter:
    """
    üîÑ BACKWARD COMPATIBILITY ADAPTER
    
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –Ω–æ–≤—ã–º CCXT –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–º
    –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º AutoTrade. –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤—ã —Å—Ç–∞—Ä–æ–≥–æ API –≤ –Ω–æ–≤—ã–π CCXT —Ñ–æ—Ä–º–∞—Ç.
    """

    def __init__(self, exchange_name: str = "binance", use_sandbox: bool = False):
        self.ccxt_connector = CCXTExchangeConnector(exchange_name, use_sandbox)
        self.exchange_name = exchange_name
        self.use_sandbox = use_sandbox

    # ===== DIRECT DELEGATION METHODS =====

    async def load_markets(self, reload: bool = False) -> Dict[str, Any]:
        """–ü—Ä—è–º–∞—è –¥–µ–ª–µ–≥–∞—Ü–∏—è –∫ CCXT connector"""
        return await self.ccxt_connector.load_markets(reload)

    async def fetch_balance(self) -> Dict[str, Any]:
        """–ü—Ä—è–º–∞—è –¥–µ–ª–µ–≥–∞—Ü–∏—è –∫ CCXT connector"""
        return await self.ccxt_connector.fetch_balance()

    async def test_connection(self) -> bool:
        """–ü—Ä—è–º–∞—è –¥–µ–ª–µ–≥–∞—Ü–∏—è –∫ CCXT connector"""
        return await self.ccxt_connector.test_connection()

    async def close(self) -> None:
        """–ü—Ä—è–º–∞—è –¥–µ–ª–µ–≥–∞—Ü–∏—è –∫ CCXT connector"""
        await self.ccxt_connector.close()

    # ===== STREAMING METHODS (–ø—Ä—è–º–∞—è –¥–µ–ª–µ–≥–∞—Ü–∏—è) =====

    async def watch_ticker(self, symbol: str) -> Dict[str, Any]:
        """WebSocket —Å—Ç—Ä–∏–º —Ç–∏–∫–µ—Ä–æ–≤"""
        return await self.ccxt_connector.watch_ticker(symbol)

    async def watch_order_book(self, symbol: str) -> Dict[str, Any]:
        """WebSocket —Å—Ç—Ä–∏–º —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
        return await self.ccxt_connector.watch_order_book(symbol)

    async def watch_trades(self, symbol: str) -> List[Dict[str, Any]]:
        """WebSocket —Å—Ç—Ä–∏–º —Å–¥–µ–ª–æ–∫"""
        return await self.ccxt_connector.watch_trades(symbol)

    async def watch_ohlcv(self, symbol: str, timeframe: str = '1m') -> List[List]:
        """WebSocket —Å—Ç—Ä–∏–º OHLCV"""
        return await self.ccxt_connector.watch_ohlcv(symbol, timeframe)

    # ===== ADAPTED METHODS FOR BACKWARD COMPATIBILITY =====

    def _normalize_symbol(self, symbol: str) -> str:
        """
        LEGACY METHOD: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç 'ETHUSDT' -> 'ETH/USDT'
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        if not symbol:
            return None
        if '/' in symbol:
            return symbol
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
        if symbol.endswith('USDT'):
            return f"{symbol[:-4]}/USDT"
        elif symbol.endswith('USDC'):
            return f"{symbol[:-4]}/USDC"
        elif symbol.endswith('BTC'):
            return f"{symbol[:-3]}/BTC"
        elif symbol.endswith('ETH'):
            return f"{symbol[:-3]}/ETH"
        
        return symbol

    async def fetch_ticker(self, symbol: str) -> Dict[str, Any]:
        """LEGACY: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–∏–º–≤–æ–ª–∞"""
        normalized_symbol = self._normalize_symbol(symbol)
        return await self.ccxt_connector.fetch_ticker(normalized_symbol)

    async def fetch_order_book(self, symbol: str, limit: int = 100) -> Dict[str, Any]:
        """LEGACY: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–∏–º–≤–æ–ª–∞"""
        normalized_symbol = self._normalize_symbol(symbol)
        return await self.ccxt_connector.fetch_order_book(normalized_symbol, limit)

    async def create_order(
        self,
        symbol: str,
        side: str,
        order_type: str,
        amount: float,
        price: float = None,
        params: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """
        LEGACY: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª
        normalized_symbol = self._normalize_symbol(symbol)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∏–ø—ã –≤ CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        ccxt_type = self._convert_order_type_to_ccxt(order_type)
        ccxt_side = side.lower()
        
        return await self.ccxt_connector.create_order(
            symbol=normalized_symbol,
            type=ccxt_type,
            side=ccxt_side,
            amount=amount,
            price=price,
            params=params
        )

    async def cancel_order(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """LEGACY: –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–∏–º–≤–æ–ª–∞"""
        normalized_symbol = self._normalize_symbol(symbol)
        return await self.ccxt_connector.cancel_order(order_id, normalized_symbol)

    async def fetch_order(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """LEGACY: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–∏–º–≤–æ–ª–∞"""
        normalized_symbol = self._normalize_symbol(symbol)
        return await self.ccxt_connector.fetch_order(order_id, normalized_symbol)

    async def fetch_open_orders(self, symbol: str = None) -> List[Dict[str, Any]]:
        """LEGACY: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        normalized_symbol = self._normalize_symbol(symbol) if symbol else None
        return await self.ccxt_connector.fetch_open_orders(normalized_symbol)

    # ===== LEGACY BALANCE METHODS =====

    async def get_available_balance(self, currency: str) -> float:
        """LEGACY: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        return await self.ccxt_connector.get_available_balance(currency.upper())

    async def get_balance(self, currency: str) -> float:
        """LEGACY: –ê–ª–∏–∞—Å –¥–ª—è get_available_balance"""
        return await self.get_available_balance(currency)

    async def check_sufficient_balance(
        self,
        symbol: str,
        side: str,
        amount: float,
        price: float = None
    ) -> Tuple[bool, str, float]:
        """LEGACY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞"""
        normalized_symbol = self._normalize_symbol(symbol)
        return await self.ccxt_connector.check_sufficient_balance(
            normalized_symbol, side.lower(), amount, price
        )

    # ===== LEGACY SPECIFIC METHODS =====

    async def create_market_sell_order(self, symbol: str, amount: float) -> Optional[OrderExecutionResult]:
        """
        LEGACY: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        """
        try:
            normalized_symbol = self._normalize_symbol(symbol)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ CCXT
            result = await self.ccxt_connector.create_market_order(
                symbol=normalized_symbol,
                side='sell',
                amount=amount
            )
            
            if result:
                logger.info(f"‚úÖ Market SELL order created: {result.get('id', 'N/A')}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                return OrderExecutionResult(
                    success=True,
                    order=Order.from_ccxt_response(result),
                    exchange_response=result
                )
            else:
                logger.error("‚ùå Failed to create market sell order - no result")
                return OrderExecutionResult(
                    success=False,
                    error_message="No result from exchange"
                )
                
        except Exception as e:
            logger.error(f"‚ùå Error creating market sell order: {e}")
            return OrderExecutionResult(
                success=False,
                error_message=str(e)
            )

    async def get_symbol_info(self, symbol: str) -> Dict[str, Any]:
        """
        LEGACY: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        try:
            normalized_symbol = self._normalize_symbol(symbol)
            market = await self.ccxt_connector.get_market_info(normalized_symbol)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç ExchangeInfo
            limits = market.get('limits', {})
            precision = market.get('precision', {})
            
            return {
                'symbol': normalized_symbol,
                'min_qty': limits.get('amount', {}).get('min'),
                'max_qty': limits.get('amount', {}).get('max'),
                'step_size': precision.get('amount'),
                'min_price': limits.get('price', {}).get('min'),
                'max_price': limits.get('price', {}).get('max'),
                'tick_size': precision.get('price'),
                'min_notional': limits.get('cost', {}).get('min'),
                'fees': {
                    'maker': market.get('maker', 0.001),
                    'taker': market.get('taker', 0.001)
                },
                'precision': precision
            }
            
        except Exception as e:
            logger.error(f"Failed to get symbol info for {symbol}: {e}")
            raise

    # ===== AUTOTRADE INTEGRATION METHODS =====

    async def place_order_from_autotrade(self, order: Order) -> OrderExecutionResult:
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç AutoTrade Order –Ω–∞ –±–∏—Ä–∂–µ —á–µ—Ä–µ–∑ CCXT
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä
            is_valid, error_msg = order.validate_for_exchange_placement()
            if not is_valid:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"Order validation failed: {error_msg}"
                )

            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ CCXT
            ccxt_result = await self.ccxt_connector.create_order(
                symbol=order.symbol,
                type=order.type,
                side=order.side,
                amount=order.amount,
                price=order.price,
                params={
                    'timeInForce': order.timeInForce,
                    'clientOrderId': order.clientOrderId
                }
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂–∏
            order.update_from_ccxt_response(ccxt_result)
            order.mark_as_placed_on_exchange(
                ccxt_result['id'],
                ccxt_result.get('timestamp')
            )

            return OrderExecutionResult(
                success=True,
                order=order,
                exchange_response=ccxt_result
            )

        except Exception as e:
            logger.error(f"Failed to place order: {e}")
            order.mark_as_failed(str(e))
            
            return OrderExecutionResult(
                success=False,
                order=order,
                error_message=str(e)
            )

    async def sync_autotrade_order(self, order: Order) -> Order:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç AutoTrade Order —Å –±–∏—Ä–∂–µ–π
        """
        return await self.ccxt_connector.sync_order_with_exchange(order)

    # ===== UTILITY METHODS =====

    def _convert_order_type_to_ccxt(self, legacy_type: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ –≤ CCXT —Å—Ç–∞–Ω–¥–∞—Ä—Ç"""
        type_mapping = {
            'LIMIT': 'limit',
            'MARKET': 'market',
            'STOP_LOSS': 'stop',
            'TAKE_PROFIT': 'take_profit'
        }
        return type_mapping.get(legacy_type.upper(), legacy_type.lower())

    def _convert_order_status_from_ccxt(self, ccxt_status: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç CCXT —Å—Ç–∞—Ç—É—Å—ã –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        status_mapping = {
            'open': 'OPEN',
            'closed': 'FILLED',
            'canceled': 'CANCELED',
            'expired': 'EXPIRED',
            'rejected': 'FAILED',
            'pending': 'PENDING'
        }
        return status_mapping.get(ccxt_status.lower(), ccxt_status.upper())

    def get_adapter_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–∞–ø—Ç–µ—Ä–µ"""
        return {
            'adapter_type': 'ExchangeAdapter',
            'exchange_name': self.exchange_name,
            'use_sandbox': self.use_sandbox,
            'ccxt_connector_info': self.ccxt_connector.get_exchange_info(),
            'backward_compatibility': True
        }

    def __repr__(self):
        return (f"ExchangeAdapter(exchange={self.exchange_name}, "
                f"sandbox={self.use_sandbox}, "
                f"ccxt_connector={self.ccxt_connector})")


# ===== FACTORY FUNCTION FOR LEGACY COMPATIBILITY =====

def create_exchange_connector(exchange_name: str = "binance", use_sandbox: bool = False) -> ExchangeAdapter:
    """
    Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
    """
    return ExchangeAdapter(exchange_name, use_sandbox)


# –ê–ª–∏–∞—Å –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
CcxtExchangeConnector = ExchangeAdapter