# src/infrastructure/repositories/factory/repository_factory.py
import asyncio
from typing import Dict, Any
from config.config_loader import load_config
from infrastructure.database.postgres_provider import PostgresPersistenceProvider

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
from ..interfaces.deals_repository_interface import IDealsRepository
from ..interfaces.orders_repository_interface import IOrdersRepository
from ..interfaces.tickers_repository_interface import ITickersRepository
from ..interfaces.order_books_repository_interface import IOrderBooksRepository

# –ò–º–ø–æ—Ä—Ç—ã MemoryFirst —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
from ..memory_first.memory_first_deals_repository import MemoryFirstDealsRepository
from ..memory_first.memory_first_orders_repository import MemoryFirstOrdersRepository
from ..memory_first.memory_first_tickers_repository import MemoryFirstTickersRepository
from ..memory_first.memory_first_order_books_repository import MemoryFirstOrderBooksRepository

# –ò–º–ø–æ—Ä—Ç—ã Legacy —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π (–¥–ª—è fallback)
from ..deals_repository import InMemoryDealsRepository
from ..orders_repository import InMemoryOrdersRepository
from ..tickers_repository import InMemoryTickerRepository

import logging

logger = logging.getLogger(__name__)

class RepositoryFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π:
    
    –ê–¢–û–ú–ê–†–ù–´–ï –î–ê–ù–ù–´–ï (Deal, Order):
    - –£—Ä–æ–≤–µ–Ω—å 1: DataFrame –≤ –ø–∞–º—è—Ç–∏ (—Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥)
    - –£—Ä–æ–≤–µ–Ω—å 2: PostgreSQL (–º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
    
    –ü–û–¢–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï (Ticker, OrderBook):
    - –£—Ä–æ–≤–µ–Ω—å 1: DataFrame –≤ –ø–∞–º—è—Ç–∏ (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ)
    - –£—Ä–æ–≤–µ–Ω—å 2: Parquet —Ñ–∞–π–ª—ã (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–º–ø—ã)
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ backend'–æ–≤
    - Fallback –Ω–∞ legacy —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL
    - Graceful degradation –ø—Ä–∏ —Å–±–æ—è—Ö
    """
    
    def __init__(self):
        self.config = load_config()
        self.persistent_provider = None
        self._initialized = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        if self._initialized:
            return
            
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if self.config.get("database"):
                self.persistent_provider = PostgresPersistenceProvider(
                    self.config["database"]
                )
                await self.persistent_provider.connect()
                logger.info("‚úÖ PostgreSQL provider initialized")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                await self._create_database_schema()
                
            self._initialized = True
            logger.info("üöÄ RepositoryFactory initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize RepositoryFactory: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ PostgreSQL (fallback —Ä–µ–∂–∏–º)
            self.persistent_provider = None
    
    async def _create_database_schema(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.persistent_provider:
            return
            
        schema_sql = """
        -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–¥–µ–ª–æ–∫ (–ê–¢–û–ú–ê–†–ù–´–ï –î–ê–ù–ù–´–ï)
        CREATE TABLE IF NOT EXISTS deals (
            deal_id SERIAL PRIMARY KEY,
            currency_pair VARCHAR(20) NOT NULL,
            base_currency VARCHAR(10) NOT NULL,
            quote_currency VARCHAR(10) NOT NULL,
            deal_quota DECIMAL(18,8) NOT NULL,
            status VARCHAR(20) NOT NULL,
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW(),
            closed_at TIMESTAMP,
            buy_order_id INTEGER,
            sell_order_id INTEGER,
            profit DECIMAL(18,8) DEFAULT 0,
            UNIQUE(deal_id)
        );
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫
        CREATE INDEX IF NOT EXISTS idx_deals_status ON deals(status);
        CREATE INDEX IF NOT EXISTS idx_deals_currency_pair ON deals(currency_pair);
        CREATE INDEX IF NOT EXISTS idx_deals_created_at ON deals(created_at);
        
        -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤ (–ê–¢–û–ú–ê–†–ù–´–ï –î–ê–ù–ù–´–ï)
        CREATE TABLE IF NOT EXISTS orders (
            order_id SERIAL PRIMARY KEY,
            exchange_order_id VARCHAR(100),
            deal_id INTEGER,
            order_type VARCHAR(10) NOT NULL,
            side VARCHAR(10) NOT NULL,
            symbol VARCHAR(20) NOT NULL,
            amount DECIMAL(18,8) NOT NULL,
            price DECIMAL(18,8) NOT NULL,
            status VARCHAR(20) NOT NULL,
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW(),
            filled_amount DECIMAL(18,8) DEFAULT 0,
            fees DECIMAL(18,8) DEFAULT 0,
            commission DECIMAL(18,8) DEFAULT 0,
            UNIQUE(order_id)
        );
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
        CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
        CREATE INDEX IF NOT EXISTS idx_orders_deal_id ON orders(deal_id);
        CREATE INDEX IF NOT EXISTS idx_orders_exchange_id ON orders(exchange_order_id);
        CREATE INDEX IF NOT EXISTS idx_orders_symbol ON orders(symbol);
        
        -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ä–æ–≤ (–ü–û–¢–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
        CREATE TABLE IF NOT EXISTS tickers_history (
            id SERIAL PRIMARY KEY,
            symbol VARCHAR(20) NOT NULL,
            timestamp BIGINT NOT NULL,
            last_price DECIMAL(18,8) NOT NULL,
            bid_price DECIMAL(18,8),
            ask_price DECIMAL(18,8),
            volume DECIMAL(18,8),
            data JSONB,
            created_at TIMESTAMP DEFAULT NOW(),
            UNIQUE(symbol, timestamp)
        );
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
        CREATE INDEX IF NOT EXISTS idx_tickers_symbol_timestamp ON tickers_history(symbol, timestamp);
        CREATE INDEX IF NOT EXISTS idx_tickers_created_at ON tickers_history(created_at);
        
        -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–∫–∞–Ω–æ–≤ (–ü–û–¢–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
        CREATE TABLE IF NOT EXISTS order_books_history (
            id SERIAL PRIMARY KEY,
            symbol VARCHAR(20) NOT NULL,
            timestamp BIGINT NOT NULL,
            best_bid DECIMAL(18,8),
            best_ask DECIMAL(18,8),
            spread DECIMAL(18,8),
            data JSONB,
            created_at TIMESTAMP DEFAULT NOW(),
            UNIQUE(symbol, timestamp)
        );
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å—Ç–∞–∫–∞–Ω–æ–≤
        CREATE INDEX IF NOT EXISTS idx_order_books_symbol_timestamp ON order_books_history(symbol, timestamp);
        CREATE INDEX IF NOT EXISTS idx_order_books_created_at ON order_books_history(created_at);
        """
        
        try:
            async with self.persistent_provider._pool.acquire() as conn:
                await conn.execute(schema_sql)
            logger.info("‚úÖ Database schema created successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to create database schema: {e}")
    
    async def get_deals_repository(self) -> IDealsRepository:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–¥–µ–ª–æ–∫ (–ê–¢–û–ú–ê–†–ù–´–ï –î–ê–ù–ù–´–ï)"""
        storage_type = self.config.get("storage", {}).get("deals_type", "memory_first_postgres")
        
        try:
            if storage_type == "memory_first_postgres":
                if not self._initialized:
                    await self.initialize()
                
                repo = MemoryFirstDealsRepository(self.persistent_provider)
                logger.info("‚úÖ Created MemoryFirstDealsRepository")
                return repo
                
            elif storage_type == "in_memory_legacy":
                repo = InMemoryDealsRepository()
                logger.info("‚úÖ Created InMemoryDealsRepository (legacy)")
                return repo
                
            else:
                raise ValueError(f"Unknown deals storage type: {storage_type}")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to create deals repository: {e}")
            # Fallback –Ω–∞ legacy —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            logger.warning("üîÑ Falling back to InMemoryDealsRepository")
            return InMemoryDealsRepository()
    
    async def get_orders_repository(self) -> IOrdersRepository:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—Ä–¥–µ—Ä–æ–≤ (–ê–¢–û–ú–ê–†–ù–´–ï –î–ê–ù–ù–´–ï)"""
        storage_type = self.config.get("storage", {}).get("orders_type", "memory_first_postgres")
        
        try:
            if storage_type == "memory_first_postgres":
                if not self._initialized:
                    await self.initialize()
                
                repo = MemoryFirstOrdersRepository(self.persistent_provider)
                logger.info("‚úÖ Created MemoryFirstOrdersRepository")
                return repo
                
            elif storage_type == "in_memory_legacy":
                repo = InMemoryOrdersRepository(max_orders=50000)
                logger.info("‚úÖ Created InMemoryOrdersRepository (legacy)")
                return repo
                
            else:
                raise ValueError(f"Unknown orders storage type: {storage_type}")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to create orders repository: {e}")
            # Fallback –Ω–∞ legacy —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            logger.warning("üîÑ Falling back to InMemoryOrdersRepository")
            return InMemoryOrdersRepository(max_orders=50000)
    
    async def get_tickers_repository(self) -> ITickersRepository:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–∏–∫–µ—Ä–æ–≤ (–ü–û–¢–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï)"""
        storage_type = self.config.get("storage", {}).get("tickers_type", "memory_first_parquet")
        storage_config = self.config.get("storage", {})
        
        try:
            if storage_type == "memory_first_parquet":
                repo = MemoryFirstTickersRepository(
                    persistent_provider=self.persistent_provider,  # –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ PostgreSQL
                    batch_size=storage_config.get("batch_size", 10000),
                    dump_interval_minutes=storage_config.get("dump_interval_minutes", 5),
                    keep_last_n=100000
                )
                logger.info("‚úÖ Created MemoryFirstTickersRepository")
                return repo
                
            elif storage_type == "in_memory_legacy":
                repo = InMemoryTickerRepository(max_size=100000)
                logger.info("‚úÖ Created InMemoryTickerRepository (legacy)")
                return repo
                
            else:
                raise ValueError(f"Unknown tickers storage type: {storage_type}")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to create tickers repository: {e}")
            # Fallback –Ω–∞ legacy —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            logger.warning("üîÑ Falling back to InMemoryTickerRepository")
            return InMemoryTickerRepository(max_size=100000)
    
    async def get_order_books_repository(self) -> IOrderBooksRepository:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—Ç–∞–∫–∞–Ω–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ (–ü–û–¢–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï)"""
        storage_type = self.config.get("storage", {}).get("orderbooks_type", "memory_first_parquet")
        storage_config = self.config.get("storage", {})
        
        try:
            if storage_type == "memory_first_parquet":
                repo = MemoryFirstOrderBooksRepository(
                    persistent_provider=self.persistent_provider,  # –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ PostgreSQL
                    batch_size=storage_config.get("batch_size", 5000),
                    dump_interval_minutes=storage_config.get("dump_interval_minutes", 3),
                    keep_last_n=50000
                )
                logger.info("‚úÖ Created MemoryFirstOrderBooksRepository")
                return repo
                
            else:
                raise ValueError(f"Unknown order books storage type: {storage_type}")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to create order books repository: {e}")
            # –î–ª—è OrderBooks –Ω–µ—Ç legacy fallback, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
            logger.warning("üîÑ Creating minimal OrderBooksRepository fallback")
            return MemoryFirstOrderBooksRepository(
                persistent_provider=None,
                batch_size=1000,
                dump_interval_minutes=10,
                keep_last_n=10000
            )
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            if self.persistent_provider:
                await self.persistent_provider.close()
                logger.info("‚úÖ PostgreSQL provider closed")
                
            self._initialized = False
            logger.info("üîí RepositoryFactory closed")
            
        except Exception as e:
            logger.error(f"‚ùå Error closing RepositoryFactory: {e}")
    
    def get_storage_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        storage_config = self.config.get("storage", {})
        
        return {
            "deals_type": storage_config.get("deals_type", "memory_first_postgres"),
            "orders_type": storage_config.get("orders_type", "memory_first_postgres"),
            "tickers_type": storage_config.get("tickers_type", "memory_first_parquet"),
            "orderbooks_type": storage_config.get("orderbooks_type", "memory_first_parquet"),
            "batch_size": storage_config.get("batch_size", 10000),
            "dump_interval_minutes": storage_config.get("dump_interval_minutes", 5),
            "fallback_enabled": storage_config.get("fallback_enabled", True),
            "postgresql_available": self.persistent_provider is not None,
            "initialized": self._initialized
        }