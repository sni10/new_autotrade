# quick_swap.py (–≤–µ—Ä—Å–∏—è 4, —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–ª—è Windows)
import asyncio
import sys
import os
import logging
from decimal import Decimal

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows ---
# –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É, –¥–æ –ª—é–±—ã—Ö –≤—ã–∑–æ–≤–æ–≤ asyncio
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ sys.path –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'src')))

from infrastructure.connectors.exchange_connector import CcxtExchangeConnector

# --- –ù–ê–°–¢–†–û–ô–ö–ò –û–ü–ï–†–ê–¶–ò–ò ---
# ====================================================================
SIDE = "sell"  # –£–∫–∞–∂–∏—Ç–µ 'buy' –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ 'sell' –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
SYMBOL = "TURBO/USDT"  # –£–∫–∞–∂–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 'ETH/USDT'
AMOUNT = "0"  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ë–ê–ó–û–í–û–ô –≤–∞–ª—é—Ç–µ. –ï—Å–ª–∏ 0, –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å.
EXCHANGE_NAME = "binance" # –ë–∏—Ä–∂–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏—è sandbox)
# ====================================================================

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –∏–ª–∏ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞.
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ quick_swap.py")
    amount_dec = Decimal(AMOUNT)
    connector = None
    
    try:
        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ ---
        connector = CcxtExchangeConnector(exchange_name=EXCHANGE_NAME, use_sandbox=True)
        logger.info("‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç ---
        await connector.load_markets(reload=True)
        market = connector.client.markets.get(SYMBOL)
        if not market:
            logger.error(f"‚ùå –°–∏–º–≤–æ–ª '{SYMBOL}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ '{EXCHANGE_NAME}'.")
            return

        base_currency = market['base']
        quote_currency = market['quote']

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ ---
        logger.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")
        balance = await connector.fetch_balance()
        base_balance = Decimal(str(balance.get(base_currency, {}).get('free', 0.0)))
        quote_balance = Decimal(str(balance.get(quote_currency, {}).get('free', 0.0)))

        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: {base_balance:.8f} {base_currency}")
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: {quote_balance:.4f} {quote_currency}")

        # --- –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0, –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞ ---
        if amount_dec == 0:
            logger.info("üü° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ä–∞–≤–Ω–æ –Ω—É–ª—é. –ü–æ–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å.")
            return

        # --- –õ–æ–≥–∏–∫–∞ –æ–±–º–µ–Ω–∞ (–µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 0) ---
        logger.info(f"‚ñ∂Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏: {SIDE.upper()} {AMOUNT} {SYMBOL}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏
        if SIDE == 'sell':
            if amount_dec > base_balance:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {amount_dec} {base_currency}, –¥–æ—Å—Ç—É–ø–Ω–æ: {base_balance}")
                return
        else:  # buy
            ticker = await connector.fetch_ticker(SYMBOL)
            current_price = Decimal(str(ticker.last))
            required_quote_amount = amount_dec * current_price

            if required_quote_amount > quote_balance:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ ~{required_quote_amount:.4f} {quote_currency}, –¥–æ—Å—Ç—É–ø–Ω–æ: {quote_balance:.4f}")
                return

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        logger.info(f"üì§ –°–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ ({SIDE.upper()}) –æ—Ä–¥–µ—Ä–∞ –Ω–∞ {amount_dec} {base_currency}...")
        order_result = await connector.create_order(
            symbol=SYMBOL,
            side=SIDE,
            order_type='market',
            amount=float(amount_dec)
        )
        
        logger.info("üéâ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        logger.info("--- –†–ï–ó–£–õ–¨–¢–ê–¢ ---")
        logger.info(f"  ID –æ—Ä–¥–µ—Ä–∞: {order_result.get('id')}")
        logger.info(f"  –°—Ç–∞—Ç—É—Å: {order_result.get('status')}")
        logger.info(f"  –°–∏–º–≤–æ–ª: {order_result.get('symbol')}")
        logger.info(f"  –°—Ç–æ—Ä–æ–Ω–∞: {order_result.get('side')}")
        logger.info(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_result.get('filled')} {base_currency}")
        logger.info(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {order_result.get('average')} {quote_currency}")
        logger.info(f"  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order_result.get('cost')} {quote_currency}")
        fee_info = order_result.get('fee', {})
        if fee_info and fee_info.get('cost') is not None:
                logger.info(f"  –ö–æ–º–∏—Å—Å–∏—è: {fee_info.get('cost')} {fee_info.get('currency')}")
        logger.info("-----------------")

    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        if connector:
            await connector.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ asyncio –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Ç–ª–∞–¥—á–∏–∫–∞–º–∏
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("üõë –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")