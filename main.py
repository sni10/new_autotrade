# main.py - Clean version for AutoTrade v2.3.4
import asyncio
import sys
import os
import logging
import requests
import pytz
from datetime import datetime
try:
    import win32api
except ImportError:
    win32api = None
import time
from dotenv import load_dotenv

# --- –£—Å–ª–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows ---
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    try:
        import win32api
    except ImportError:
        win32api = None
        print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–æ–¥—É–ª—å 'pywin32' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
else:
    win32api = None

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ ---
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'src')))

from domain.entities.currency_pair import CurrencyPair
from domain.services.deals.deal_service import DealService
from domain.services.orders.order_service import OrderService
from domain.services.orders.order_execution_service import OrderExecutionService
from domain.services.orders.buy_order_monitor import BuyOrderMonitor
from domain.factories.order_factory import OrderFactory
from domain.factories.deal_factory import DealFactory
from domain.services.market_data.orderbook_analyzer import OrderBookAnalyzer
from domain.services.risk.stop_loss_monitor import StopLossMonitor
from domain.services.deals.deal_completion_monitor import DealCompletionMonitor

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–ø–∞–º—è—Ç—å, –∫–µ—à, —Ñ–∞–π–ª—ã - –ù–ï –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
from infrastructure.repositories.deals_repository import InMemoryDealsRepository
from infrastructure.repositories.orders_repository import InMemoryOrdersRepository
from infrastructure.connectors.exchange_connector import CcxtExchangeConnector
from config.config_loader import load_config
from application.use_cases.run_realtime_trading import run_realtime_trading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
import sys

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
file_handler = logging.FileHandler(
    f'logs/autotrade_{datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}.log',
    encoding='utf-8'
)

# –î–ª—è –∫–æ–Ω—Å–æ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º UTF-8 —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
console_handler = logging.StreamHandler(sys.stdout)
if sys.platform == "win32":
    # –ù–∞ Windows —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è stdout
    try:
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
    except AttributeError:
        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python
        pass

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[file_handler, console_handler]
)
logger = logging.getLogger(__name__)

def sync_time():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è Windows"""
    if win32api is None:
        logger.warning("‚ö†Ô∏è win32api –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return
    
    try:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è Windows...")
        response = requests.get('http://worldtimeapi.org/api/timezone/UTC', timeout=5)
        if response.status_code == 200:
            utc_time = datetime.fromisoformat(response.json()['datetime'].replace('Z', '+00:00'))
            win32api.SetSystemTime(utc_time.timetuple()[:8])
            logger.info("‚úÖ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å UTC")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ AutoTrade"""
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    sync_time()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    pair_cfg = config.get("currency_pair", {})
    
    base_currency = pair_cfg.get("base_currency", "MAGIC")
    quote_currency = pair_cfg.get("quote_currency", "USDT")
    symbol_ccxt = f"{base_currency}/{quote_currency}"
    symbol_display = f"{base_currency}/{quote_currency}"
    
    logger.info(f"üöÄ –ó–ê–ü–£–°–ö AutoTrade v2.3.4 –¥–ª—è {symbol_display}")
    
    buy_order_monitor = None
    stop_loss_monitor = None
    deal_completion_monitor = None
    pro_exchange_connector_prod = None
    pro_exchange_connector_sandbox = None
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
        pro_exchange_connector_prod = CcxtExchangeConnector(use_sandbox=False)
        pro_exchange_connector_sandbox = CcxtExchangeConnector(use_sandbox=True)
        logger.info("‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (Production, Sandbox)")
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (–ø–∞–º—è—Ç—å, –ù–ï –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
        deals_repo = InMemoryDealsRepository()
        orders_repo = InMemoryOrdersRepository(max_orders=50000)
        logger.info("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã (InMemory)")
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫ —Å exchange info
        order_factory = OrderFactory()
        symbol_info = await pro_exchange_connector_prod.get_symbol_info(symbol_ccxt)
        order_factory.update_exchange_info(symbol_ccxt, symbol_info)
        deal_factory = DealFactory(order_factory)
        logger.info(f"‚úÖ –§–∞–±—Ä–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã, Exchange info –¥–ª—è {symbol_ccxt} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ CurrencyPair —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–∏—Ä–∂–∏
        currency_pair = CurrencyPair(
            base_currency=base_currency,
            quote_currency=quote_currency,
            symbol=symbol_ccxt,
            order_life_time=pair_cfg.get("order_life_time", 1),
            deal_quota=pair_cfg.get("deal_quota", 25.0),
            profit_markup=pair_cfg.get("profit_markup", 0.015),  # 1.5%
            deal_count=pair_cfg.get("deal_count", 3),
        )
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º CurrencyPair –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂–∏
        currency_pair.update_exchange_info(symbol_info)
        logger.info(f"‚úÖ CurrencyPair —Å–æ–∑–¥–∞–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –±–∏—Ä–∂–∏ –¥–ª—è {currency_pair.symbol}")
        
        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        order_service = OrderService(orders_repo, order_factory, pro_exchange_connector_sandbox)
        deal_service = DealService(deals_repo, order_service, deal_factory, pro_exchange_connector_sandbox)
        order_execution_service = OrderExecutionService(order_service, deal_service, pro_exchange_connector_sandbox)
        orderbook_analyzer = OrderBookAnalyzer(config.get("orderbook_analyzer", {}))
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        buy_order_monitor_cfg = config.get("buy_order_monitor", {})
        buy_order_monitor = BuyOrderMonitor(
            order_service=order_service,
            deal_service=deal_service,
            exchange_connector=pro_exchange_connector_sandbox,
            max_age_minutes=buy_order_monitor_cfg.get("max_age_minutes", 15.0),
            max_price_deviation_percent=buy_order_monitor_cfg.get("max_price_deviation_percent", 3.0),
            check_interval_seconds=buy_order_monitor_cfg.get("check_interval_seconds", 10)
        )
        asyncio.create_task(buy_order_monitor.start_monitoring())
        logger.info("‚úÖ BuyOrderMonitor –∑–∞–ø—É—â–µ–Ω")
        
        # 7. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        deal_completion_monitor = DealCompletionMonitor(
            deal_service=deal_service,
            order_service=order_service,
            check_interval_seconds=30
        )
        asyncio.create_task(deal_completion_monitor.start_monitoring())
        logger.info("‚úÖ DealCompletionMonitor –∑–∞–ø—É—â–µ–Ω")
        
        # 8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        risk_config = config.get("risk_management", {})
        if risk_config.get("enable_stop_loss", False):
            smart_config = risk_config.get("smart_stop_loss", {})
            
            stop_loss_monitor = StopLossMonitor(
                deal_service=deal_service,
                order_execution_service=order_execution_service,
                exchange_connector=pro_exchange_connector_sandbox,
                orderbook_analyzer=orderbook_analyzer,
                stop_loss_percent=risk_config.get("stop_loss_percent", 2.0),
                check_interval_seconds=risk_config.get("stop_loss_check_interval_seconds", 60),
                warning_percent=smart_config.get("warning_percent", 5.0),
                critical_percent=smart_config.get("critical_percent", 10.0),
                emergency_percent=smart_config.get("emergency_percent", 15.0)
            )
            asyncio.create_task(stop_loss_monitor.start_monitoring())
            logger.info("‚úÖ StopLossMonitor –∑–∞–ø—É—â–µ–Ω —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–∫–∞–Ω–∞")
        
        # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å–∞
        if not await pro_exchange_connector_sandbox.test_connection():
            logger.error("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ –Ω–µ—É–¥–∞—á–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            return
        
        balance = await pro_exchange_connector_sandbox.fetch_balance()
        usdt_balance = balance.get('USDT', {}).get('free', 0.0)
        logger.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ: {usdt_balance:.4f} USDT")
        
        # 10. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        logger.info("="*80)
        logger.info("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£ –¢–û–†–ì–û–í–õ–ò")
        logger.info(f"   - –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {currency_pair.symbol}")
        logger.info(f"   - –ë—é–¥–∂–µ—Ç –Ω–∞ —Å–¥–µ–ª–∫—É: {currency_pair.deal_quota} USDT")
        logger.info(f"   - –†–µ–∂–∏–º: Sandbox (–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
        logger.info("="*80)
        
        # 11. –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        await run_realtime_trading(
            pro_exchange_connector_prod=pro_exchange_connector_prod,
            pro_exchange_connector_sandbox=pro_exchange_connector_sandbox,
            currency_pair=currency_pair,
            deal_service=deal_service,
            order_execution_service=order_execution_service,
            buy_order_monitor=buy_order_monitor,
            orderbook_analyzer=orderbook_analyzer,
            deal_completion_monitor=deal_completion_monitor,
            stop_loss_monitor=stop_loss_monitor if 'stop_loss_monitor' in locals() else None
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}", exc_info=True)
    finally:
        logger.info("üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        if buy_order_monitor:
            buy_order_monitor.stop_monitoring()
        if deal_completion_monitor:
            deal_completion_monitor.stop_monitoring()
        if 'stop_loss_monitor' in locals() and stop_loss_monitor:
            stop_loss_monitor.stop_monitoring()
        if pro_exchange_connector_prod:
            await pro_exchange_connector_prod.close()
        if pro_exchange_connector_sandbox:
            await pro_exchange_connector_sandbox.close()
        logger.info("üëã AutoTrade –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
    finally:
        logger.info("üëã AutoTrade –∑–∞–≤–µ—Ä—à–µ–Ω")