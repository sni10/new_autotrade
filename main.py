# main.py.new - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø Issue #7 OrderExecutionService + BuyOrderMonitor
import asyncio
import sys
import logging
from datetime import datetime
import pytz
import requests
import win32api
import time

# üÜï –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è Issue #7
from domain.entities.currency_pair import CurrencyPair
from domain.services.deal_service import DealService

# üöÄ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –°–ï–†–í–ò–°–´
from domain.services.order_service import OrderService  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .new –≤–µ—Ä—Å–∏—é
from domain.services.order_execution_service import OrderExecutionService  # –ù–û–í–´–ô –≥–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å
from domain.services.buy_order_monitor import BuyOrderMonitor  # üÜï –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–£–•–õ–Ø–ö–û–í
from domain.factories.order_factory import OrderFactory  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .new –≤–µ—Ä—Å–∏—é

# üöÄ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–ò
from infrastructure.repositories.deals_repository import InMemoryDealsRepository
from infrastructure.repositories.orders_repository import InMemoryOrdersRepository  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .new –≤–µ—Ä—Å–∏—é

# üöÄ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ù–ù–ï–ö–¢–û–†–´
from infrastructure.connectors.pro_exchange_connector import CcxtProMarketDataConnector
from infrastructure.connectors.exchange_connector import CcxtExchangeConnector  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .new –≤–µ—Ä—Å–∏—é

# Use-case –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
from application.use_cases.run_realtime_trading import run_realtime_trading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

if sys.platform == "win32":
    # –î–ª—è Windows-–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())


def time_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Binance"""
    try:
        response = requests.get('https://api.binance.com/api/v3/time')
        server_time = response.json()['serverTime']

        current_time = datetime.fromtimestamp(server_time / 1000)
        tz = pytz.timezone('Europe/Kiev')
        current_time = tz.localize(current_time)

        # Convert to UTC
        utc_dt = current_time.astimezone(pytz.utc)

        # Use the UTC datetime to set the system time
        win32api.SetSystemTime(
            utc_dt.year,
            utc_dt.month,
            utc_dt.weekday(),
            utc_dt.day,
            utc_dt.hour,
            utc_dt.minute,
            utc_dt.second,
            utc_dt.microsecond // 1000
        )
        logger.info("‚è∞ Time synchronized with Binance servers")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Failed to sync time: {e}")


async def main():
    """
    üöÄ –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OrderExecutionService (Issue #7) + BuyOrderMonitor
    """

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    time_sync()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    base_currency = "ETH"
    quote_currency = "USDT"
    symbol_ccxt = f"{base_currency}{quote_currency}"  # "MAGICUSDT"
    symbol_display = f"{base_currency}/{quote_currency}"  # "MAGIC/USDT"

    logger.info("üöÄ –ó–ê–ü–£–°–ö AutoTrade v2.2.0+ —Å OrderExecutionService + BuyOrderMonitor")
    logger.info(f"   üí± –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {symbol_display} ({symbol_ccxt})")
    logger.info(f"   üìä Issue #7: –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info(f"   üïí BuyOrderMonitor: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç—É—Ö—à–∏—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤ –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("="*60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è finally –±–ª–æ–∫–∞
    enhanced_exchange_connector = None
    buy_order_monitor = None

    try:
        # 1. üèóÔ∏è –°–û–ó–î–ê–ù–ò–ï –í–ê–õ–Æ–¢–ù–û–ô –ü–ê–†–´
        currency_pair = CurrencyPair(
            base_currency=base_currency,
            quote_currency=quote_currency,
            symbol=symbol_ccxt,
            order_life_time=1,
            deal_quota=15.0,        # –ë—é–¥–∂–µ—Ç –Ω–∞ —Å–¥–µ–ª–∫—É
            min_step=0.1,
            price_step=0.0001,
            profit_markup=1.5,      # –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å %
            deal_count=3000         # –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        )
        logger.info(f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {currency_pair.symbol}")

        # 2. üöÄ –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–ù–ï–ö–¢–û–†–û–í (Production + Sandbox)
        logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤...")

        # Production –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è live –¥–∞–Ω–Ω—ã—Ö (—Ç–∏–∫–µ—Ä—ã, —Å—Ç–∞–∫–∞–Ω—ã)
        pro_exchange_connector_prod = CcxtProMarketDataConnector(
            exchange_name="binance",
            use_sandbox=False
        )

        # Sandbox –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–æ—Ä–¥–µ—Ä–∞, –±–∞–ª–∞–Ω—Å—ã)
        pro_exchange_connector_sandbox = CcxtProMarketDataConnector(
            exchange_name="binance",
            use_sandbox=True
        )

        # üÜï –ù–û–í–´–ô Enhanced Exchange Connector –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        enhanced_exchange_connector = CcxtExchangeConnector(
            exchange_name="binance",
            use_sandbox=True  # –í–ê–ñ–ù–û: –Ω–∞—á–∏–Ω–∞–µ–º —Å sandbox –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        )

        logger.info("‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info(f"   üì° Production connector: ‚úÖ (live data)")
        logger.info(f"   üß™ Sandbox connector: ‚úÖ (trading operations)")
        logger.info(f"   üöÄ Enhanced connector: ‚úÖ (real API calls)")

        # 3. üíæ –°–û–ó–î–ê–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í (Enhanced –≤–µ—Ä—Å–∏–∏)
        logger.info("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")

        deals_repo = InMemoryDealsRepository()

        # üÜï ENHANCED Orders Repository —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º
        orders_repo = InMemoryOrdersRepository(max_orders=50000)

        logger.info("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        logger.info(f"   üìã Deals repository: InMemory")
        logger.info(f"   üì¶ Orders repository: Enhanced InMemory (max: 50K)")

        # 4. üè≠ –°–û–ó–î–ê–ù–ò–ï –§–ê–ë–†–ò–ö (Enhanced –≤–µ—Ä—Å–∏–∏)
        logger.info("üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫...")

        # üÜï ENHANCED Order Factory —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        order_factory = OrderFactory()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º exchange info –¥–ª—è —Ñ–∞–±—Ä–∏–∫–∏
        try:
            symbol_info = await enhanced_exchange_connector.get_symbol_info(symbol_ccxt)
            order_factory.update_exchange_info(symbol_ccxt, symbol_info)
            logger.info(f"‚úÖ Exchange info –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è {symbol_ccxt}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to load exchange info: {e}")

        # Deal Factory (–æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞—Ä–æ–π)
        from domain.factories.deal_factory import DealFactory
        deal_factory = DealFactory(order_factory)

        logger.info("‚úÖ –§–∞–±—Ä–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
        logger.info(f"   üè≠ Order Factory: Enhanced —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
        logger.info(f"   üè≠ Deal Factory: Standard")

        # 5. üéõÔ∏è –°–û–ó–î–ê–ù–ò–ï –°–ï–†–í–ò–°–û–í (Issue #7)
        logger.info("üéõÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # üöÄ ENHANCED Order Service —Å —Ä–µ–∞–ª—å–Ω—ã–º API
        order_service = OrderService(
            orders_repo=orders_repo,
            order_factory=order_factory,
            exchange_connector=enhanced_exchange_connector  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API
        )

        # Deal Service (–æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–º)
        deal_service = DealService(deals_repo, order_service, deal_factory)

        # üÜï –ì–õ–ê–í–ù–´–ô OrderExecutionService (Issue #7)
        order_execution_service = OrderExecutionService(
            order_service=order_service,
            deal_service=deal_service,
            exchange_connector=enhanced_exchange_connector
        )

        # üïí –ù–û–í–´–ô BuyOrderMonitor (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É—Ö–ª—è–∫–æ–≤)
        buy_order_monitor = BuyOrderMonitor(
            order_service=order_service,
            exchange_connector=enhanced_exchange_connector,
            max_age_minutes=15.0,           # 15 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            max_price_deviation_percent=3.0, # 3% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            check_interval_seconds=60       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        )

        logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        logger.info(f"   üéõÔ∏è OrderService: Enhanced —Å —Ä–µ–∞–ª—å–Ω—ã–º API")
        logger.info(f"   üíº DealService: Standard")
        logger.info(f"   üöÄ OrderExecutionService: –ù–û–í–´–ô –≥–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
        logger.info(f"   üïí BuyOrderMonitor: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ç—É—Ö—à–∏—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤")

        # 6. üß™ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ò–†–ñ–ï
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ...")

        connection_test = await enhanced_exchange_connector.test_connection()
        if connection_test:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ —É—Å–ø–µ—à–Ω–æ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            try:
                balance = await enhanced_exchange_connector.fetch_balance()
                usdt_balance = balance.get('USDT', {}).get('free', 0.0)
                logger.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {usdt_balance:.4f} USDT")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Failed to fetch balance: {e}")
        else:
            logger.error("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ –Ω–µ—É–¥–∞—á–Ω–æ")
            logger.error("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            return

        # 7. ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê OrderExecutionService
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OrderExecutionService...")

        order_execution_service.configure_execution_settings(
            max_execution_time_sec=30.0,       # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            enable_risk_checks=True,           # –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–æ–≤
            enable_balance_checks=True,        # –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
            enable_slippage_protection=True    # –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç —Å–ª–∏–ø–ø–µ–¥–∂–∞
        )

        settings = order_execution_service.get_current_settings()
        logger.info("‚úÖ OrderExecutionService –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
        for key, value in settings.items():
            logger.info(f"   üìä {key}: {value}")

        # 8. üïí –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¢–£–•–õ–Ø–ö–û–í
        logger.info("üïí –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ç—É—Ö—à–∏—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤...")
        asyncio.create_task(buy_order_monitor.start_monitoring())

        monitor_stats = buy_order_monitor.get_statistics()
        logger.info("‚úÖ BuyOrderMonitor –∑–∞–ø—É—â–µ–Ω:")
        logger.info(f"   ‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {monitor_stats['max_age_minutes']} –º–∏–Ω—É—Ç")
        logger.info(f"   üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {monitor_stats['max_price_deviation_percent']}%")
        logger.info(f"   üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {monitor_stats['check_interval_seconds']} —Å–µ–∫—É–Ω–¥")

        # 9. üìä –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –°–ò–°–¢–ï–ú–´
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        orders_stats = orders_repo.get_statistics()
        logger.info(f"   üì¶ Orders repository: {orders_stats['total_orders']} –æ—Ä–¥–µ—Ä–æ–≤")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        order_stats = order_service.get_statistics()
        execution_stats = order_execution_service.get_execution_statistics()
        logger.info(f"   üéõÔ∏è OrderService: {order_stats['success_rate']:.1f}% success rate")
        logger.info(f"   üöÄ OrderExecutionService: {execution_stats['total_executions']} executions")

        # 10. üöÄ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–õ–ò
        logger.info("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£ –¢–û–†–ì–û–í–õ–ò")
        logger.info(f"   üí± –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {symbol_display}")
        logger.info(f"   üí∞ –ë—é–¥–∂–µ—Ç –Ω–∞ —Å–¥–µ–ª–∫—É: {currency_pair.deal_quota} USDT")
        logger.info(f"   üéØ –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {currency_pair.profit_markup}%")
        logger.info(f"   üìä –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è: ‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê (Issue #7)")
        logger.info(f"   üïí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É—Ö–ª—è–∫–æ–≤: ‚úÖ –í–ö–õ–Æ–ß–ï–ù")
        logger.info(f"   üß™ –†–µ–∂–∏–º: Sandbox (–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
        logger.info("="*80)

        # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å –Ω–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        await run_realtime_trading_enhanced(
            pro_exchange_connector_prod=pro_exchange_connector_prod,
            pro_exchange_connector_sandbox=pro_exchange_connector_sandbox,
            enhanced_exchange_connector=enhanced_exchange_connector,
            currency_pair=currency_pair,
            deal_service=deal_service,
            order_execution_service=order_execution_service,  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
            buy_order_monitor=buy_order_monitor  # üïí –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Ç—É—Ö–ª—è–∫–æ–≤
        )

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É—Ö–ª—è–∫–æ–≤
            if buy_order_monitor:
                buy_order_monitor.stop_monitoring()
                logger.info("üî¥ BuyOrderMonitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            if enhanced_exchange_connector:
                await enhanced_exchange_connector.close()
                logger.info("üîå Enhanced exchange connector closed")
        except Exception as e:
            logger.error(f"‚ùå Error closing connections: {e}")


async def run_realtime_trading_enhanced(
        pro_exchange_connector_prod,
        pro_exchange_connector_sandbox,
        enhanced_exchange_connector,
        currency_pair,
        deal_service,
        order_execution_service,
        buy_order_monitor
):
    """
    üöÄ –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Issue #7 + BuyOrderMonitor

    –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è run_realtime_trading.py –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
    –Ω–æ–≤—ã–π OrderExecutionService –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ç—É—Ö—à–∏—Ö BUY –æ—Ä–¥–µ—Ä–æ–≤
    """

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    from infrastructure.repositories.tickers_repository import InMemoryTickerRepository
    from domain.services.ticker_service import TickerService
    from application.utils.performance_logger import PerformanceLogger
    from domain.services.signal_cooldown_manager import SignalCooldownManager

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    repository = InMemoryTickerRepository(max_size=5000)
    ticker_service = TickerService(repository)
    logger_perf = PerformanceLogger(log_interval_seconds=10)
    cooldown_manager = SignalCooldownManager()

    counter = 0

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å OrderExecutionService + BuyOrderMonitor")

    try:
        while True:
            try:
                start_watch = time.time()

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
                ticker_data = await pro_exchange_connector_prod.client.watch_ticker(currency_pair.symbol)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ä–∞
                start_process = time.time()
                await ticker_service.process_ticker(ticker_data)
                end_process = time.time()

                processing_time = end_process - start_process
                counter += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
                if len(repository.tickers) < 50:
                    if counter % 100 == 0:
                        logger.info(f"üü° –ù–∞–∫–æ–ø–ª–µ–Ω–æ {len(repository.tickers)} —Ç–∏–∫–æ–≤, –Ω—É–∂–Ω–æ 50")
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
                ticker_signal = await ticker_service.get_signal()

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if len(repository.tickers) > 0:
                    last_ticker = repository.tickers[-1]
                    signals_count = len(last_ticker.signals) if last_ticker.signals else 0
                    logger_perf.log_tick(
                        price=float(last_ticker.close),
                        processing_time=processing_time,
                        signals_count=signals_count
                    )

                # üéØ –û–ë–†–ê–ë–û–¢–ö–ê –°–ò–ì–ù–ê–õ–ê –ü–û–ö–£–ü–ö–ò —Å OrderExecutionService
                if ticker_signal == "BUY":
                    if len(repository.tickers) > 0:
                        last_ticker = repository.tickers[-1]
                        if last_ticker.signals:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                            current_price = float(last_ticker.close)

                            # üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê –ê–ö–¢–ò–í–ù–´–• –°–î–ï–õ–û–ö
                            active_deals_count = len(deal_service.get_open_deals())
                            can_buy, reason = cooldown_manager.can_buy(
                                active_deals_count=active_deals_count,
                                max_deals=currency_pair.deal_count
                            )

                            if not can_buy:
                                if counter % 20 == 0:
                                    logger.info(f"üö´ BUY –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason} | –¶–µ–Ω–∞: {current_price}")
                                continue

                            # ‚úÖ –°–ò–ì–ù–ê–õ –†–ê–ó–†–ï–®–ï–ù
                            logger.info("\n" + "="*80)
                            logger.info("üü¢üî• MACD –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò –û–ë–ù–ê–†–£–ñ–ï–ù! –í–´–ü–û–õ–ù–Ø–ï–ú –ß–ï–†–ï–ó OrderExecutionService...")
                            logger.info("="*80)

                            macd = last_ticker.signals.get('macd', 0.0)
                            signal = last_ticker.signals.get('signal', 0.0)
                            hist = last_ticker.signals.get('histogram', 0.0)

                            logger.info(f"   üìà MACD > Signal: {macd:.6f} > {signal:.6f}")
                            logger.info(f"   üìä Histogram: {hist:.6f}")
                            logger.info(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} USDT")
                            logger.info(f"   üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {active_deals_count}/{currency_pair.deal_count}")

                            # üßÆ –†–ê–°–ß–ï–¢ –°–¢–†–ê–¢–ï–ì–ò–ò
                            try:
                                strategy_result = ticker_service.calculate_strategy(
                                    buy_price=current_price,
                                    budget=currency_pair.deal_quota,
                                    min_step=currency_pair.min_step,
                                    price_step=currency_pair.price_step,
                                    buy_fee_percent=0.1,
                                    sell_fee_percent=0.1,
                                    profit_percent=currency_pair.profit_markup
                                )

                                if isinstance(strategy_result, dict) and "comment" in strategy_result:
                                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ: {strategy_result['comment']}")
                                    continue

                                # üöÄ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ß–ï–†–ï–ó OrderExecutionService (Issue #7)
                                logger.info("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ OrderExecutionService...")

                                execution_result = await order_execution_service.execute_trading_strategy(
                                    currency_pair=currency_pair,
                                    strategy_result=strategy_result,
                                    metadata={
                                        'trigger': 'macd_signal',
                                        'macd_data': {
                                            'macd': macd,
                                            'signal': signal,
                                            'histogram': hist
                                        },
                                        'market_price': current_price,
                                        'timestamp': int(time.time() * 1000)
                                    }
                                )

                                if execution_result.success:
                                    logger.info("üéâ –°–¢–†–ê–¢–ï–ì–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
                                    logger.info(f"   ‚úÖ –°–¥–µ–ª–∫–∞: #{execution_result.deal_id}")
                                    logger.info(f"   üõí BUY –æ—Ä–¥–µ—Ä: {execution_result.buy_order.exchange_id}")
                                    logger.info(f"   üè∑Ô∏è SELL –æ—Ä–¥–µ—Ä: {execution_result.sell_order.exchange_id}")
                                    logger.info(f"   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {execution_result.total_cost:.4f} USDT")
                                    logger.info(f"   üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {execution_result.expected_profit:.4f} USDT")
                                    logger.info(f"   üí∏ –ö–æ–º–∏—Å—Å–∏–∏: {execution_result.fees:.4f} USDT")
                                    logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_result.execution_time_ms:.1f}ms")

                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                    execution_stats = order_execution_service.get_execution_statistics()
                                    logger.info(f"   üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {execution_stats['successful_executions']}/{execution_stats['total_executions']} —É—Å–ø–µ—à–Ω—ã—Ö")

                                else:
                                    logger.error("‚ùå –°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê!")
                                    logger.error(f"   üíî –û—à–∏–±–∫–∞: {execution_result.error_message}")
                                    if execution_result.warnings:
                                        for warning in execution_result.warnings:
                                            logger.warning(f"   ‚ö†Ô∏è {warning}")

                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
                                    execution_stats = order_execution_service.get_execution_statistics()
                                    logger.error(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫: {execution_stats['failed_executions']} –Ω–µ—É–¥–∞—á")

                            except Exception as calc_error:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {calc_error}")

                            logger.info("="*80)
                            logger.info("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...\n")

                # üìä –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–≤–∫–ª—é—á–∞—è BuyOrderMonitor)
                if counter % 100 == 0:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OrderExecutionService
                    execution_stats = order_execution_service.get_execution_statistics()
                    logger.info(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê OrderExecutionService (—Ç–∏–∫ {counter}):")
                    logger.info(f"   üöÄ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {execution_stats['total_executions']}")
                    logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {execution_stats['successful_executions']}")
                    logger.info(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {execution_stats['failed_executions']}")
                    logger.info(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {execution_stats['success_rate']:.1f}%")
                    logger.info(f"   üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: {execution_stats['total_volume']:.4f} USDT")
                    logger.info(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {execution_stats['average_execution_time_ms']:.1f}ms")

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
                    order_stats = order_execution_service.order_service.get_statistics()
                    logger.info(f"   üì¶ –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {order_stats['total_orders']}")
                    logger.info(f"   üîÑ –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {order_stats['open_orders']}")

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                    active_deals = len(deal_service.get_open_deals())
                    logger.info(f"   üíº –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {active_deals}")

                    # üïí –°–¢–ê–¢–ò–°–¢–ò–ö–ê BuyOrderMonitor
                    monitor_stats = buy_order_monitor.get_statistics()
                    logger.info(f"\nüïí –°–¢–ê–¢–ò–°–¢–ò–ö–ê BuyOrderMonitor:")
                    logger.info(f"   üîç –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {monitor_stats['checks_performed']}")
                    logger.info(f"   üö® –¢—É—Ö–ª—è–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {monitor_stats['stale_orders_found']}")
                    logger.info(f"   ‚ùå –û—Ä–¥–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ: {monitor_stats['orders_cancelled']}")
                    logger.info(f"   üîÑ –û—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ: {monitor_stats['orders_recreated']}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    finally:
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        logger.info("üö® –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

        emergency_result = await order_execution_service.emergency_stop_all_trading()
        logger.info(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {emergency_result.get('cancelled_orders', 0)}")
        logger.info(f"   üìä –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö: {emergency_result.get('remaining_open_orders', 0)}")
        logger.info(f"   üíº –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {emergency_result.get('open_deals', 0)}")

        # üïí –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BuyOrderMonitor
        final_monitor_stats = buy_order_monitor.get_statistics()
        logger.info("üïí –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê BuyOrderMonitor:")
        logger.info(f"   üîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {final_monitor_stats['checks_performed']}")
        logger.info(f"   üö® –í—Å–µ–≥–æ —Ç—É—Ö–ª—è–∫–æ–≤: {final_monitor_stats['stale_orders_found']}")
        logger.info(f"   ‚ùå –í—Å–µ–≥–æ –æ—Ç–º–µ–Ω–µ–Ω–æ: {final_monitor_stats['orders_cancelled']}")
        logger.info(f"   üîÑ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ: {final_monitor_stats['orders_recreated']}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OrderExecutionService
        final_stats = order_execution_service.get_execution_statistics()
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê OrderExecutionService:")
        logger.info(f"   üöÄ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {final_stats['total_executions']}")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {final_stats['successful_executions']}")
        logger.info(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {final_stats['success_rate']:.1f}%")
        logger.info(f"   üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: {final_stats['total_volume']:.4f} USDT")
        logger.info(f"   üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {final_stats['total_fees']:.4f} USDT")


if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üëã AutoTrade –∑–∞–≤–µ—Ä—à–µ–Ω")
