# main.py - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Å–æ–±—ã–º –∑–∞–ø—É—Å–∫–æ–º –¥–ª—è Windows
import asyncio
import sys
import os
import logging
import requests
import pytz
from datetime import datetime
from dotenv import load_dotenv

# --- –£—Å–ª–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows ---
# –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É, –¥–æ –ª—é–±—ã—Ö –≤—ã–∑–æ–≤–æ–≤ asyncio
if sys.platform == "win32":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –î–û –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    try:
        import win32api
    except ImportError:
        win32api = None
        print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–æ–¥—É–ª—å 'pywin32' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
else:
    win32api = None

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ ---
# –î–æ–±–∞–≤–ª—è–µ–º src –≤ sys.path –ü–ï–†–ï–î –≤—Å–µ–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'src')))

from domain.entities.currency_pair import CurrencyPair
from domain.services.deals.deal_service import DealService
from domain.services.orders.order_service import OrderService
from domain.services.orders.order_execution_service import OrderExecutionService
from domain.services.orders.buy_order_monitor import BuyOrderMonitor
from domain.factories.order_factory import OrderFactory
from domain.factories.deal_factory import DealFactory
from infrastructure.repositories.deals_repository import InMemoryDealsRepository
from infrastructure.repositories.orders_repository import InMemoryOrdersRepository
from infrastructure.connectors.exchange_connector import CcxtExchangeConnector
from config.config_loader import load_config
from application.use_cases.run_realtime_trading import run_realtime_trading
from domain.services.risk.stop_loss_monitor import StopLossMonitor
from domain.services.deals.deal_completion_monitor import DealCompletionMonitor
from domain.services.market_data.orderbook_analyzer import OrderBookAnalyzer

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
log_filename = f"autotrade_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.log"
log_filepath = os.path.join(log_dir, log_filename)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
file_handler = logging.FileHandler(log_filepath, encoding='utf-8')
stream_handler = logging.StreamHandler(sys.stdout) # –ò—Å–ø–æ–ª—å–∑—É–µ–º sys.stdout –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –æ–±–æ–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
stream_handler.setFormatter(formatter)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(
    level=logging.INFO,
    handlers=[
        file_handler,
        stream_handler
    ]
)
logger = logging.getLogger(__name__)

def time_sync_windows():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Binance –¥–ª—è Windows."""
    if not win32api:
        return
    try:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è Windows...")
        response = requests.get('https://api.binance.com/api/v3/time')
        server_time = response.json()['serverTime']
        utc_dt = datetime.fromtimestamp(server_time / 1000, tz=pytz.utc)
        day_of_week = (utc_dt.weekday() + 1) % 7
        win32api.SetSystemTime(utc_dt.year, utc_dt.month, day_of_week, utc_dt.day, utc_dt.hour, utc_dt.minute, utc_dt.second, int(utc_dt.microsecond / 1000))
        logger.info(f"‚è∞ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {utc_dt.strftime('%Y-%m-%d %H:%M:%S')} UTC")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è: {e}")

async def main():
    """üöÄ –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OrderExecutionService –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if sys.platform == "win32":
        time_sync_windows()

    config = load_config()
    pair_cfg = config.get("currency_pair", {})
    base_currency = pair_cfg.get("base_currency", "ETH")
    quote_currency = pair_cfg.get("quote_currency", "USDT")
    symbol_ccxt = f"{base_currency}{quote_currency}"
    symbol_display = f"{base_currency}/{quote_currency}"

    logger.info(f"üöÄ –ó–ê–ü–£–°–ö AutoTrade v2.3.0 –¥–ª—è {symbol_display}")
    
    buy_order_monitor = None
    stop_loss_monitor = None
    pro_exchange_connector_prod = None
    pro_exchange_connector_sandbox = None

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
        pro_exchange_connector_prod = CcxtExchangeConnector(use_sandbox=False)
        pro_exchange_connector_sandbox = CcxtExchangeConnector(use_sandbox=True)
        logger.info("‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (Production, Sandbox)")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        deals_repo = InMemoryDealsRepository()
        orders_repo = InMemoryOrdersRepository(max_orders=50000)
        logger.info("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã (InMemory)")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫
        order_factory = OrderFactory()
        symbol_info = await pro_exchange_connector_prod.get_symbol_info(symbol_ccxt)
        order_factory.update_exchange_info(symbol_ccxt, symbol_info)
        deal_factory = DealFactory(order_factory)
        logger.info(f"‚úÖ –§–∞–±—Ä–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã, Exchange info –¥–ª—è {symbol_ccxt} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        order_service = OrderService(orders_repo, order_factory, pro_exchange_connector_sandbox, currency_pair_symbol=symbol_ccxt)
        deal_service = DealService(deals_repo, order_service, deal_factory, pro_exchange_connector_sandbox)
        order_execution_service = OrderExecutionService(order_service, deal_service, pro_exchange_connector_sandbox)
        orderbook_analyzer = OrderBookAnalyzer(config.get("orderbook_analyzer", {}))
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã")

        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        buy_order_monitor_cfg = config.get("buy_order_monitor", {})
        buy_order_monitor = BuyOrderMonitor(
            order_service=order_service,
            exchange_connector=pro_exchange_connector_sandbox,
            max_age_minutes=buy_order_monitor_cfg.get("max_age_minutes", 15.0),
            max_price_deviation_percent=buy_order_monitor_cfg.get("max_price_deviation_percent", 3.0),
            check_interval_seconds=buy_order_monitor_cfg.get("check_interval_seconds", 60)
        )
        asyncio.create_task(buy_order_monitor.start_monitoring())
        logger.info("‚úÖ BuyOrderMonitor –∑–∞–ø—É—â–µ–Ω")

        # 5.2. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        deal_completion_monitor = DealCompletionMonitor(
            deal_service=deal_service,
            check_interval_seconds=30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        )
        asyncio.create_task(deal_completion_monitor.start_monitoring())
        logger.info("‚úÖ DealCompletionMonitor –∑–∞–ø—É—â–µ–Ω")

        risk_config = config.get("risk_management", {})
        if risk_config.get("enable_stop_loss", False):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            smart_config = risk_config.get("smart_stop_loss", {})
            
            stop_loss_monitor = StopLossMonitor(
                deal_service=deal_service,
                order_execution_service=order_execution_service,
                exchange_connector=pro_exchange_connector_prod,
                orderbook_analyzer=orderbook_analyzer,  # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–∞–∫–∞–Ω–∞
                stop_loss_percent=risk_config.get("stop_loss_percent", 2.0),
                check_interval_seconds=risk_config.get("stop_loss_check_interval_seconds", 60),
                warning_percent=smart_config.get("warning_percent", 5.0),
                critical_percent=smart_config.get("critical_percent", 10.0),
                emergency_percent=smart_config.get("emergency_percent", 15.0)
            )
            asyncio.create_task(stop_loss_monitor.start_monitoring())
            logger.info("‚úÖ StopLossMonitor –∑–∞–ø—É—â–µ–Ω —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–∫–∞–Ω–∞")

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å–∞
        if not await pro_exchange_connector_sandbox.test_connection():
            logger.error("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ –Ω–µ—É–¥–∞—á–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            return
        
        balance = await pro_exchange_connector_sandbox.fetch_balance()
        usdt_balance = balance.get('USDT', {}).get('free', 0.0)
        logger.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ: {usdt_balance:.4f} USDT")

        # 7. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ CurrencyPair
        currency_pair = CurrencyPair(
            base_currency=base_currency,
            quote_currency=quote_currency,
            symbol=symbol_ccxt,
            deal_quota=pair_cfg.get("deal_quota", 100.0),
            deal_count=pair_cfg.get("deal_count", 1),
            profit_markup=pair_cfg.get("profit_markup", 0.005)  # 0.5%
        )
        # –ó–ê–ì–†–£–ó–ö–ê –ê–ö–¢–£–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –° –ë–ò–†–ñ–ò
        markets = await pro_exchange_connector_prod.load_markets()
        market_details = markets.get(currency_pair.symbol)
        if market_details:
            currency_pair.update_exchange_info(market_details)
            logger.info(f"‚úÖ Config updated with precision and limits for {currency_pair.symbol}")

        # 8. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        logger.info("="*80)
        logger.info("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£ –¢–û–†–ì–û–í–õ–ò")
        logger.info(f'   - –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {symbol_display}')
        logger.info(f'   - –ë—é–¥–∂–µ—Ç –Ω–∞ —Å–¥–µ–ª–∫—É: {currency_pair.deal_quota} USDT')
        logger.info(f'   - –†–µ–∂–∏–º: Sandbox (–±–µ–∑–æ–ø–∞—Å–Ω–æ)')
        logger.info("="*80)

        await run_realtime_trading(
            pro_exchange_connector_prod=pro_exchange_connector_prod,
            pro_exchange_connector_sandbox=pro_exchange_connector_sandbox,
            currency_pair=currency_pair,
            deal_service=deal_service,
            order_execution_service=order_execution_service,
            buy_order_monitor=buy_order_monitor, # –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ
            orderbook_analyzer=orderbook_analyzer,
            deal_completion_monitor=deal_completion_monitor,  # –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            stop_loss_monitor=stop_loss_monitor if 'stop_loss_monitor' in locals() else None  # –ü–µ—Ä–µ–¥–∞–µ–º StopLossMonitor
        )

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}", exc_info=True)
    finally:
        logger.info("üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        if buy_order_monitor:
            buy_order_monitor.stop_monitoring()
        if 'deal_completion_monitor' in locals() and deal_completion_monitor:
            deal_completion_monitor.stop_monitoring()
        if 'stop_loss_monitor' in locals() and stop_loss_monitor:
            stop_loss_monitor.stop_monitoring()
        if pro_exchange_connector_prod:
            await pro_exchange_connector_prod.close()
        if pro_exchange_connector_sandbox:
            await pro_exchange_connector_sandbox.close()
        logger.info("üëã AutoTrade –∑–∞–≤–µ—Ä—à–µ–Ω")

# --- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è Windows –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º ---
if __name__ == "__main__":
    try:
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º –≤ —Å–ª–æ–∂–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö,
        # —Ç–∞–∫–∏—Ö –∫–∞–∫ –∑–∞–ø—É—Å–∫ –ø–æ–¥ –æ—Ç–ª–∞–¥—á–∏–∫–æ–º –≤ Windows.
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
    finally:
        logger.info("üëã AutoTrade –∑–∞–≤–µ—Ä—à–µ–Ω")