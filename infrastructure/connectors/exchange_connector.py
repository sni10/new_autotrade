# infrastructure/connectors/exchange_connector.py.new - ENHANCED –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
import json
import asyncio
import logging
from typing import Dict, List, Optional, Any, Tuple
from pathlib import Path
import ccxt
import ccxt.pro as ccxt_async
from domain.entities.order import ExchangeInfo

logger = logging.getLogger(__name__)

class CcxtExchangeConnector:
    """
    üöÄ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ ccxt –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
    """

    def __init__(self, exchange_name="binance", use_sandbox=False, config_path=None):
        self.exchange_name = exchange_name
        self.use_sandbox = use_sandbox
        self.config_path = config_path or "F:\\HOME\\new_autotrade\\config\\config.json"
        self.config = None
        self.client = None
        self.async_client = None

        # Rate limiting
        self.last_request_time = 0
        self.min_request_interval = 0.1  # 100ms between requests

        # Cache –¥–ª—è exchange info
        self.exchange_info_cache = {}
        self.symbols_cache = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._load_config()
        self._init_exchange_clients()

    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª—é—á–µ–π"""
        try:
            with open(self.config_path, 'r') as f:
                config = json.load(f)

            env_key = 'sandbox' if self.use_sandbox else 'production'
            self.config = config[self.exchange_name][env_key]

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ñ–∞–π–ª–∞
            private_key_path = self.config.get('privateKeyPath')
            if private_key_path and Path(private_key_path).exists():
                with open(private_key_path, 'r') as f:
                    private_key = f.read()
                self.config['secret'] = private_key

            logger.info(f"‚úÖ Config loaded for {self.exchange_name} ({env_key})")

        except Exception as e:
            logger.error(f"‚ùå Failed to load config: {e}")
            raise

    def _init_exchange_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç—ã"""
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            exchange_class = getattr(ccxt, self.exchange_name)
            self.client = exchange_class({
                'apiKey': self.config.get('apiKey'),
                'secret': self.config.get('secret'),
                'enableRateLimit': True,
                'rateLimit': 100,  # –º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                'options': {
                    'defaultType': 'spot',  # spot —Ç–æ—Ä–≥–æ–≤–ª—è
                }
            })

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            async_exchange_class = getattr(ccxt_async, self.exchange_name)
            self.async_client = async_exchange_class({
                'apiKey': self.config.get('apiKey'),
                'secret': self.config.get('secret'),
                'enableRateLimit': True,
                'rateLimit': 100,
                'options': {
                    'defaultType': 'spot',
                }
            })

            # –í–∫–ª—é—á–∞–µ–º sandbox —Ä–µ–∂–∏–º
            if self.use_sandbox:
                if hasattr(self.client, 'set_sandbox_mode'):
                    self.client.set_sandbox_mode(True)
                    self.async_client.set_sandbox_mode(True)
                    logger.info("üß™ Sandbox mode enabled")
                else:
                    logger.warning(f"‚ö†Ô∏è Sandbox mode not supported for {self.exchange_name}")

            logger.info(f"‚úÖ Exchange clients initialized")

        except Exception as e:
            logger.error(f"‚ùå Failed to initialize exchange clients: {e}")
            raise

    async def _rate_limit_wait(self):
        """–°–æ–±–ª—é–¥–∞–µ—Ç rate limiting"""
        import time
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        if time_since_last < self.min_request_interval:
            await asyncio.sleep(self.min_request_interval - time_since_last)
        self.last_request_time = time.time()

    # üöÄ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –¢–û–†–ì–û–í–õ–ò

    async def create_order(
        self,
        symbol: str,
        side: str,
        order_type: str,
        amount: float,
        price: float = None,
        params: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """
        üõí –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            side: buy –∏–ª–∏ sell
            order_type: limit, market, stop_loss, etc.
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        Returns:
            –û—Ç–≤–µ—Ç –±–∏—Ä–∂–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
        """
        await self._rate_limit_wait()

        try:
            logger.info(f"üì§ Creating {side.upper()} {order_type} order: {amount} {symbol} @ {price}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            order_params = params or {}

            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ async –∫–ª–∏–µ–Ω—Ç
            if order_type.lower() == 'limit':
                if price is None:
                    raise ValueError("Price required for limit orders")
                result = await self.async_client.create_order(
                    symbol, order_type, side, amount, price, None, order_params
                )
            elif order_type.lower() == 'market':
                result = await self.async_client.create_order(
                    symbol, order_type, side, amount, None, None, order_params
                )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ (stop_loss, take_profit)
                result = await self.async_client.create_order(
                    symbol, order_type, side, amount, price, None, order_params
                )

            logger.info(f"‚úÖ Order created successfully: {result.get('id', 'N/A')}")
            return result

        except ccxt.InsufficientFunds as e:
            logger.error(f"üí∏ Insufficient funds: {e}")
            raise
        except ccxt.InvalidOrder as e:
            logger.error(f"‚ùå Invalid order: {e}")
            raise
        except ccxt.NetworkError as e:
            logger.error(f"üåê Network error: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå Unexpected error creating order: {e}")
            raise

    async def cancel_order(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """
        ‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
        """
        await self._rate_limit_wait()

        try:
            logger.info(f"‚ùå Cancelling order {order_id} for {symbol}")

            result = await self.async_client.cancel_order(order_id, symbol)

            logger.info(f"‚úÖ Order cancelled successfully: {order_id}")
            return result

        except ccxt.OrderNotFound as e:
            logger.warning(f"‚ö†Ô∏è Order not found: {order_id}")
            raise
        except Exception as e:
            logger.error(f"‚ùå Error cancelling order {order_id}: {e}")
            raise

    async def fetch_order(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """
        üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ
        """
        await self._rate_limit_wait()

        try:
            result = await self.async_client.fetch_order(order_id, symbol)
            return result
        except Exception as e:
            logger.error(f"‚ùå Error fetching order {order_id}: {e}")
            raise

    async def fetch_open_orders(self, symbol: str = None) -> List[Dict[str, Any]]:
        """
        üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        """
        await self._rate_limit_wait()

        try:
            result = await self.async_client.fetch_open_orders(symbol)
            return result
        except Exception as e:
            logger.error(f"‚ùå Error fetching open orders: {e}")
            raise

    async def fetch_order_history(self, symbol: str = None, limit: int = 100) -> List[Dict[str, Any]]:
        """
        üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
        """
        await self._rate_limit_wait()

        try:
            result = await self.async_client.fetch_orders(symbol, None, limit)
            return result
        except Exception as e:
            logger.error(f"‚ùå Error fetching order history: {e}")
            raise

    # üí∞ –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–õ–ê–ù–°–û–ú

    async def fetch_balance(self) -> Dict[str, Any]:
        """
        üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        await self._rate_limit_wait()

        try:
            balance = await self.async_client.fetch_balance()

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            main_currencies = ['USDT', 'BTC', 'ETH', 'BNB']
            for currency in main_currencies:
                if currency in balance and balance[currency]['total'] > 0:
                    total = balance[currency]['total']
                    free = balance[currency]['free']
                    used = balance[currency]['used']
                    logger.info(f"üí∞ {currency}: {total:.4f} (free: {free:.4f}, used: {used:.4f})")

            return balance

        except Exception as e:
            logger.error(f"‚ùå Error fetching balance: {e}")
            raise

    async def get_available_balance(self, currency: str) -> float:
        """
        üíµ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
        """
        try:
            balance = await self.fetch_balance()
            return balance.get(currency, {}).get('free', 0.0)
        except Exception as e:
            logger.error(f"‚ùå Error getting balance for {currency}: {e}")
            return 0.0

    async def check_sufficient_balance(
        self,
        symbol: str,
        side: str,
        amount: float,
        price: float = None
    ) -> Tuple[bool, str, float]:
        """
        üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞

        Returns:
            tuple: (sufficient, currency, available_amount)
        """
        try:
            base_currency, quote_currency = symbol.replace('/', '').split('USDT')[0], 'USDT'
            if '/' in symbol:
                base_currency, quote_currency = symbol.split('/')

            if side.lower() == 'buy':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–∞ quote –≤–∞–ª—é—Ç–∞ (USDT)
                required_amount = amount * (price or 0)
                available = await self.get_available_balance(quote_currency)
                return available >= required_amount, quote_currency, available
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω—É–∂–Ω–∞ base –≤–∞–ª—é—Ç–∞ (BTC)
                available = await self.get_available_balance(base_currency)
                return available >= amount, base_currency, available

        except Exception as e:
            logger.error(f"‚ùå Error checking balance: {e}")
            return False, "UNKNOWN", 0.0

    # üìä –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –†–´–ù–û–ß–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò

    async def fetch_ticker(self, symbol: str) -> Dict[str, Any]:
        """
        üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ (—Ü–µ–Ω–∞, –æ–±—ä–µ–º, –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
        """
        await self._rate_limit_wait()

        try:
            ticker = await self.async_client.fetch_ticker(symbol)
            return ticker
        except Exception as e:
            logger.error(f"‚ùå Error fetching ticker for {symbol}: {e}")
            raise

    async def fetch_orderbook(self, symbol: str, limit: int = 100) -> Dict[str, Any]:
        """
        üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫
        """
        await self._rate_limit_wait()

        try:
            orderbook = await self.async_client.fetch_order_book(symbol, limit)
            return orderbook
        except Exception as e:
            logger.error(f"‚ùå Error fetching orderbook for {symbol}: {e}")
            raise

    async def fetch_exchange_info(self, symbol: str = None) -> Dict[str, Any]:
        """
        ‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏—Ä–∂–µ –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
        """
        await self._rate_limit_wait()

        try:
            if symbol and symbol in self.exchange_info_cache:
                return self.exchange_info_cache[symbol]

            # –î–ª—è ccxt –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ load_markets
            markets = await self.async_client.load_markets()

            if symbol:
                if symbol in markets:
                    info = markets[symbol]
                    self.exchange_info_cache[symbol] = info
                    return info
                else:
                    raise ValueError(f"Symbol {symbol} not found")

            return markets

        except Exception as e:
            logger.error(f"‚ùå Error fetching exchange info: {e}")
            raise

    async def get_symbol_info(self, symbol: str) -> ExchangeInfo:
        """
        üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ
        """
        try:
            market_info = await self.fetch_exchange_info(symbol)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ ccxt market info
            limits = market_info.get('limits', {})
            precision = market_info.get('precision', {})
            fees = market_info.get('fees', {})

            exchange_info = ExchangeInfo(
                symbol=symbol,
                min_qty=limits.get('amount', {}).get('min', 0.0),
                max_qty=limits.get('amount', {}).get('max', float('inf')),
                step_size=precision.get('amount', 0.00000001),
                min_price=limits.get('price', {}).get('min', 0.0),
                max_price=limits.get('price', {}).get('max', float('inf')),
                tick_size=precision.get('price', 0.00000001),
                min_notional=limits.get('cost', {}).get('min', 0.0),
                fees={
                    'maker': fees.get('trading', {}).get('maker', 0.001),
                    'taker': fees.get('trading', {}).get('taker', 0.001)
                }
            )

            return exchange_info

        except Exception as e:
            logger.error(f"‚ùå Error getting symbol info for {symbol}: {e}")
            raise

    # üîß –£–¢–ò–õ–ò–¢–ù–´–ï –ú–ï–¢–û–î–´

    async def test_connection(self) -> bool:
        """
        üîó –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∏—Ä–∂–µ–π
        """
        try:
            await self.fetch_balance()
            logger.info("‚úÖ Connection test successful")
            return True
        except Exception as e:
            logger.error(f"‚ùå Connection test failed: {e}")
            return False

    async def get_server_time(self) -> int:
        """
        ‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ –±–∏—Ä–∂–∏
        """
        try:
            await self._rate_limit_wait()
            # –î–ª—è ccxt –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch_time –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if hasattr(self.async_client, 'fetch_time'):
                return await self.async_client.fetch_time()
            else:
                # Fallback –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
                import time
                return int(time.time() * 1000)
        except Exception as e:
            logger.error(f"‚ùå Error getting server time: {e}")
            import time
            return int(time.time() * 1000)

    async def calculate_fees(self, symbol: str, amount: float, price: float, side: str) -> float:
        """
        üí∏ –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è –æ—Ä–¥–µ—Ä–∞
        """
        try:
            symbol_info = await self.get_symbol_info(symbol)
            fee_rate = symbol_info.fees.get('taker', 0.001)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º taker fee

            total_value = amount * price
            fee = total_value * fee_rate

            return fee

        except Exception as e:
            logger.error(f"‚ùå Error calculating fees: {e}")
            return 0.0

    # üßπ –ú–ï–¢–û–î–´ –û–ß–ò–°–¢–ö–ò

    async def close(self):
        """
        üîö –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        """
        try:
            if self.async_client:
                await self.async_client.close()
            logger.info("‚úÖ Exchange connector closed")
        except Exception as e:
            logger.error(f"‚ùå Error closing connector: {e}")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.async_client and hasattr(self.async_client, 'close'):
                import asyncio
                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å, –µ—Å–ª–∏ event loop –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                try:
                    loop = asyncio.get_event_loop()
                    if not loop.is_closed():
                        loop.create_task(self.async_client.close())
                except:
                    pass
        except:
            pass

    # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

    async def cancel_all_orders(self, symbol: str = None) -> List[Dict[str, Any]]:
        """
        üö® –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        """
        try:
            open_orders = await self.fetch_open_orders(symbol)
            cancelled_orders = []

            for order in open_orders:
                try:
                    result = await self.cancel_order(order['id'], order['symbol'])
                    cancelled_orders.append(result)
                except Exception as e:
                    logger.error(f"‚ùå Failed to cancel order {order['id']}: {e}")

            logger.info(f"‚úÖ Cancelled {len(cancelled_orders)} orders")
            return cancelled_orders

        except Exception as e:
            logger.error(f"‚ùå Error cancelling all orders: {e}")
            return []

    async def get_trade_history(self, symbol: str, limit: int = 100) -> List[Dict[str, Any]]:
        """
        üìú –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        """
        await self._rate_limit_wait()

        try:
            trades = await self.async_client.fetch_my_trades(symbol, None, limit)
            return trades
        except Exception as e:
            logger.error(f"‚ùå Error fetching trade history: {e}")
            return []


# üÜï –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–û –°–¢–ê–†–´–ú –ö–û–î–û–ú

class CcxtExchangeConnectorLegacy:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""

    def __init__(self, exchange_name="binance", use_sandbox=False):
        self.connector = CcxtExchangeConnector(exchange_name, use_sandbox)

    async def create_order(self, symbol, side, order_type, amount, price=None):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.connector.create_order(symbol, side, order_type, amount, price)

    async def cancel_order(self, order_id, symbol):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.connector.cancel_order(order_id, symbol)
