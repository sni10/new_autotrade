from typing import List, Dict
import statistics


class MarketAnalysisService:
    """üîç –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""

    def __init__(self):
        self.analysis_window = 20

    def analyze_volatility(self, prices: List[float]) -> Dict:
        """–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if len(prices) < self.analysis_window:
            return {"status": "insufficient_data", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}

        recent_prices = prices[-self.analysis_window:]

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        price_changes = []
        for i in range(1, len(recent_prices)):
            change = (recent_prices[i] - recent_prices[i - 1]) / recent_prices[i - 1]
            price_changes.append(abs(change))

        avg_volatility = statistics.mean(price_changes) * 100
        max_volatility = max(price_changes) * 100
        volatility_std = statistics.stdev(price_changes) * 100 if len(price_changes) > 1 else 0

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        risk_level = self._classify_risk(avg_volatility)
        trading_recommendation = self._get_trading_recommendation(avg_volatility)

        return {
            "avg_volatility": round(avg_volatility, 3),
            "max_volatility": round(max_volatility, 3),
            "volatility_std": round(volatility_std, 3),
            "risk_level": risk_level,
            "trading_recommendation": trading_recommendation,
            "should_trade": 0.03 <= avg_volatility <= 0.12
        }

    def _classify_risk(self, volatility: float) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞"""
        if volatility > 0.15:
            return "üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô"
        elif volatility > 0.08:
            return "‚ö° –í–´–°–û–ö–ò–ô"
        elif volatility > 0.03:
            return "üìä –°–†–ï–î–ù–ò–ô"
        else:
            return "üò¥ –ù–ò–ó–ö–ò–ô"

    def _get_trading_recommendation(self, volatility: float) -> str:
        """–î–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ"""
        if volatility > 0.15:
            return "‚ùå –ù–ï –¢–û–†–ì–û–í–ê–¢–¨ - —Å–ª–∏—à–∫–æ–º —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ"
        elif volatility > 0.12:
            return "‚ö†Ô∏è –û–°–¢–û–†–û–ñ–ù–û - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        elif volatility > 0.03:
            return "‚úÖ –ú–û–ñ–ù–û –¢–û–†–ì–û–í–ê–¢–¨"
        else:
            return "üü° –ù–ò–ó–ö–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ - –º–∞–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"

    def analyze_trend(self, prices: List[float], window: int = 10) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞"""
        if len(prices) < window:
            return {"status": "insufficient_data"}

        recent_prices = prices[-window:]
        first_price = recent_prices[0]
        last_price = recent_prices[-1]

        change_percent = (last_price - first_price) / first_price * 100

        # –°—á–∏—Ç–∞–µ–º –Ω–∞–∫–ª–æ–Ω —Ç—Ä–µ–Ω–¥–∞ (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        x_values = list(range(len(recent_prices)))
        slope = self._calculate_slope(x_values, recent_prices)

        trend_direction = "üìà –í–û–°–•–û–î–Ø–©–ò–ô" if slope > 0 else "üìâ –ù–ò–°–•–û–î–Ø–©–ò–ô" if slope < 0 else "‚û°Ô∏è –ë–û–ö–û–í–û–ô"

        return {
            "change_percent": round(change_percent, 2),
            "slope": round(slope, 6),
            "trend_direction": trend_direction,
            "strength": self._classify_trend_strength(abs(change_percent))
        }

    def _calculate_slope(self, x_values: List, y_values: List[float]) -> float:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞–∫–ª–æ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞"""
        n = len(x_values)
        sum_x = sum(x_values)
        sum_y = sum(y_values)
        sum_xy = sum(x * y for x, y in zip(x_values, y_values))
        sum_x2 = sum(x * x for x in x_values)

        slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x)
        return slope

    def _classify_trend_strength(self, change_percent: float) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞"""
        if change_percent > 2.0:
            return "üî• –°–ò–õ–¨–ù–´–ô"
        elif change_percent > 0.5:
            return "üìä –£–ú–ï–†–ï–ù–ù–´–ô"
        else:
            return "üò¥ –°–õ–ê–ë–´–ô"
