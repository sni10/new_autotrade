# domain/services/order_service.py.new - –†–ï–ê–õ–¨–ù–ê–Ø —Ç–æ—Ä–≥–æ–≤–ª—è —Å API
import asyncio
import logging
from typing import Optional, Dict, List, Any, Tuple
from domain.entities.order import Order, OrderValidationResult, OrderExecutionResult
from domain.factories.order_factory import OrderFactory
from infrastructure.repositories.orders_repository import OrdersRepository
from infrastructure.connectors.exchange_connector import CcxtExchangeConnector

logger = logging.getLogger(__name__)

class OrderService:
    """
    üöÄ –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –±–∏—Ä–∂–µ:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –†–ï–ê–õ–¨–ù–û–ô –±–∏—Ä–∂–µ
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API
    - –û—Ç–º–µ–Ω–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ retry –º–µ—Ö–∞–Ω–∏–∑–º—ã
    """

    def __init__(
        self,
        orders_repo: OrdersRepository,
        order_factory: OrderFactory,
        exchange_connector: CcxtExchangeConnector = None
    ):
        self.orders_repo = orders_repo
        self.order_factory = order_factory
        self.exchange_connector = exchange_connector

        # Retry parameters
        self.max_retries = 3
        self.retry_delay = 1.0  # seconds
        self.retry_backoff = 2.0  # exponential backoff multiplier

        # Statistics
        self.stats = {
            'orders_created': 0,
            'orders_executed': 0,
            'orders_failed': 0,
            'orders_cancelled': 0,
            'total_fees': 0.0
        }

    # üöÄ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –°–û–ó–î–ê–ù–ò–Ø –ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–û–í

    async def create_and_place_buy_order(
        self,
        symbol: str,
        amount: float,
        price: float,
        deal_id: int,
        order_type: str = Order.TYPE_LIMIT,
        client_order_id: Optional[str] = None
    ) -> OrderExecutionResult:
        """
        üõí –†–ï–ê–õ–¨–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ BUY –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            price: –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            deal_id: ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (LIMIT, MARKET)
            client_order_id: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID –æ—Ä–¥–µ—Ä–∞

        Returns:
            OrderExecutionResult —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        """
        try:
            logger.info(f"üõí Creating BUY order: {amount} {symbol} @ {price}")

            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            validation_result = await self._validate_order_params(
                symbol, Order.SIDE_BUY, amount, price, order_type
            )
            if not validation_result.is_valid:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"Validation failed: {', '.join(validation_result.errors)}"
                )

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance_check = await self._check_balance_for_order(symbol, Order.SIDE_BUY, amount, price)
            if not balance_check[0]:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"Insufficient balance: need {amount * price:.4f} {balance_check[1]}, have {balance_check[2]:.4f}"
                )

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
            order = self.order_factory.create_buy_order(
                symbol=symbol,
                amount=amount,
                price=price,
                deal_id=deal_id,
                order_type=order_type,
                client_order_id=client_order_id
            )

            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            self.orders_repo.save(order)

            # 5. –†–ï–ê–õ–¨–ù–û–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ
            if self.exchange_connector:
                execution_result = await self._execute_order_on_exchange(order)
                if execution_result.success:
                    self.stats['orders_executed'] += 1
                    logger.info(f"‚úÖ BUY order executed: {order.exchange_id}")
                else:
                    self.stats['orders_failed'] += 1
                    logger.error(f"‚ùå BUY order failed: {execution_result.error_message}")

                return execution_result
            else:
                # Fallback –±–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
                order.status = Order.STATUS_PENDING
                self.orders_repo.save(order)
                logger.warning(f"‚ö†Ô∏è BUY order created locally (no exchange connector)")

                return OrderExecutionResult(
                    success=True,
                    order=order,
                    error_message="Created locally - no exchange connector"
                )

        except Exception as e:
            logger.error(f"‚ùå Error creating BUY order: {e}")
            self.stats['orders_failed'] += 1
            return OrderExecutionResult(
                success=False,
                error_message=f"Unexpected error: {str(e)}"
            )

    async def create_and_place_sell_order(
        self,
        symbol: str,
        amount: float,
        price: float,
        deal_id: int,
        order_type: str = Order.TYPE_LIMIT,
        client_order_id: Optional[str] = None
    ) -> OrderExecutionResult:
        """
        üè∑Ô∏è –†–ï–ê–õ–¨–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ SELL –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
        """
        try:
            logger.info(f"üè∑Ô∏è Creating SELL order: {amount} {symbol} @ {price}")

            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            validation_result = await self._validate_order_params(
                symbol, Order.SIDE_SELL, amount, price, order_type
            )
            if not validation_result.is_valid:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"Validation failed: {', '.join(validation_result.errors)}"
                )

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance_check = await self._check_balance_for_order(symbol, Order.SIDE_SELL, amount, price)
            if not balance_check[0]:
                return OrderExecutionResult(
                    success=False,
                    error_message=f"Insufficient balance: need {amount:.4f} {balance_check[1]}, have {balance_check[2]:.4f}"
                )

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
            order = self.order_factory.create_sell_order(
                symbol=symbol,
                amount=amount,
                price=price,
                deal_id=deal_id,
                order_type=order_type,
                client_order_id=client_order_id
            )

            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            self.orders_repo.save(order)

            # 5. –†–ï–ê–õ–¨–ù–û–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ
            if self.exchange_connector:
                execution_result = await self._execute_order_on_exchange(order)
                if execution_result.success:
                    self.stats['orders_executed'] += 1
                    logger.info(f"‚úÖ SELL order executed: {order.exchange_id}")
                else:
                    self.stats['orders_failed'] += 1
                    logger.error(f"‚ùå SELL order failed: {execution_result.error_message}")

                return execution_result
            else:
                # Fallback –±–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
                order.status = Order.STATUS_PENDING
                self.orders_repo.save(order)
                logger.warning(f"‚ö†Ô∏è SELL order created locally (no exchange connector)")

                return OrderExecutionResult(
                    success=True,
                    order=order,
                    error_message="Created locally - no exchange connector"
                )

        except Exception as e:
            logger.error(f"‚ùå Error creating SELL order: {e}")
            self.stats['orders_failed'] += 1
            return OrderExecutionResult(
                success=False,
                error_message=f"Unexpected error: {str(e)}"
            )

    # üîß –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–¢–û–î–´

    async def _execute_order_on_exchange(self, order: Order) -> OrderExecutionResult:
        """
        üöÄ –†–ï–ê–õ–¨–ù–û–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        """
        last_error = None

        for attempt in range(self.max_retries):
            try:
                logger.info(f"üì§ Placing order on exchange (attempt {attempt + 1}/{self.max_retries})")

                # –í—ã–∑–æ–≤ API –±–∏—Ä–∂–∏
                exchange_response = await self.exchange_connector.create_order(
                    symbol=order.symbol,
                    side=order.side.lower(),
                    order_type=order.order_type.lower(),
                    amount=order.amount,
                    price=order.price if order.order_type == Order.TYPE_LIMIT else None
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂–∏
                order.mark_as_placed(
                    exchange_id=exchange_response['id'],
                    exchange_timestamp=exchange_response.get('timestamp')
                )
                order.update_from_exchange(exchange_response)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
                self.orders_repo.save(order)

                logger.info(f"‚úÖ Order placed successfully: {order.exchange_id}")
                return OrderExecutionResult(
                    success=True,
                    order=order,
                    exchange_response=exchange_response
                )

            except Exception as e:
                last_error = e
                order.retries += 1
                logger.warning(f"‚ö†Ô∏è Order placement failed (attempt {attempt + 1}): {e}")

                # Exponential backoff –¥–ª—è retry
                if attempt < self.max_retries - 1:
                    delay = self.retry_delay * (self.retry_backoff ** attempt)
                    await asyncio.sleep(delay)

        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        order.mark_as_failed(f"Failed after {self.max_retries} attempts: {last_error}")
        self.orders_repo.save(order)

        return OrderExecutionResult(
            success=False,
            order=order,
            error_message=f"Failed after {self.max_retries} attempts: {last_error}"
        )

    async def _validate_order_params(
        self,
        symbol: str,
        side: str,
        amount: float,
        price: float,
        order_type: str
    ) -> OrderValidationResult:
        """
        üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
        """
        errors = []
        warnings = []

        # –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not symbol:
            errors.append("Symbol is required")
        if amount <= 0:
            errors.append("Amount must be positive")
        if order_type == Order.TYPE_LIMIT and price <= 0:
            errors.append("Price must be positive for limit orders")
        if side not in [Order.SIDE_BUY, Order.SIDE_SELL]:
            errors.append("Side must be BUY or SELL")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ exchange info –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if self.exchange_connector:
            try:
                symbol_info = await self.exchange_connector.get_symbol_info(symbol)

                if amount < symbol_info.min_qty:
                    errors.append(f"Amount {amount} below minimum {symbol_info.min_qty}")
                if amount > symbol_info.max_qty:
                    errors.append(f"Amount {amount} above maximum {symbol_info.max_qty}")

                if order_type == Order.TYPE_LIMIT:
                    if price < symbol_info.min_price:
                        errors.append(f"Price {price} below minimum {symbol_info.min_price}")
                    if price > symbol_info.max_price:
                        errors.append(f"Price {price} above maximum {symbol_info.max_price}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    notional_value = amount * price
                    if notional_value < symbol_info.min_notional:
                        errors.append(f"Order value {notional_value} below minimum {symbol_info.min_notional}")

                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    if notional_value < symbol_info.min_notional * 1.1:
                        warnings.append(f"Order value close to minimum notional")

            except Exception as e:
                warnings.append(f"Could not validate against exchange info: {e}")

        return OrderValidationResult(
            is_valid=len(errors) == 0,
            errors=errors,
            warnings=warnings
        )

    async def _check_balance_for_order(
        self,
        symbol: str,
        side: str,
        amount: float,
        price: float
    ) -> Tuple[bool, str, float]:
        """
        üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
        """
        if not self.exchange_connector:
            return True, "UNKNOWN", 0.0  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞

        try:
            return await self.exchange_connector.check_sufficient_balance(
                symbol, side, amount, price
            )
        except Exception as e:
            logger.error(f"‚ùå Error checking balance: {e}")
            return False, "ERROR", 0.0

    # üìä –ú–ï–¢–û–î–´ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–†–î–ï–†–ê–ú–ò

    async def get_order_status(self, order: Order) -> Optional[Order]:
        """
        üìä –†–ï–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
        """
        if not order.exchange_id or not self.exchange_connector:
            return order

        try:
            logger.debug(f"üìä Checking status for order {order.exchange_id}")

            # –†–ï–ê–õ–¨–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ –±–∏—Ä–∂–µ
            exchange_order = await self.exchange_connector.fetch_order(
                order.exchange_id,
                order.symbol
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂–∏
            order.update_from_exchange(exchange_order)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.orders_repo.save(order)

            logger.debug(f"üìä Order {order.order_id} status updated: {order.status}")
            return order

        except Exception as e:
            logger.error(f"‚ùå Error checking order status {order.order_id}: {e}")
            return order

    async def cancel_order(self, order: Order) -> bool:
        """
        ‚ùå –†–ï–ê–õ–¨–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
        """
        if not order.is_open():
            logger.warning(f"‚ö†Ô∏è Order {order.order_id} is not open ({order.status})")
            return False

        if not self.exchange_connector or not order.exchange_id:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –±–µ–∑ –±–∏—Ä–∂–∏
            order.cancel("No exchange connector or exchange_id")
            self.orders_repo.save(order)
            logger.warning(f"‚ö†Ô∏è Order {order.order_id} cancelled locally")
            return True

        try:
            logger.info(f"‚ùå Cancelling order {order.exchange_id} on exchange")

            # –†–ï–ê–õ–¨–ù–ê–Ø –æ—Ç–º–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ
            exchange_response = await self.exchange_connector.cancel_order(
                order.exchange_id,
                order.symbol
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            order.cancel("Cancelled by user")
            if exchange_response:
                order.update_from_exchange(exchange_response)

            self.orders_repo.save(order)
            self.stats['orders_cancelled'] += 1

            logger.info(f"‚úÖ Order {order.order_id} cancelled successfully")
            return True

        except Exception as e:
            logger.error(f"‚ùå Error cancelling order {order.order_id}: {e}")
            return False

    async def sync_orders_with_exchange(self) -> List[Order]:
        """
        üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–µ–π
        """
        if not self.exchange_connector:
            logger.warning("‚ö†Ô∏è No exchange connector for sync")
            return []

        updated_orders = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            local_orders = self.get_open_orders()

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏
            exchange_orders = await self.exchange_connector.fetch_open_orders()
            exchange_orders_map = {order['id']: order for order in exchange_orders}

            for order in local_orders:
                if order.exchange_id:
                    if order.exchange_id in exchange_orders_map:
                        # –û—Ä–¥–µ—Ä –µ—Å—Ç—å –Ω–∞ –±–∏—Ä–∂–µ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        exchange_data = exchange_orders_map[order.exchange_id]
                        order.update_from_exchange(exchange_data)
                        self.orders_repo.save(order)
                        updated_orders.append(order)
                    else:
                        # –û—Ä–¥–µ—Ä–∞ –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ - –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
                        updated_order = await self.get_order_status(order)
                        if updated_order:
                            updated_orders.append(updated_order)

            logger.info(f"üîÑ Synced {len(updated_orders)} orders with exchange")
            return updated_orders

        except Exception as e:
            logger.error(f"‚ùå Error syncing orders: {e}")
            return []

    # üìã –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –û–†–î–ï–†–û–í

    def get_orders_by_deal(self, deal_id: int) -> List[Order]:
        """üìã –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ ID —Å–¥–µ–ª–∫–∏"""
        return self.orders_repo.get_all_by_deal(deal_id)

    def get_open_orders(self) -> List[Order]:
        """üìã –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        all_orders = self.orders_repo.get_all()
        return [order for order in all_orders if order.is_open() or order.is_partially_filled()]

    def get_order_by_id(self, order_id: int) -> Optional[Order]:
        """üìã –ü–æ–ª—É—á–∞–µ—Ç –æ—Ä–¥–µ—Ä –ø–æ ID"""
        return self.orders_repo.get_by_id(order_id)

    def get_orders_by_symbol(self, symbol: str) -> List[Order]:
        """üìã –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        all_orders = self.orders_repo.get_all()
        return [order for order in all_orders if order.symbol == symbol]

    # üö® –≠–ö–°–¢–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´

    async def emergency_cancel_all_orders(self, symbol: str = None) -> int:
        """
        üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        """
        logger.warning("üö® Emergency cancellation of all orders")

        open_orders = self.get_open_orders()
        if symbol:
            open_orders = [order for order in open_orders if order.symbol == symbol]

        cancelled_count = 0
        for order in open_orders:
            try:
                if await self.cancel_order(order):
                    cancelled_count += 1
            except Exception as e:
                logger.error(f"‚ùå Failed to cancel order {order.order_id}: {e}")

        logger.warning(f"üö® Emergency cancelled {cancelled_count}/{len(open_orders)} orders")
        return cancelled_count

    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì

    def get_statistics(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
        all_orders = self.orders_repo.get_all()

        stats = self.stats.copy()
        stats.update({
            'total_orders': len(all_orders),
            'open_orders': len(self.get_open_orders()),
            'success_rate': (self.stats['orders_executed'] / max(self.stats['orders_created'], 1)) * 100
        })

        return stats

    def reset_statistics(self):
        """üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            'orders_created': 0,
            'orders_executed': 0,
            'orders_failed': 0,
            'orders_cancelled': 0,
            'total_fees': 0.0
        }

    # üÜï –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–û –°–¢–ê–†–´–ú –ö–û–î–û–ú

    def create_buy_order(self, price: float, amount: float) -> Order:
        """–£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø"""
        logger.warning("‚ö†Ô∏è Using legacy create_buy_order method")
        return self.order_factory.create_buy_order_legacy(price, amount)

    def create_sell_order(self, price: float, amount: float) -> Order:
        """–£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø"""
        logger.warning("‚ö†Ô∏è Using legacy create_sell_order method")
        return self.order_factory.create_sell_order_legacy(price, amount)

    def save_order(self, order: Order):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        self.orders_repo.save(order)
        self.stats['orders_created'] += 1
