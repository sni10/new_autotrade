# domain/services/order_service.py
import asyncio
from typing import Optional, Dict
from domain.entities.order import Order
from domain.factories.order_factory import OrderFactory
from infrastructure.repositories.orders_repository import OrdersRepository

class OrderService:
    """
    üìã –ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–¥–µ—Ä–∞–º–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤
    - –û—Ç–º–µ–Ω–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏
    """

    def __init__(
        self,
        orders_repo: OrdersRepository,
        order_factory: OrderFactory,
        exchange_connector=None  # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∫ –±–∏—Ä–∂–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    ):
        self.orders_repo = orders_repo
        self.order_factory = order_factory
        self.exchange_connector = exchange_connector

    async def create_and_place_buy_order(
        self,
        price: float,
        amount: float,
        deal_id: int,
        symbol: str
    ) -> Order:
        """
        üõí –°–æ–∑–¥–∞–µ—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç BUY –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
        """
        # 1. –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        order = self.order_factory.create_buy_order(price, amount)
        order.deal_id = deal_id
        order.symbol = symbol

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        self.orders_repo.save(order)

        # 3. –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞ –±–∏—Ä–∂–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä)
        if self.exchange_connector:
            try:
                # TODO: –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ccxt
                # exchange_response = await self.exchange_connector.create_order(
                #     symbol=symbol,
                #     side='buy',
                #     type='limit',
                #     amount=amount,
                #     price=price
                # )
                # order.exchange_id = exchange_response['id']

                # –ü–æ–∫–∞ —ç–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                order.status = Order.STATUS_OPEN
                print(f"üõí BUY –æ—Ä–¥–µ—Ä #{order.order_id} —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ (—ç–º—É–ª—è—Ü–∏—è)")

            except Exception as e:
                order.status = Order.STATUS_FAILED
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è BUY –æ—Ä–¥–µ—Ä–∞: {e}")
        else:
            # –ë–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ - —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            order.status = Order.STATUS_PENDING
            print(f"üõí BUY –æ—Ä–¥–µ—Ä #{order.order_id} —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ")

        # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        self.orders_repo.save(order)
        return order

    async def create_and_place_sell_order(
        self,
        price: float,
        amount: float,
        deal_id: int,
        symbol: str
    ) -> Order:
        """
        üè∑Ô∏è –°–æ–∑–¥–∞–µ—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç SELL –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
        """
        # 1. –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        order = self.order_factory.create_sell_order(price, amount)
        order.deal_id = deal_id
        order.symbol = symbol

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        self.orders_repo.save(order)

        # 3. –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞ –±–∏—Ä–∂–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä)
        if self.exchange_connector:
            try:
                # TODO: –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ccxt
                # exchange_response = await self.exchange_connector.create_order(
                #     symbol=symbol,
                #     side='sell',
                #     type='limit',
                #     amount=amount,
                #     price=price
                # )
                # order.exchange_id = exchange_response['id']

                # –ü–æ–∫–∞ —ç–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                order.status = Order.STATUS_OPEN
                print(f"üè∑Ô∏è SELL –æ—Ä–¥–µ—Ä #{order.order_id} —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ (—ç–º—É–ª—è—Ü–∏—è)")

            except Exception as e:
                order.status = Order.STATUS_FAILED
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SELL –æ—Ä–¥–µ—Ä–∞: {e}")
        else:
            # –ë–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ - —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            order.status = Order.STATUS_PENDING
            print(f"üè∑Ô∏è SELL –æ—Ä–¥–µ—Ä #{order.order_id} —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ")

        # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        self.orders_repo.save(order)
        return order

    def get_order_status(self, order: Order) -> Optional[Order]:
        """
        üìä –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏
        """
        if not order.exchange_id or not self.exchange_connector:
            # –ë–µ–∑ –±–∏—Ä–∂–µ–≤–æ–≥–æ ID –∏–ª–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return order

        try:
            # TODO: –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ ccxt
            # exchange_order = await self.exchange_connector.fetch_order(
            #     order.exchange_id,
            #     order.symbol
            # )
            #
            # # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ –±–∏—Ä–∂–∏
            # if exchange_order['status'] == 'closed':
            #     order.status = Order.STATUS_FILLED
            # elif exchange_order['status'] == 'canceled':
            #     order.status = Order.STATUS_CANCELED

            # –ü–æ–∫–∞ —ç–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
            print(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ #{order.order_id}: {order.status}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ #{order.order_id}: {e}")

        return order

    async def cancel_order(self, order: Order) -> bool:
        """
        ‚ùå –û—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
        """
        if not order.is_open():
            print(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä #{order.order_id} —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return False

        try:
            # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞ –±–∏—Ä–∂–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä)
            if self.exchange_connector and order.exchange_id:
                # TODO: –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ ccxt
                # await self.exchange_connector.cancel_order(
                #     order.exchange_id,
                #     order.symbol
                # )
                print(f"‚ùå –û—Ä–¥–µ—Ä #{order.order_id} –æ—Ç–º–µ–Ω–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ (—ç–º—É–ª—è—Ü–∏—è)")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ
            order.cancel()
            self.orders_repo.save(order)
            print(f"‚ùå –û—Ä–¥–µ—Ä #{order.order_id} –æ—Ç–º–µ–Ω–µ–Ω")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ #{order.order_id}: {e}")
            return False

    def get_orders_by_deal(self, deal_id: int):
        """
        üìã –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ ID —Å–¥–µ–ª–∫–∏
        """
        return self.orders_repo.get_all_by_deal(deal_id)

    def get_open_orders(self):
        """
        üìã –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        """
        all_orders = self.orders_repo.get_all()
        return [order for order in all_orders if order.is_open()]

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def create_buy_order(self, price: float, amount: float) -> Order:
        """–°–æ–∑–¥–∞–µ—Ç BUY –æ—Ä–¥–µ—Ä (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.order_factory.create_buy_order(price, amount)

    def create_sell_order(self, price: float, amount: float) -> Order:
        """–°–æ–∑–¥–∞–µ—Ç SELL –æ—Ä–¥–µ—Ä (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.order_factory.create_sell_order(price, amount)

    def save_order(self, order: Order):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        self.orders_repo.save(order)
