import math
from decimal import Decimal, ROUND_DOWN, ROUND_HALF_UP, InvalidOperation
from typing import Dict, List

import talib
import numpy as np
from talib import MA_Type

from domain.entities.ticker import Ticker
from infrastructure.repositories.tickers_repository import InMemoryTickerRepository


def safe_decimal(value, default=Decimal("0")):
    """üî• –ñ—ë—Å—Ç–∫–∏–π —Ñ–∏–∫—Å: –Ω–∞–¥—ë–∂–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ Decimal."""
    try:
        if value is None:
            raise ValueError("–ü–æ–ª—É—á–µ–Ω None –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞")
        if isinstance(value, (float, int)):
            return Decimal(str(value))  # –°—Ç—Ä–æ–∫–∞ –∏—Å–∫–ª—é—á–∞–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return Decimal(value)  # –ï—Å–ª–∏ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ Decimal ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    except (InvalidOperation, TypeError, ValueError) as e:
        print(f"üö® –û—à–∏–±–∫–∞ Decimal: {value} ({type(value)}) - {e}")
        return Decimal(default)

def floor_to_step(value, step):
    return Decimal(value).quantize(Decimal(str(step)), rounding=ROUND_DOWN)

def round_to_step(value, step):
    return Decimal(value).quantize(Decimal(str(step)), rounding=ROUND_HALF_UP)


class TickerService:
    def __init__(self, repository: InMemoryTickerRepository):
        self.repository = repository

    def process_ticker(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        ticker = Ticker(data)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏)
        last_n_tickers = self.repository.get_last_n(100)  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–Ω–∞—á–µ–Ω–∏–π
        signals = self.compute_signals(last_n_tickers)
        ticker.update_signals(signals)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ä
        self.repository.save(ticker)

    def calculate_strategy(self, buy_price, budget, min_step, price_step,
                        buy_fee_percent, sell_fee_percent, profit_percent):
        """–†–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–¥–µ–ª–∫–∏ —Å —É—á—ë—Ç–æ–º —à–∞–≥–∞ —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""

        # üîç –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
        print(f"üîé buy_price={buy_price}, budget={budget}, min_step={min_step}, price_step={price_step}")
        print(f"üîé buy_fee_percent={buy_fee_percent}, sell_fee_percent={sell_fee_percent}, profit_percent={profit_percent}")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Decimal
        buy_price = safe_decimal(buy_price)
        budget = safe_decimal(budget)
        min_step = safe_decimal(min_step)  # min_step = 1 (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
        price_step = safe_decimal(price_step)  # price_step = 0.0000001
        buy_fee_percent = safe_decimal(buy_fee_percent)
        sell_fee_percent = safe_decimal(sell_fee_percent)
        profit_percent = safe_decimal(profit_percent)

        # –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (<= 0), –≤—ã–¥–∞—ë–º –æ—à–∏–±–∫—É
        if buy_price <= 0 or budget <= 0 or min_step <= 0 or price_step <= 0:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            return {"comment": "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."}

        # üîπ –†–∞—Å—á—ë—Ç —Ü–µ–Ω —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ price_step
        buy_price_with_fee = round_to_step(buy_price * (1 + buy_fee_percent / 100), price_step)
        sell_price_raw = buy_price * (1 + profit_percent / 100)
        sell_price = round_to_step(sell_price_raw, price_step)

        # üîç –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        print(f"üí∞ buy_price_with_fee={buy_price_with_fee}, sell_price_raw={sell_price_raw}, sell_price={sell_price}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ —Ü–µ–Ω—ã
        if (sell_price - buy_price) < price_step:
            print("‚ùå –ü—Ä–∏–±—ã–ª—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ —Ü–µ–Ω—ã")
            return {"comment": "‚ùå –ü—Ä–∏–±—ã–ª—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ —Ü–µ–Ω—ã"}

        # üîπ –†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö –º–æ–Ω–µ—Ç)
        coin_after_sell_fee_factor = (1 - sell_fee_percent / 100)
        raw_max_x = budget * (coin_after_sell_fee_factor / buy_price_with_fee)
        X_adjusted = round_to_step(raw_max_x, min_step)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ (min_step = 1)

        if X_adjusted <= 0:
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥")
            return {"comment": "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥"}

        total_coins_needed = X_adjusted / coin_after_sell_fee_factor
        total_coins_needed = round_to_step(total_coins_needed, min_step)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö –º–æ–Ω–µ—Ç (min_step = 1)
        total_usdt_needed = round_to_step(total_coins_needed * buy_price_with_fee, Decimal("0.01"))  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 0.01
        final_revenue = floor_to_step(X_adjusted * sell_price, Decimal("0.01"))  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 0.01
        net_profit = floor_to_step(final_revenue - total_usdt_needed, Decimal("0.01"))  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 0.01

        # üîç –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã
        print(f"üìä total_usdt_needed={total_usdt_needed}, final_revenue={final_revenue}, net_profit={net_profit}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        if net_profit <= 0:
            print("‚ùå –ù—É–ª–µ–≤–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
            return {"comment": "‚ùå –ù—É–ª–µ–≤–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å"}

        return buy_price, total_coins_needed, sell_price, X_adjusted, {
            "comment": "‚úÖ –°–¥–µ–ª–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞.",
            "üîπ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–∏—Å—Ö–æ–¥–Ω–∞—è)": f"{buy_price} USDT",
            "üîπ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)": f"{buy_price_with_fee} USDT",
            "üîπ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è)": f"{sell_price} USDT",
            "üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã": f"{price_step:.7f} USDT",
            "üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏": f"{X_adjusted} –º–æ–Ω–µ—Ç",
            "üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏": f"{total_coins_needed} –º–æ–Ω–µ—Ç",
            "üîπ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ—Ç—Ä–∞—Ç–∏–º": f"{total_usdt_needed} USDT",
            "üîπ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥": f"{final_revenue} USDT",
            "üîπ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": f"{net_profit} USDT"
        }

    def get_signal(self) -> str:
        """
        –†–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤.
        –£—Å–ª–æ–≤–∏—è:
        - –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ HIST –∑–µ–ª–µ–Ω–∞—è (–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥).
        - MACD –≤—ã—à–µ SIGNAL.
        - –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ HIST –±—ã–ª–∞ –∑–µ–ª–µ–Ω–æ–π 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥.
        """

        RED = "\033[91m"
        GREEN = "\033[92m"
        YELLOW = "\033[93m"
        RESET = "\033[0m"

        indicators = self.repository.tickers
        HIST_ANALYSIS_POINTS = 3
        ANALYSIS_POINTS = 5

        if len(indicators) < HIST_ANALYSIS_POINTS:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            return "HOLD"

        # --- –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ `HIST_ANALYSIS_POINTS` –∑–Ω–∞—á–µ–Ω–∏–π ---
        hist_values = [t.signals.get("histogram", 0) for t in indicators[-HIST_ANALYSIS_POINTS:]]
        macd_values = [t.signals.get("macd", 0) for t in indicators[-HIST_ANALYSIS_POINTS:]]
        signal_values = [t.signals.get("signal", 0) for t in indicators[-HIST_ANALYSIS_POINTS:]]

        sma_7_values = [t.signals.get("sma_7", 0) for t in indicators[-ANALYSIS_POINTS:]]
        sma_25_values = [t.signals.get("sma_25", 0) for t in indicators[-ANALYSIS_POINTS:]]
        sma_99_values = [t.signals.get("sma_99", 0) for t in indicators[-ANALYSIS_POINTS:]]

        hist_trend = [hist_values[i] - hist_values[i - 1] for i in range(1, HIST_ANALYSIS_POINTS)]
        if len(sma_7_values) >= ANALYSIS_POINTS & len(sma_25_values) >= ANALYSIS_POINTS & len(
                sma_99_values) >= ANALYSIS_POINTS:
            sma_7_trend = [sma_7_values[i] - sma_7_values[i - 1] for i in range(1, ANALYSIS_POINTS)]
            sma_25_trend = [sma_25_values[i] - sma_25_values[i - 1] for i in range(1, ANALYSIS_POINTS)]
            sma_99_trend = [sma_99_values[i] - sma_99_values[i - 1] for i in range(1, ANALYSIS_POINTS)]
        else:
            sma_7_trend = []
            sma_25_trend = []
            sma_99_trend = []

        hist_color = GREEN if all(diff > 0 for diff in hist_trend) else RED
        sma_7_color = GREEN if all(diff > 0 for diff in sma_7_trend) else RED
        sma_25_color = GREEN if all(diff > 0 for diff in sma_25_trend) else RED
        sma_99_color = GREEN if all(diff > 0 for diff in sma_99_trend) else RED

        hist_trend_green = hist_color == GREEN
        sma_7_trend_green = sma_7_color == GREEN
        sma_25_trend_green = sma_25_color == GREEN
        sma_99_trend_green = sma_99_color == GREEN

        macd_above_signal = macd_values[-1] > signal_values[-1]

        sma_trend_green = sma_7_trend_green and sma_25_trend_green and sma_99_trend_green  # –í—Å–µ —Ç—Ä–∏ SMA –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Ç–∏

        # --- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ---
        if hist_trend_green and macd_above_signal and sma_trend_green:
            return "BUY"
        else:
            return "HOLD"

    def compute_signals(self, history: List[Ticker]) -> Dict:
        if len(history) < 20:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            return {}

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –º–∞—Å—Å–∏–≤ NumPy
        closes = np.array([t.close for t in history])

        macd, macdsignal, macdhist = talib.MACD(closes, fastperiod=12, slowperiod=26, signalperiod=9)

        rsi_5 = talib.RSI(closes, timeperiod=5)
        rsi_15 = talib.RSI(closes, timeperiod=15)
        rsi_30 = talib.RSI(closes, timeperiod=30)

        sma_7 = talib.MA(closes, timeperiod=7, matype=MA_Type.SMA)
        sma_25 = talib.MA(closes, timeperiod=25, matype=MA_Type.SMA)
        sma_99 = talib.MA(closes, timeperiod=75, matype=MA_Type.SMA)

        # Bollinger Bands (BBANDS) 20, 2
        upperband, middleband, lowerband = talib.BBANDS(closes, timeperiod=20, nbdevup=2, nbdevdn=2, matype=MA_Type.SMA)

        return {
            # MACD
            "macd": round(float(macd[-1]), 8),
            "signal": round(float(macdsignal[-1]), 8),
            "histogram": round(float(macdhist[-1]), 8),

            # RSI
            "rsi_5": round(float(rsi_5[-1]), 8),
            "rsi_15": round(float(rsi_15[-1]), 8),
            "rsi_30": round(float(rsi_30[-1]), 8),

            # SMA
            "sma_7": round(float(sma_7[-1]), 8),
            "sma_25": round(float(sma_25[-1]), 8),
            "sma_99": round(float(sma_99[-1]), 8),

            # BBANDS
            "bb_upper": round(float(upperband[-1]), 8),
            "bb_middle": round(float(middleband[-1]), 8),
            "bb_lower": round(float(lowerband[-1]), 8),

        }
