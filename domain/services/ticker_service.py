import math
from typing import Dict, List

import talib
import numpy as np
from talib import MA_Type

from domain.entities.ticker import Ticker
from infrastructure.repositories.tickers_repository import InMemoryTickerRepository


class TickerService:
    def __init__(self, repository: InMemoryTickerRepository):
        self.repository = repository

    def process_ticker(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        ticker = Ticker(data)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏)
        last_n_tickers = self.repository.get_last_n(100)  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–Ω–∞—á–µ–Ω–∏–π
        signals = self.compute_signals(last_n_tickers)
        ticker.update_signals(signals)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ä
        self.repository.save(ticker)

    def calculate_trading_strategy_improved(self, buy_price, budget, min_step,
                                            buy_fee_percent, sell_fee_percent,
                                            profit_percent):
        """–†–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–¥–µ–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É."""

        buy_price_with_fee_factor = buy_price * (1 + buy_fee_percent / 100)
        coin_after_sell_fee_factor = (1 - sell_fee_percent / 100)
        sell_price = buy_price * (1 + profit_percent / 100)

        if coin_after_sell_fee_factor <= 0:
            return {"comment": "‚ùå –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ–¥–∞–∂–∏ >= 100%. –°–¥–µ–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."}

        def floor_to_step(value, step):
            return math.floor(value / step) * step

        raw_max_x = budget * (coin_after_sell_fee_factor / buy_price_with_fee_factor)
        X_adjusted = floor_to_step(raw_max_x, min_step)

        if X_adjusted <= 0:
            return {"comment": "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥."}

        total_coins_needed = X_adjusted / coin_after_sell_fee_factor
        total_usdt_needed = total_coins_needed * buy_price_with_fee_factor
        final_revenue = X_adjusted * sell_price
        net_profit = final_revenue - total_usdt_needed

        return {
            "comment": "‚úÖ –°–¥–µ–ª–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞.",
            "üîπ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)": f"{buy_price} USDT/–º–æ–Ω–µ—Ç—É",
            "üîπ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)": f"{buy_price_with_fee_factor} USDT/–º–æ–Ω–µ—Ç—É",
            "üîπ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏": f"{sell_price} USDT/–º–æ–Ω–µ—Ç—É",
            "üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏": f"{X_adjusted} –º–æ–Ω–µ—Ç",
            "üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏": f"{total_coins_needed} –º–æ–Ω–µ—Ç",
            "üîπ –û–±—â–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏": f"{total_usdt_needed} USDT",
            "üîπ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥": f"{final_revenue} USDT",
            "üîπ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": f"{net_profit} USDT"
        }

    def get_signal(self) -> str:
        """
        –†–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤.
        –£—Å–ª–æ–≤–∏—è:
        - –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ HIST –∑–µ–ª–µ–Ω–∞—è (–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥).
        - MACD –≤—ã—à–µ SIGNAL.
        - –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ HIST –±—ã–ª–∞ –∑–µ–ª–µ–Ω–æ–π 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥.
        """

        RED = "\033[91m"
        GREEN = "\033[92m"
        YELLOW = "\033[93m"
        RESET = "\033[0m"

        indicators = self.repository.tickers
        HIST_ANALYSIS_POINTS = 3
        ANALYSIS_POINTS = 5


        if len(indicators) < HIST_ANALYSIS_POINTS:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            return "HOLD"

        # --- –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ `HIST_ANALYSIS_POINTS` –∑–Ω–∞—á–µ–Ω–∏–π ---
        hist_values = [t.signals.get("histogram", 0) for t in indicators[-HIST_ANALYSIS_POINTS:]]
        macd_values = [t.signals.get("macd", 0) for t in indicators[-HIST_ANALYSIS_POINTS:]]
        signal_values = [t.signals.get("signal", 0) for t in indicators[-HIST_ANALYSIS_POINTS:]]

        sma_7_values = [t.signals.get("sma_7", 0) for t in indicators[-ANALYSIS_POINTS:]]
        sma_25_values = [t.signals.get("sma_25", 0) for t in indicators[-ANALYSIS_POINTS:]]
        sma_99_values = [t.signals.get("sma_99", 0) for t in indicators[-ANALYSIS_POINTS:]]

        hist_trend = [hist_values[i] - hist_values[i - 1] for i in range(1, HIST_ANALYSIS_POINTS)]

        sma_7_trend = [sma_7_values[i] - sma_7_values[i - 1] for i in range(1, ANALYSIS_POINTS)]
        sma_25_trend = [sma_25_values[i] - sma_25_values[i - 1] for i in range(1, ANALYSIS_POINTS)]
        sma_99_trend = [sma_99_values[i] - sma_99_values[i - 1] for i in range(1, ANALYSIS_POINTS)]

        hist_color = GREEN if all(diff > 0 for diff in hist_trend) else RED
        sma_7_color = GREEN if all(diff > 0 for diff in sma_7_trend) else RED
        sma_25_color = GREEN if all(diff > 0 for diff in sma_25_trend) else RED
        sma_99_color = GREEN if all(diff > 0 for diff in sma_99_trend) else RED

        hist_trend_green = hist_color == GREEN
        sma_7_trend_green = sma_7_color == GREEN
        sma_25_trend_green = sma_25_color == GREEN
        sma_99_trend_green = sma_99_color == GREEN

        macd_above_signal = macd_values[-1] > signal_values[-1]

        sma_trend_green = sma_7_trend_green and sma_25_trend_green and sma_99_trend_green  # –í—Å–µ —Ç—Ä–∏ SMA –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Ç–∏

        # --- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ---
        if hist_trend_green and macd_above_signal and sma_trend_green:
            return "BUY"
        else:
            return "HOLD"

    def compute_signals(self, history: List[Ticker]) -> Dict:
        if len(history) < 20:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            return {}

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –º–∞—Å—Å–∏–≤ NumPy
        closes = np.array([t.close for t in history])

        macd, macdsignal, macdhist = talib.MACD(closes, fastperiod=12, slowperiod=26, signalperiod=9)

        rsi_5 = talib.RSI(closes, timeperiod=5)
        rsi_15 = talib.RSI(closes, timeperiod=15)
        rsi_30 = talib.RSI(closes, timeperiod=30)

        sma_7 = talib.MA(closes, timeperiod=7, matype=MA_Type.SMA)
        sma_25 = talib.MA(closes, timeperiod=25, matype=MA_Type.SMA)
        sma_99 = talib.MA(closes, timeperiod=75, matype=MA_Type.SMA)


        # Bollinger Bands (BBANDS) 20, 2
        upperband, middleband, lowerband = talib.BBANDS(closes, timeperiod=20, nbdevup=2, nbdevdn=2, matype=MA_Type.SMA)


        return {
            # MACD
            "macd": round(float(macd[-1]), 8),
            "signal": round(float(macdsignal[-1]), 8),
            "histogram": round(float(macdhist[-1]), 8),

            # RSI
            "rsi_5": round(float(rsi_5[-1]), 8),
            "rsi_15": round(float(rsi_15[-1]), 8),
            "rsi_30": round(float(rsi_30[-1]), 8),

            # SMA
            "sma_7": round(float(sma_7[-1]), 8),
            "sma_25": round(float(sma_25[-1]), 8),
            "sma_99": round(float(sma_99[-1]), 8),

            # BBANDS
            "bb_upper": round(float(upperband[-1]), 8),
            "bb_middle": round(float(middleband[-1]), 8),
            "bb_lower": round(float(lowerband[-1]), 8),

        }
